import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as i}from"./app-NomDibRt.js";const p="/vpress/images/spring/springboot/1-1.jpg",t={};function l(o,s){return i(),a("div",null,s[0]||(s[0]=[e(`<h1 id="spring-boot-集成-mybatis" tabindex="-1"><a class="header-anchor" href="#spring-boot-集成-mybatis"><span>Spring Boot 集成 Mybatis</span></a></h1><blockquote><p>作者：老马<br><br>公众号：老马啸西风<br><br> 博客：<a href="https://houbb.github.io/" target="_blank" rel="noopener noreferrer">https://houbb.github.io/</a><br><br> 人生理念：知行合一</p></blockquote><p><code>Spring Boot 作为主流微服务框架，拥有成熟的社区生态。市场应用广泛，为了方便大家，整理了一个基于spring boot的常用中间件快速集成入门系列手册，涉及RPC、缓存、消息队列、分库分表、注册中心、分布式配置等常用开源组件，大概有几十篇文章，陆续会开放出来，感兴趣同学可以关注&amp;收藏</code></p><h2 id="_1、简介" tabindex="-1"><a class="header-anchor" href="#_1、简介"><span>1、简介</span></a></h2><p>MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的<strong>xml 文件 或注解</strong>来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p><p>与其他的ORM框架不同，mybatis没有将java对象与数据库表关联起来，而是将java方法与sql语句关联。允许用户充分利用数据库的各种功能。</p><p>与JDBC相比，mybatis简化了代码，sql语句在一行代码中就能执行。mybatis支持声明式缓存，当一条sql被标记为<code>可缓存</code>后，首次执行sql从数据库查询的数据会被存储到一个高速缓存中，后面再执行这条语句就会从高速缓存中读取结果，而不是再次查询数据库。Mybatis除了基于默认的HashMap的缓存实现，还支持OSCache、Ehcache、Memcached等扩展缓存。</p><h2 id="_2、依赖集成" tabindex="-1"><a class="header-anchor" href="#_2、依赖集成"><span>2、依赖集成</span></a></h2><p><strong>首先添加mybatis 的spring boot start组件，引入pom依赖</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span></span>
<span class="line"><span>    &lt;version&gt;1.3.0&lt;/version&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>包依赖关系：</strong></p><div align="left"><img src="`+p+`" width="800px"></div><p>通过IDEA的maven插件可以查看到pom的依赖关系，Spring Boot 2默认数据库连接池选择了HikariCP。</p><p>HiKariCP是数据库连接池的一个后起之秀，号称性能最好，可以完美地PK掉其他连接池，是一个高性能的JDBC连接池，基于BoneCP做了不少的改进和优化。但代码体积比较小，只有130kb。</p><p><strong>HikariCP与Druid相比哪个更好？</strong></p><p>Druid是阿里巴巴开源的“为监控而生的数据库连接池！”。 性能测试过程略低于HikariCP，但是提供了强大的监控和扩展功能。支持psCache。</p><blockquote><p>更多的内容比较可以参考：<br><br> <a href="https://github.com/brettwooldridge/HikariCP/issues/232" target="_blank" rel="noopener noreferrer">https://github.com/brettwooldridge/HikariCP/issues/232</a></p></blockquote><p><strong>另外的数据库驱动需要我们自己手动引入，具体的pom依赖</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;mysql&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、代码演示" tabindex="-1"><a class="header-anchor" href="#_3、代码演示"><span>3、代码演示</span></a></h2><p><strong>配置数据源</strong></p><p>数据源在 <code>application.yaml</code> 文件中的配置前缀为 <code>spring.datasource</code>，hikari连接池的配置通过<code>spring.datasource.hikari</code>进行配置，具体配置如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>spring:</span></span>
<span class="line"><span>  datasource:</span></span>
<span class="line"><span>    driver-class-name: com.mysql.cj.jdbc.Driver</span></span>
<span class="line"><span>    url: jdbc:mysql://127.0.0.1:3306/ds0?characterEncoding=utf-8</span></span>
<span class="line"><span>    username: root</span></span>
<span class="line"><span>    password: 111111</span></span>
<span class="line"><span>    # Hikari config</span></span>
<span class="line"><span>    type: com.zaxxer.hikari.HikariDataSource</span></span>
<span class="line"><span>    hikari:</span></span>
<span class="line"><span>      minimum-idle: 10</span></span>
<span class="line"><span>      maximum-pool-size: 200</span></span>
<span class="line"><span>      idle-timeout: 60000</span></span>
<span class="line"><span>      pool-name: MarketingHikariCP</span></span>
<span class="line"><span>      max-lifetime: 1800000</span></span>
<span class="line"><span>      connection-timeout: 2000</span></span>
<span class="line"><span>      connection-test-query: select 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>数据库驱动早期使用 com.mysql.jdbc.Driver已经标记为过时，现在请使用com.mysql.cj.jdbc.Driver。</p></blockquote><p><strong>mybatis 相关配置</strong></p><p>mybatis的配置比较少，主要是 <code>实体类、*Mapper接口、*Mapper.xml、mybatis的一些框架扩展配置</code></p><p>增删改查数据库的sql语句的XML文件，我们放在<code>resources </code>下的<code>mappers</code>文件夹中，编译后就是类路径下的<code>mappers</code>文件夹中，所以需要在<code>application.yaml</code>进行如下配置</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>mybatis:</span></span>
<span class="line"><span>  config-location: classpath:config/mybatis-config.xml</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的<code>User.xml</code>文件内容：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;mapper namespace=&quot;com.weiguanjishu.domain.mapper.UserMapper&quot;&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    &lt;resultMap id=&quot;userResultMap&quot; type=&quot;com.weiguanjishu.domain.model.User&quot;&gt;</span></span>
<span class="line"><span>        &lt;result column=&quot;id&quot; property=&quot;id&quot;/&gt;</span></span>
<span class="line"><span>        &lt;result column=&quot;user_name&quot; property=&quot;userName&quot;/&gt;</span></span>
<span class="line"><span>        &lt;result column=&quot;age&quot; property=&quot;age&quot;/&gt;</span></span>
<span class="line"><span>        &lt;result column=&quot;address&quot; property=&quot;address&quot;/&gt;</span></span>
<span class="line"><span>    &lt;/resultMap&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    &lt;!-- 插入用户 --&gt;</span></span>
<span class="line"><span>    &lt;insert id=&quot;addUser&quot; parameterType=&quot;com.weiguanjishu.domain.model.User&quot;&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        &lt;selectKey resultType=&quot;java.lang.Long&quot; keyProperty=&quot;id&quot; order=&quot;AFTER&quot;&gt;</span></span>
<span class="line"><span>            SELECT LAST_INSERT_ID()</span></span>
<span class="line"><span>        &lt;/selectKey&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        insert into user (user_name,age,address )</span></span>
<span class="line"><span>        VALUES ( #{userName}, #{age}, #{address} )</span></span>
<span class="line"><span>    &lt;/insert&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>省略内容。。。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你想要打印每次请求的<code>SQL语句</code>，只需要声明Mapper接口包的日志级别为<code>DEBUG </code>就可以了</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>logging:</span></span>
<span class="line"><span>  level:</span></span>
<span class="line"><span>    com.weiguanjishu.domain.mapper: debug</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4、sql-注解方式" tabindex="-1"><a class="header-anchor" href="#_4、sql-注解方式"><span>4、sql 注解方式</span></a></h2><p>sql语句除了放在xml文件中，mybatis也支持注解方式，将SQL语句直接写在接口上，如：<code> @Insert 、@Update 、 @Delete 、@Select 、 @Results</code> 等。</p><p>@Select、@Insert、@Update以及@Delete四个注解分别对应XML中的select、insert、update以及delete标签，@Results注解类似于XML中的ResultMap映射文件。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@Mapper</span></span>
<span class="line"><span>public interface PromotionShopMapper {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    String PROMOTION_SHOP_RESULT_MAP = &quot;promotionShopResultMap&quot;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Insert({</span></span>
<span class="line"><span>            &quot;insert into promotion_shop (promotion_id,shop_id,shop_type,create_time,update_time,is_deleted) &quot;,</span></span>
<span class="line"><span>            &quot;values (#{promotionId},#{shopId},#{shopType},now(),now(),0)&quot;</span></span>
<span class="line"><span>    })</span></span>
<span class="line"><span>    @Options(useGeneratedKeys = true, keyProperty = &quot;id&quot;)</span></span>
<span class="line"><span>    void insert(PromotionShopDO record);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Select(&quot;select * from promotion_shop where promotion_id = #{promotionId} and is_deleted = 0&quot;)</span></span>
<span class="line"><span>    @Results(id = PROMOTION_SHOP_RESULT_MAP, value = {</span></span>
<span class="line"><span>            @Result(column = &quot;id&quot;, property = &quot;id&quot;),</span></span>
<span class="line"><span>            @Result(column = &quot;promotion_id&quot;, property = &quot;promotionId&quot;),</span></span>
<span class="line"><span>            @Result(column = &quot;shop_id&quot;, property = &quot;shopId&quot;),</span></span>
<span class="line"><span>            @Result(column = &quot;shop_type&quot;, property = &quot;shopType&quot;),</span></span>
<span class="line"><span>            @Result(column = &quot;create_time&quot;, property = &quot;createTime&quot;),</span></span>
<span class="line"><span>            @Result(column = &quot;update_time&quot;, property = &quot;updateTime&quot;),</span></span>
<span class="line"><span>            @Result(column = &quot;is_deleted&quot;, property = &quot;isDeleted&quot;)</span></span>
<span class="line"><span>    })</span></span>
<span class="line"><span>    List&lt;PromotionShopDO&gt; queryByPromotionId(@Param(&quot;promotionId&quot;) long promotionId);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Insert(&quot;&lt;script&gt;&quot;</span></span>
<span class="line"><span>            + &quot;insert into promotion_shop&quot;</span></span>
<span class="line"><span>            + &quot; (&quot;</span></span>
<span class="line"><span>            + &quot; promotion_id,shop_id,shop_type,create_time,update_time,is_deleted&quot;</span></span>
<span class="line"><span>            + &quot; )&quot;</span></span>
<span class="line"><span>            + &quot; values&quot;</span></span>
<span class="line"><span>            + &quot; &lt;foreach collection=&#39;list&#39; item=&#39;record&#39; index=&#39;index&#39; separator=&#39;,&#39;&gt; &quot;</span></span>
<span class="line"><span>            + &quot; (#{record.promotionId},#{record.shopId},#{record.shopType},now(),now(), 0)&quot;</span></span>
<span class="line"><span>            + &quot; &lt;/foreach&gt;&quot;</span></span>
<span class="line"><span>            + &quot; &lt;/script&gt;&quot;)</span></span>
<span class="line"><span>    int insertBatch(@Param(&quot;list&quot;) List&lt;PromotionShopDO&gt; list);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>优点：直观，效率高。</p><p>缺点：当sql有变化时需要重新编译代码，一般情况不建议使用注解方式。</p><h2 id="_5、项目源码" tabindex="-1"><a class="header-anchor" href="#_5、项目源码"><span>5、项目源码</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>https://github.com/aalansehaiyang/spring-boot-bulking  </span></span>
<span class="line"><span></span></span>
<span class="line"><span>模块：spring-boot-bulking-mybatis</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,40)]))}const c=n(t,[["render",l]]),u=JSON.parse('{"path":"/posts/interview/spring/springboot/Mybatis.html","title":"Spring Boot 集成 Mybatis","lang":"zh-CN","frontmatter":{"title":"Spring Boot 集成 Mybatis","description":"Spring Boot 集成 Mybatis 作者：老马 公众号：老马啸西风 博客：https://houbb.github.io/ 人生理念：知行合一 Spring Boot 作为主流微服务框架，拥有成熟的社区生态。市场应用广泛，为了方便大家，整理了一个基于spring boot的常用中间件快速集成入门系列手册，涉及RPC、缓存、消息队列、分库分表、...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/vpress/posts/interview/spring/springboot/Mybatis.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"Spring Boot 集成 Mybatis"}],["meta",{"property":"og:description","content":"Spring Boot 集成 Mybatis 作者：老马 公众号：老马啸西风 博客：https://houbb.github.io/ 人生理念：知行合一 Spring Boot 作为主流微服务框架，拥有成熟的社区生态。市场应用广泛，为了方便大家，整理了一个基于spring boot的常用中间件快速集成入门系列手册，涉及RPC、缓存、消息队列、分库分表、..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-30T09:38:40.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-30T09:38:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring Boot 集成 Mybatis\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-30T09:38:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743327520000,"updatedTime":1743327520000,"contributors":[{"name":"houbb","username":"houbb","email":"houbinbin.echo@gmail.com","commits":1,"url":"https://github.com/houbb"}]},"readingTime":{"minutes":4.24,"words":1272},"filePathRelative":"posts/interview/spring/springboot/Mybatis.md","localizedDate":"2025年3月30日","excerpt":"\\n<blockquote>\\n<p>作者：老马<br>\\n<br>公众号：老马啸西风<br>\\n<br> 博客：<a href=\\"https://houbb.github.io/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://houbb.github.io/</a><br>\\n<br> 人生理念：知行合一</p>\\n</blockquote>\\n<p><code>Spring Boot 作为主流微服务框架，拥有成熟的社区生态。市场应用广泛，为了方便大家，整理了一个基于spring boot的常用中间件快速集成入门系列手册，涉及RPC、缓存、消息队列、分库分表、注册中心、分布式配置等常用开源组件，大概有几十篇文章，陆续会开放出来，感兴趣同学可以关注&amp;收藏</code></p>","autoDesc":true}');export{c as comp,u as data};
