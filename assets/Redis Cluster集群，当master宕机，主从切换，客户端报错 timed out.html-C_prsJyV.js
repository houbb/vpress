import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as i,o as a}from"./app-NomDibRt.js";const l="/vpress/images/middleware/redis/9-1.jpg",t="/vpress/images/middleware/redis/9-2.jpg",p="/vpress/images/middleware/redis/9-3.jpg",d="/vpress/images/middleware/redis/9-4.jpg",r="/vpress/images/middleware/redis/9-5.jpg",o="/vpress/images/middleware/redis/9-6.jpg",c={};function u(v,s){return a(),e("div",null,s[0]||(s[0]=[i('<h1 id="redis-cluster集群-当master宕机-主从切换-客户端报错-timed-out" tabindex="-1"><a class="header-anchor" href="#redis-cluster集群-当master宕机-主从切换-客户端报错-timed-out"><span>Redis Cluster集群，当master宕机，主从切换，客户端报错 timed out</span></a></h1><blockquote><p>作者：老马<br><br>公众号：老马啸西风<br><br> 博客：<a href="https://houbb.github.io/" target="_blank" rel="noopener noreferrer">https://houbb.github.io/</a><br><br> 人生理念：知行合一</p></blockquote><hr><p>大家好，我是老马</p><p>性能不够，缓存来凑</p><p>一个高并发系统肯定少不了缓存的身影，为了保证缓存服务的高可用，我们通常采用 Redis Cluster 集群模式。</p><div align="left"><img src="'+l+`" width="600px"></div><p><strong>描述：</strong></p><p>集群部署采用了 <code>3主3从</code> 拓扑结构，<code>数据读写</code>访问master节点， slave节点负责备份。</p><p>随便登录一台 redis 节点，都可以看到集群的slot的槽位分步区间，以及对应的主从节点映射关系。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>127.0.0.1:8001&gt; cluster slots</span></span>
<span class="line"><span>1) 1) (integer) 10923</span></span>
<span class="line"><span>   2) (integer) 16383</span></span>
<span class="line"><span>   3) 1) &quot;127.0.0.1&quot;</span></span>
<span class="line"><span>      2) (integer) 8003</span></span>
<span class="line"><span>      3) &quot;6c574c9d1323c69ebc73a5977bcbd3d4c073a4d4&quot;</span></span>
<span class="line"><span>   4) 1) &quot;127.0.0.1&quot;</span></span>
<span class="line"><span>      2) (integer) 8006</span></span>
<span class="line"><span>      3) &quot;123d0b157078925743ac1deb96be8c3395d7d038&quot;</span></span>
<span class="line"><span>2) 1) (integer) 0</span></span>
<span class="line"><span>   2) (integer) 5460</span></span>
<span class="line"><span>   3) 1) &quot;127.0.0.1&quot;</span></span>
<span class="line"><span>      2) (integer) 8001</span></span>
<span class="line"><span>      3) &quot;99bc05e81ef0035a4ab2d13cbae2599425b7ed7d&quot;</span></span>
<span class="line"><span>   4) 1) &quot;127.0.0.1&quot;</span></span>
<span class="line"><span>      2) (integer) 8004</span></span>
<span class="line"><span>      3) &quot;402e900ef364ce9382beddf92747cf28e3ea9c2f&quot;</span></span>
<span class="line"><span>3) 1) (integer) 5461</span></span>
<span class="line"><span>   2) (integer) 10922</span></span>
<span class="line"><span>   3) 1) &quot;127.0.0.1&quot;</span></span>
<span class="line"><span>      2) (integer) 8002</span></span>
<span class="line"><span>      3) &quot;fda6a9e49205a52418c0bca4c66c981066017a3c&quot;</span></span>
<span class="line"><span>   4) 1) &quot;127.0.0.1&quot;</span></span>
<span class="line"><span>      2) (integer) 8005</span></span>
<span class="line"><span>      3) &quot;24a1e23f6cbfb761234970b66043d562e79e3d9c&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>人为模拟，master-1 机器意外宕机</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker stop c1dff012392d</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>此时，Redis Cluster 集群能自动感知，并自动完成主备切换，对应的slave会被选举为新的master节点</p><div align="left"><img src="`+t+'" width="600px"></div><p>看下 redis cluster 集群最新的主从关系</p><div align="left"><img src="'+p+'" width="460px"></div><p>看似也没什么问题，一切正常</p><p>此时 Spring Boot 应用依然在线服务，当我们再尝试操作缓存时，会报错</p><div align="left"><img src="'+d+`" width="600px"></div><p>问题边界还是非常清晰的。</p><p>Redis Cluster 集群已经完成了切换。</p><p>但是 Spring Boot 客户端<code>没有动态感知到</code> Redis Cluster 的最新集群信息</p><p><strong>原因分析：</strong></p><p>SpringBoot 2.X 版本， Redis默认的连接池采用 <code>Lettuce</code></p><p>当Redis 集群节点发生变化后，Letture默认是不会刷新节点拓扑</p><p><strong>解决方案：</strong></p><p>将 <code>Letture</code> 二方包仲裁掉</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span></span>
<span class="line"><span>    &lt;version&gt;2.3.12.RELEASE&lt;/version&gt;</span></span>
<span class="line"><span>    &lt;exclusions&gt;</span></span>
<span class="line"><span>        &lt;exclusion&gt;</span></span>
<span class="line"><span>            &lt;groupId&gt;io.lettuce&lt;/groupId&gt;</span></span>
<span class="line"><span>            &lt;artifactId&gt;lettuce-core&lt;/artifactId&gt;</span></span>
<span class="line"><span>        &lt;/exclusion&gt;</span></span>
<span class="line"><span>    &lt;/exclusions&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，引入 <code>Jedis</code> 相关二方包</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span></span>
<span class="line"><span>    &lt;version&gt;3.7.0&lt;/version&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译代码，并重新启动 SpringBoot 微服务，万事俱备，只欠再次验证</p><div align="left"><img src="`+r+`" width="240px"></div><p>重新模拟将 <code>127.0.0.1：8001</code> master 节点宕机，看看系统的日志</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[2022-03-17 18:03:34:595] [redisson-netty-2-4] [INFO]  - master /127.0.0.1:8001 used as slave</span></span>
<span class="line"><span>[2022-03-17 18:03:34:596] [redisson-netty-2-4] [INFO]  - slave redis://127.0.0.1:8004 removed for slot ranges: [[0-5460]]</span></span>
<span class="line"><span>[2022-03-17 18:03:34:611] [redisson-netty-2-12] [INFO]  - 1 connections initialized for /127.0.0.1:8004</span></span>
<span class="line"><span>[2022-03-17 18:03:34:639] [redisson-netty-2-8] [INFO]  - /127.0.0.1:8001 master and related slaves: [addr=redis://127.0.0.1:8004] removed</span></span>
<span class="line"><span>[2022-03-17 18:03:34:641] [redisson-netty-2-8] [INFO]  - 24 connections initialized for /127.0.0.1:8004</span></span>
<span class="line"><span>[2022-03-17 18:03:34:655] [redisson-netty-2-9] [INFO]  - 1 connections initialized for /127.0.0.1:8004</span></span>
<span class="line"><span>[2022-03-17 18:03:34:678] [redisson-netty-2-27] [INFO]  - master: redis://127.0.0.1:8004 added for slot ranges: [[0-5460]]</span></span>
<span class="line"><span>[2022-03-17 18:03:34:678] [redisson-netty-2-27] [INFO]  - 24 connections initialized for /127.0.0.1:8004</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从打印的日志来看，客户端已经感知到了<code>主备切换</code>，并与最新的主节点 <code>127.0.0.1:8004</code> 初始化了 24 个连接。</p><p>然后，回归业务功能，<code>读写缓存</code> 数据也都是操作最新的主节点。</p><div align="left"><img src="`+o+`" width="240px"></div><p>还有一种方案：<strong>刷新节点拓扑视图</strong></p><p>Lettuce 官方描述：</p><blockquote><p><a href="https://github.com/lettuce-io/lettuce-core/wiki/Redis-Cluster#user-content-refreshing-the-cluster-topology-view" target="_blank" rel="noopener noreferrer">https://github.com/lettuce-io/lettuce-core/wiki/Redis-Cluster#user-content-refreshing-the-cluster-topology-view</a></p></blockquote><blockquote><p>Lettuce 处理 Moved 和 Ask 永久重定向，由于命令重定向，必须刷新节点拓扑视图。而自适应拓扑刷新（Adaptive updates）与定时拓扑刷新（Periodic updates）默认关闭</p></blockquote><p>解决方案：</p><ul><li>调用 RedisClusterClient.reloadPartitions</li><li>后台基于时间间隔的周期刷新</li><li>后台基于持续的<code>断开</code> 和 <code>移动、重定向</code> 的自适应更新</li></ul><p>编写代码</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@Bean(destroyMethod = &quot;destroy&quot;)</span></span>
<span class="line"><span>public LettuceConnectionFactory lettuceConnectionFactory() {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    //开启 自适应集群拓扑刷新和周期拓扑刷新</span></span>
<span class="line"><span>    ClusterTopologyRefreshOptions clusterTopologyRefreshOptions =  ClusterTopologyRefreshOptions.builder()</span></span>
<span class="line"><span>            // 开启自适应刷新。否则，Redis集群变更后将会导致连接异常</span></span>
<span class="line"><span>            .enableAllAdaptiveRefreshTriggers() </span></span>
<span class="line"><span>            // 自适应刷新超时时间(默认30秒)</span></span>
<span class="line"><span>            .adaptiveRefreshTriggersTimeout(Duration.ofSeconds(30)) </span></span>
<span class="line"><span>            // 开周期刷新</span></span>
<span class="line"><span>            .enablePeriodicRefresh(Duration.ofSeconds(20))  </span></span>
<span class="line"><span>            .build();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    ClientOptions clientOptions = ClusterClientOptions.builder()</span></span>
<span class="line"><span>            .topologyRefreshOptions(clusterTopologyRefreshOptions)</span></span>
<span class="line"><span>            .build();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    LettuceClientConfiguration clientConfig = LettucePoolingClientConfiguration.builder()</span></span>
<span class="line"><span>            .poolConfig(genericObjectPoolConfig(redisProperties.getJedis().getPool()))</span></span>
<span class="line"><span>            .clientOptions(clientOptions)</span></span>
<span class="line"><span>            .commandTimeout(redisProperties.getTimeout()) //默认RedisURI.DEFAULT_TIMEOUT 60</span></span>
<span class="line"><span>            .build();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    List&lt;String&gt; clusterNodes = redisProperties.getCluster().getNodes();</span></span>
<span class="line"><span>    Set&lt;RedisNode&gt; nodes = new HashSet&lt;RedisNode&gt;();</span></span>
<span class="line"><span>    clusterNodes.forEach(address -&gt; nodes.add(new RedisNode(address.split(&quot;:&quot;)[0].trim(), Integer.valueOf(address.split(&quot;:&quot;)[1]))));</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    RedisClusterConfiguration clusterConfiguration = new RedisClusterConfiguration();</span></span>
<span class="line"><span>    clusterConfiguration.setClusterNodes(nodes);</span></span>
<span class="line"><span>    clusterConfiguration.setPassword(RedisPassword.of(redisProperties.getPassword()));</span></span>
<span class="line"><span>    clusterConfiguration.setMaxRedirects(redisProperties.getCluster().getMaxRedirects());</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    LettuceConnectionFactory lettuceConnectionFactory = new LettuceConnectionFactory(clusterConfiguration, clientConfig);</span></span>
<span class="line"><span>    // 是否允许多个线程操作同一个缓存连接，默认true，false 每个操作都将创建新的连接</span></span>
<span class="line"><span>    // lettuceConnectionFactory.setShareNativeConnection(false); </span></span>
<span class="line"><span>    // 重置底层共享连接, 在接下来的访问时初始化</span></span>
<span class="line"><span>    // lettuceConnectionFactory.resetConnection(); </span></span>
<span class="line"><span>    return lettuceConnectionFactory;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,46)]))}const g=n(c,[["render",u]]),h=JSON.parse('{"path":"/posts/interview/middleware/redis/Redis%20Cluster%E9%9B%86%E7%BE%A4%EF%BC%8C%E5%BD%93master%E5%AE%95%E6%9C%BA%EF%BC%8C%E4%B8%BB%E4%BB%8E%E5%88%87%E6%8D%A2%EF%BC%8C%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8A%A5%E9%94%99%20timed%20out.html","title":"Redis Cluster集群，当master宕机，主从切换，客户端报错 timed out","lang":"zh-CN","frontmatter":{"title":"Redis Cluster集群，当master宕机，主从切换，客户端报错 timed out","description":"Redis Cluster集群，当master宕机，主从切换，客户端报错 timed out 作者：老马 公众号：老马啸西风 博客：https://houbb.github.io/ 人生理念：知行合一 大家好，我是老马 性能不够，缓存来凑 一个高并发系统肯定少不了缓存的身影，为了保证缓存服务的高可用，我们通常采用 Redis Cluster 集群模式。...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/vpress/posts/interview/middleware/redis/Redis%20Cluster%E9%9B%86%E7%BE%A4%EF%BC%8C%E5%BD%93master%E5%AE%95%E6%9C%BA%EF%BC%8C%E4%B8%BB%E4%BB%8E%E5%88%87%E6%8D%A2%EF%BC%8C%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8A%A5%E9%94%99%20timed%20out.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"Redis Cluster集群，当master宕机，主从切换，客户端报错 timed out"}],["meta",{"property":"og:description","content":"Redis Cluster集群，当master宕机，主从切换，客户端报错 timed out 作者：老马 公众号：老马啸西风 博客：https://houbb.github.io/ 人生理念：知行合一 大家好，我是老马 性能不够，缓存来凑 一个高并发系统肯定少不了缓存的身影，为了保证缓存服务的高可用，我们通常采用 Redis Cluster 集群模式。..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-30T09:38:40.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-30T09:38:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis Cluster集群，当master宕机，主从切换，客户端报错 timed out\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-30T09:38:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743327520000,"updatedTime":1743327520000,"contributors":[{"name":"houbb","username":"houbb","email":"houbinbin.echo@gmail.com","commits":1,"url":"https://github.com/houbb"}]},"readingTime":{"minutes":3.89,"words":1167},"filePathRelative":"posts/interview/middleware/redis/Redis Cluster集群，当master宕机，主从切换，客户端报错 timed out.md","localizedDate":"2025年3月30日","excerpt":"\\n<blockquote>\\n<p>作者：老马<br>\\n<br>公众号：老马啸西风<br>\\n<br> 博客：<a href=\\"https://houbb.github.io/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://houbb.github.io/</a><br>\\n<br> 人生理念：知行合一</p>\\n</blockquote>\\n<hr>\\n<p>大家好，我是老马</p>\\n<p>性能不够，缓存来凑</p>\\n<p>一个高并发系统肯定少不了缓存的身影，为了保证缓存服务的高可用，我们通常采用 Redis Cluster 集群模式。</p>\\n<div align=\\"left\\">\\n    <img src=\\"/images/middleware/redis/9-1.jpg\\" width=\\"600px\\">\\n</div>","autoDesc":true}');export{g as comp,h as data};
