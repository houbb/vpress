import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as i,o as n}from"./app-NomDibRt.js";const l="/vpress/images/spring/springboot/8-5.jpg",r="/vpress/images/spring/springboot/8-1.jpg",t="/vpress/images/spring/springboot/8-2.jpg",p="/vpress/images/spring/springboot/8-3.jpg",c={};function d(o,s){return n(),a("div",null,s[0]||(s[0]=[i('<h1 id="spring-boot-集成-elasticsearch" tabindex="-1"><a class="header-anchor" href="#spring-boot-集成-elasticsearch"><span>Spring Boot 集成 ElasticSearch</span></a></h1><blockquote><p>作者：老马<br><br>公众号：老马啸西风<br><br> 博客：<a href="https://houbb.github.io/" target="_blank" rel="noopener noreferrer">https://houbb.github.io/</a><br><br> 人生理念：知行合一</p></blockquote><p><code>Spring Boot 作为主流微服务框架，拥有成熟的社区生态。市场应用广泛，为了方便大家，整理了一个基于spring boot的常用中间件快速集成入门系列手册，涉及RPC、缓存、消息队列、分库分表、注册中心、分布式配置等常用开源组件，大概有几十篇文章，陆续会开放出来，感兴趣同学可以关注&amp;收藏</code></p><div align="left"><img src="'+l+`" width="600px"></div><h2 id="_1、elasticsearch-简介" tabindex="-1"><a class="header-anchor" href="#_1、elasticsearch-简介"><span>1、ElasticSearch 简介</span></a></h2><p>Elasticsearch 是 Java 开发的，基于 Lucene 的搜索引擎。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful Web接口。Elasticsearch 可以快速有效地存储，搜索和分析大量数据，而且在处理半结构化数据（即自然语言）时特别有用。</p><p><strong>应用集成Elasticsearch有4种方式：</strong></p><ul><li>REST Client</li><li>Jest</li><li>Spring Data</li><li>Spring Data Elasticsearch Repositories</li></ul><blockquote><p>本文主要介绍一下用Spring Data Elasticsearch Repositories 是如何使用的。<br><br> 该方式与spring boot高度集成，日常开发时较方便，只需要简单的配置即可开箱使用。</p></blockquote><h2 id="_2、启动-elasticsearch" tabindex="-1"><a class="header-anchor" href="#_2、启动-elasticsearch"><span>2、启动 Elasticsearch</span></a></h2><p>为了便于测试，我们使用 Docker 镜像方式快速部署一个单节点的 <code>Elasticsearch</code>实例，容器启动时并绑定宿主机的<code>9200和9300</code>端口</p><h3 id="拉取镜像" tabindex="-1"><a class="header-anchor" href="#拉取镜像"><span>拉取镜像</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker pull elasticsearch:7.4.2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="查看镜像" tabindex="-1"><a class="header-anchor" href="#查看镜像"><span>查看镜像</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker images</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="创建宿主机挂载目录" tabindex="-1"><a class="header-anchor" href="#创建宿主机挂载目录"><span>创建宿主机挂载目录</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>mkdir -p /mydata/elasticsearch/config/</span></span>
<span class="line"><span>mkdir -p /mydata/elasticsearch/data/</span></span>
<span class="line"><span>echo &quot;http.host: 0.0.0.0&quot;&gt;&gt;/mydata/elasticsearch/config/elasticsearch.yml</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="运行容器" tabindex="-1"><a class="header-anchor" href="#运行容器"><span>运行容器</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker run --name elasticsearch -p 9200:9200 -p 9300:9300 \\</span></span>
<span class="line"><span>-e ES_JAVA_OPS=&quot;-Xms256m -Xmx256m&quot; \\</span></span>
<span class="line"><span>-v /mydata/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \\</span></span>
<span class="line"><span>-v /mydata/elasticsearch/data:/usr/share/elasticsearch/data \\</span></span>
<span class="line"><span>-v /mydata/elasticsearch/plugins:/usr/share/elasticsearch/plugins \\</span></span>
<span class="line"><span>-d elasticsearch:7.4.2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数说明：</p><blockquote><p>-p 9200:9200 将容器的9200端口映射到主机的9200端口;<br><br> --name elasticsearch 给当前启动的容器取名叫 elasticsearch<br><br> -v /mydata/elasticsearch/data:/usr/share/elasticsearch/data 将数据文件夹挂载到主机;<br><br> -v /mydata/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml 将配置文件挂载到主机;<br><br> -d 以后台方式运行(daemon)<br><br> -e ES_JAVA_OPS=&quot;-Xms256m -Xmx256m&quot; 测试时限定内存小一点</p></blockquote><h3 id="查看容器进程" tabindex="-1"><a class="header-anchor" href="#查看容器进程"><span>查看容器进程</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker ps -a</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_3、项目集成" tabindex="-1"><a class="header-anchor" href="#_3、项目集成"><span>3、项目集成</span></a></h2><p>按照Spring Boot的惯例，我们不必在上下文中提供任何bean来启用对<code>Elasticsearch</code>的支持。我们只需要在pom.xml中添加以下依赖项：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;spring-boot-starter-data-elasticsearch&lt;/artifactId&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>由于spring-boot-starter-parent指定的版本号是 2.2.1.RELEASE，所以上面引入的两个 starter 组件会被强制一样的版本号，便于统一化管理。而底层引入的 spring-data-elasticsearch 是3.2.1.RELEASE</p></blockquote><p>在配置文件 <code>application.yml</code> 中配置 ES 的相关参数，应用程序尝试在 <code>localhost</code> 上与 <code>Elasticsearch </code>连接，具体内容如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>spring:</span></span>
<span class="line"><span>  application:</span></span>
<span class="line"><span>    name: spring-boot-bulking-elasticsearch</span></span>
<span class="line"><span>  elasticsearch:</span></span>
<span class="line"><span>    rest:</span></span>
<span class="line"><span>      uris: 127.0.0.1:9200</span></span>
<span class="line"><span>      read-timeout: 5s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Spring Boot 操作 ES 数据有三种方式：</strong></p><ul><li>实现 ElasticsearchRepository 接口</li><li>引入 ElasticsearchRestTemplate</li><li>引入 ElasticsearchOperations</li></ul><p>使用Spring Data Elasticsearch Repositories操作 <code>Elasticsearch</code>，定义实体类，并设置对应的索引名</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@Document(indexName = &quot;order&quot;, type = &quot;biz1&quot;, shards = 2)</span></span>
<span class="line"><span>public class OrderModel {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Id</span></span>
<span class="line"><span>    private Long orderId;</span></span>
<span class="line"><span>    private Double amount;</span></span>
<span class="line"><span>    private Long buyerUid;</span></span>
<span class="line"><span>    private String shippingAddress;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>常用注解说明：</p><blockquote><p>@Document：表示映射到Elasticsearch文档上的领域对象<br><br> @Id：表示是文档的id，文档可以认为是mysql中表行的概念<br><br> @Filed：文档中字段的类型、是否建立倒排索引、是否进行存储</p></blockquote><p>OrderModel表示订单的索引模型，一个OrderModel对象表示一条ES索引记录。如果用关系数据库做参照，<code>Index</code>相当于表，<code>Document</code>相当于记录</p><p>然后，需要自己定义一个业务接口 <code>OrderRepository</code>，并继承扩展接口 <code>ElasticsearchRepository</code></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>public interface OrderRepository extends ElasticsearchRepository&lt;OrderModel, Long&gt; {</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ElasticsearchRepository</code> 是 <code>Spring boot Elasticsearch</code> 框架预留的扩展接口，内部的类依赖关系如下图所示：</p><div align="left"><img src="`+r+'" width="700px"></div><p><code>ElasticsearchRepository</code> 接口内提供常用的操作ES的方法，如：新增、修改、删除、各种维度条件查询及分页等，详细方法内容如下：</p><div align="left"><img src="'+t+`" width="800px"></div><blockquote><p>save() 方法是创建索引，如果索引document已经存在，后面的 <code>save</code> 方法则是对之前的数据覆盖。也就是说新增和修改都可以通过 <code>save</code> 方法 实现。</p></blockquote><p><strong>最后，通过编写单元测试类来验证方法功能</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@Test</span></span>
<span class="line"><span>public void test1() {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    OrderModel orderModel = OrderModel.builder()</span></span>
<span class="line"><span>            .orderId(1L)</span></span>
<span class="line"><span>            .amount(25.5)</span></span>
<span class="line"><span>            .buyerUid(13201L)</span></span>
<span class="line"><span>            .shippingAddress(&quot;上海&quot;)</span></span>
<span class="line"><span>            .build();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    orderModel = orderRepository.save(orderModel);</span></span>
<span class="line"><span>    System.out.println(orderModel);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@Test</span></span>
<span class="line"><span>public void test2() {</span></span>
<span class="line"><span>    BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();</span></span>
<span class="line"><span>    NativeSearchQueryBuilder searchQueryBuilder = new NativeSearchQueryBuilder()</span></span>
<span class="line"><span>            .withQuery(boolQueryBuilder);</span></span>
<span class="line"><span>    List&lt;OrderModel&gt; orderDocumentList = orderRepository.search(searchQueryBuilder.build()).getContent();</span></span>
<span class="line"><span>    System.out.println(JSON.toJSONString(orderDocumentList));</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>使用这个OrderRepository 来操作 ES 中的 OrderModel 数据。我们这里并没有手动创建OrderModel 对应的索引，由 elasticsearch 默认生成。</p></blockquote><h2 id="_4、kibana-可视化控制台" tabindex="-1"><a class="header-anchor" href="#_4、kibana-可视化控制台"><span>4、kibana 可视化控制台</span></a></h2><p>安装 kibana，比较简单，这里就不在累述了。先下载kibana安装包，再解压</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># bin目录下，执行启动脚本</span></span>
<span class="line"><span></span></span>
<span class="line"><span>./kibana</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>浏览器访问：<a href="https://localhost:5601/app/kibana#/dev_tools/console?_g=()" target="_blank" rel="noopener noreferrer">https://localhost:5601/app/kibana#/dev_tools/console?_g=()</a></p><p>可以看到刚才执行单元测试，创建的索引记录。</p><div align="left"><img src="`+p+`" width="800px"></div><h2 id="_5、项目源码" tabindex="-1"><a class="header-anchor" href="#_5、项目源码"><span>5、项目源码</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>https://github.com/aalansehaiyang/spring-boot-bulking  </span></span>
<span class="line"><span></span></span>
<span class="line"><span>模块：spring-boot-bulking-elasticsearch</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,54)]))}const u=e(c,[["render",d]]),g=JSON.parse('{"path":"/posts/interview/spring/springboot/ElasticSearch.html","title":"Spring Boot 集成 ElasticSearch","lang":"zh-CN","frontmatter":{"title":"Spring Boot 集成 ElasticSearch","description":"Spring Boot 集成 ElasticSearch 作者：老马 公众号：老马啸西风 博客：https://houbb.github.io/ 人生理念：知行合一 Spring Boot 作为主流微服务框架，拥有成熟的社区生态。市场应用广泛，为了方便大家，整理了一个基于spring boot的常用中间件快速集成入门系列手册，涉及RPC、缓存、消息队列...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/vpress/posts/interview/spring/springboot/ElasticSearch.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"Spring Boot 集成 ElasticSearch"}],["meta",{"property":"og:description","content":"Spring Boot 集成 ElasticSearch 作者：老马 公众号：老马啸西风 博客：https://houbb.github.io/ 人生理念：知行合一 Spring Boot 作为主流微服务框架，拥有成熟的社区生态。市场应用广泛，为了方便大家，整理了一个基于spring boot的常用中间件快速集成入门系列手册，涉及RPC、缓存、消息队列..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-30T09:38:40.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-30T09:38:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring Boot 集成 ElasticSearch\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-30T09:38:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743327520000,"updatedTime":1743327520000,"contributors":[{"name":"houbb","username":"houbb","email":"houbinbin.echo@gmail.com","commits":1,"url":"https://github.com/houbb"}]},"readingTime":{"minutes":4.19,"words":1258},"filePathRelative":"posts/interview/spring/springboot/ElasticSearch.md","localizedDate":"2025年3月30日","excerpt":"\\n<blockquote>\\n<p>作者：老马<br>\\n<br>公众号：老马啸西风<br>\\n<br> 博客：<a href=\\"https://houbb.github.io/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://houbb.github.io/</a><br>\\n<br> 人生理念：知行合一</p>\\n</blockquote>\\n<p><code>Spring Boot 作为主流微服务框架，拥有成熟的社区生态。市场应用广泛，为了方便大家，整理了一个基于spring boot的常用中间件快速集成入门系列手册，涉及RPC、缓存、消息队列、分库分表、注册中心、分布式配置等常用开源组件，大概有几十篇文章，陆续会开放出来，感兴趣同学可以关注&amp;收藏</code></p>","autoDesc":true}');export{u as comp,g as data};
