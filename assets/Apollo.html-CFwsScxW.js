import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as e,o as a}from"./app-NomDibRt.js";const i="/vpress/images/spring/springboot/11-2.jpg",d="/vpress/images/spring/springboot/11-4.jpg",p="/vpress/images/spring/springboot/11-5.jpg",l="/vpress/images/spring/springboot/11-1.jpg",o={};function r(c,t){return a(),s("div",null,t[0]||(t[0]=[e('<h1 id="分布式配置中心选型-为什么选择-apollo" tabindex="-1"><a class="header-anchor" href="#分布式配置中心选型-为什么选择-apollo"><span>分布式配置中心选型，为什么选择 Apollo？</span></a></h1><blockquote><p>作者：老马<br><br>公众号：老马啸西风<br><br> 博客：<a href="https://houbb.github.io/" target="_blank" rel="noopener noreferrer">https://houbb.github.io/</a><br><br> 人生理念：知行合一</p></blockquote><p><code>Spring Boot 作为主流微服务框架，拥有成熟的社区生态。市场应用广泛，为了方便大家，整理了一个基于spring boot的常用中间件快速集成入门系列手册，涉及RPC、缓存、消息队列、分库分表、注册中心、分布式配置等常用开源组件，大概有几十篇文章，陆续会开放出来，感兴趣同学可以关注&amp;收藏</code></p><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>关于配置的常规方案是将配置信息抽离写入 <code>xml</code>、<code>properties</code>文件中，然后随着应用一块打包发布。如果有开发、测试、预发、生产等多套环境，则通过配置各自独立的文件以区分不同的环境。<strong>具备一定的扩展性，但每次配置参数变更都要重新发布应用，灵活性较差。</strong></p><p>例如：淘宝每年都要举办双十一活动，带来上千亿的GMV，流量非常大。为了系统的稳定性，通常会做各种演练演习、压测，制定上千个降级预案。如果遇到突发情况，要打开哪个开关，启动对应的紧急处理措施。如果按上面的玩法，每次都要走一次发布流程，一个集群上千台服务器，发布完了，半个小时也没了，这的损失多少钱。</p><div align="left"><img src="'+i+'" width="500px"></div><p><strong>资损先不算了，但是你的年度考核 3.25 肯定是没得跑了，年终奖泡汤，赢取白富美，走上人生巅峰。。。。兄弟醒醒。。。</strong></p><div align="left"><img src="'+d+'" width="600px"></div><p>学学人家德芙，能不能搞个丝滑般的 <code>Features</code> ，不用走发布流程，也能动态感知配置变更</p><p><strong>此时我们需要一个中间件框架，分布式配置中心。</strong></p><h3 id="框架选型" tabindex="-1"><a class="header-anchor" href="#框架选型"><span>框架选型</span></a></h3><p>工作这么多年，大大小小，各种开源的分布式配置框架有下面几个：</p><p>1、Apollo</p><blockquote><p>2016年5月，携程开源的配置管理中心，具备规范的权限、流程治理等特性。</p></blockquote><p>2、Spring cloud config</p><blockquote><p>2014年9月开源，Spring Cloud 生态组件，可以和Spring Cloud体系无缝整合。</p></blockquote><p>3、disconf</p><blockquote><p>2014年7月百度开源的配置管理中心，同样具备配置的管理能力，不过目前已经不维护了，最近的一次提交是两年前了。</p></blockquote><p>4、Nacos</p><blockquote><p>2018年6月，阿里开源的配置中心，也可以做DNS和RPC的服务发现。</p></blockquote><p>5、Diamond</p><blockquote><p>Diamond 出自淘宝，开源地址 【<a href="https://github.com/takeseem/diamond%E3%80%91" target="_blank" rel="noopener noreferrer">https://github.com/takeseem/diamond】</a> 目前已经维护了，这里就不展开了。其他几个框架的功能特性做下比较：</p></blockquote><table><thead><tr><th>功能特性</th><th>重要性</th><th>spring-cloud-config</th><th>Apollo</th><th>disconf</th><th>Nacos</th></tr></thead><tbody><tr><td>静态配置管理</td><td>高</td><td>基于file</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>动态配置管理</td><td>高</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>统一管理</td><td>高</td><td>无，需要github</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>多环境</td><td>中</td><td>无，需要github</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>本地配置缓存</td><td>高</td><td>无</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>配置锁</td><td>中</td><td>支持</td><td>不支持</td><td>不支持</td><td>不支持</td></tr><tr><td>配置校验</td><td>中</td><td>无</td><td>无</td><td>无</td><td>无</td></tr><tr><td>配置生效时间</td><td>高</td><td>重启生效，或手动refresh生效</td><td>实时</td><td>实时</td><td>实时</td></tr><tr><td>配置更新推送</td><td>高</td><td>需要手工触发</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>配置定时拉取</td><td>高</td><td>无</td><td>支持</td><td>配置更新目前依赖事件驱动， client重启或者server端推送操</td><td>支持</td></tr><tr><td>用户权限管理</td><td>中</td><td>无，需要github</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>授权、审核、审计</td><td>中</td><td>无，需要github</td><td>支持</td><td>无</td><td>支持</td></tr><tr><td>配置版本管理</td><td>高</td><td>Git做版本管理</td><td>界面上直接提供发布历史和回滚按钮</td><td>操作记录有落数据库，但无查询接口</td><td>界面操作，支持回滚</td></tr><tr><td>配置合规检测</td><td>高</td><td>不支持</td><td>支持（但还需完善）</td><td></td><td>支持</td></tr><tr><td>实例配置监控</td><td>高</td><td>需要结合spring admin</td><td>支持</td><td>支持，可以查看每个配置在哪些机器上加载</td><td>支持</td></tr><tr><td>灰度发布</td><td>中</td><td>不支持</td><td>支持</td><td>不支持部分更新</td><td>支持</td></tr><tr><td>告警通知</td><td>中</td><td>不支持</td><td>支持，邮件方式告警</td><td>支持，邮件方式告警</td><td>支持</td></tr></tbody></table><p>Nacos配置文件支持比较多的格式，支持yaml、text、json、xml、html、Properties，apollo只支持xml、text、Properties的格式，没有兼容spring boot中比较通用的yaml配置。虽然 Nacos支持多格式的配置文件，但是解析上没有Apollo做的好，Apollo虽然支持的配置格式较少，不过会进行解析，使每个配置看起来比较直观，修改的时候比较直观，可以对单个进行修改。</p><p>Apollo用户管理以及权限管理做的比较好和全面，适合做部门或者公司级的配置中心。Nacos比较简洁，权限这块偏弱。Apollo 的社区生态活跃，github最近一次提交是在2021年4月11日，另外使用的公司特别多，常见的坑基本都被踩完了。</p><div align="left"><img src="'+p+`" width="700px"></div><p>当然Nacos作为后起之秀，又有阿里做背书，目前市场活跃度也非常高，大家可以结合自家情况选择，如果稳妥可以选择Apollo</p><h2 id="apollo-介绍" tabindex="-1"><a class="header-anchor" href="#apollo-介绍"><span>Apollo 介绍</span></a></h2><p>Apollo（阿波罗）是携程框架部门研发的分布式配置中心，能够集中化管理应用不同环境、不同集群的配置，配置修改后能够实时推送到应用端，并且具备规范的权限、流程治理等特性，适用于微服务配置管理场景。</p><p>Apollo包括服务端和客户端两部分：</p><p>服务端基于<code>Spring Boot</code>和<code>Spring Cloud</code>开发，打包后可以直接运行，不需要额外安装<code>Tomcat</code>等应用容器。</p><p>Java客户端不依赖任何框架，能够运行于所有Java运行时环境，同时对<code>Spring</code>、<code>Spring Boot</code>环境也有较好的支持。</p><blockquote><p>开源地址： <a href="https://github.com/ctripcorp/apollo" target="_blank" rel="noopener noreferrer">https://github.com/ctripcorp/apollo</a></p></blockquote><h2 id="特性" tabindex="-1"><a class="header-anchor" href="#特性"><span>特性</span></a></h2><p>基于配置的特殊性，Apollo在设计之初就立志于成为一个有治理能力的配置发布平台，目前提供了以下的特性：</p><ul><li>统一管理不同环境、不同集群的配置</li><li>配置修改实时生效（热发布）</li><li>版本发布管理</li><li>灰度发布</li><li>权限管理、发布审核、操作审计</li><li>客户端配置信息监控</li><li>提供Java和.Net原生客户端</li><li>提供开放平台API</li><li>部署简单</li></ul><h2 id="代码演示" tabindex="-1"><a class="header-anchor" href="#代码演示"><span>代码演示</span></a></h2><h3 id="外部依赖" tabindex="-1"><a class="header-anchor" href="#外部依赖"><span>外部依赖</span></a></h3><p>在 pom.xml 文件中添加 Apollo 依赖：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;com.ctrip.framework.apollo&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;apollo-client&lt;/artifactId&gt;</span></span>
<span class="line"><span>    &lt;version&gt;1.4.0&lt;/version&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件"><span>配置文件</span></a></h3><p>在配置文件 application.yaml 中配置 Pulsar 的相关参数，具体内容如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>apollo:</span></span>
<span class="line"><span>  meta: http://127.0.0.1:8080</span></span>
<span class="line"><span>  bootstrap:</span></span>
<span class="line"><span>    enabled: true</span></span>
<span class="line"><span>app:</span></span>
<span class="line"><span>  id: spring-boot-bulking-apollo</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实时动态感知配置变更" tabindex="-1"><a class="header-anchor" href="#实时动态感知配置变更"><span>实时动态感知配置变更</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@Component</span></span>
<span class="line"><span>public class ApolloConfig {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    private static final String USER_TIMEOUT = &quot;user.timeout&quot;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @PostConstruct</span></span>
<span class="line"><span>    public void init() {</span></span>
<span class="line"><span>        Config config = ConfigService.getAppConfig();</span></span>
<span class="line"><span>        config.addChangeListener(changeEvent -&gt; {</span></span>
<span class="line"><span>            ConfigChange configChange = changeEvent.getChange(USER_TIMEOUT);</span></span>
<span class="line"><span>            PropertyChangeType changeType = configChange.getChangeType();</span></span>
<span class="line"><span>            if (PropertyChangeType.ADDED.equals(changeType) || PropertyChangeType.MODIFIED</span></span>
<span class="line"><span>                    .equals(changeType)) {</span></span>
<span class="line"><span>                System.out.println(String.format(&quot;动态刷新的新值。key:%s  ， 值：%s&quot;, USER_TIMEOUT, configChange.getNewValue()));</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        }, Sets.newHashSet(USER_TIMEOUT));</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        String userTimeoutValue = config.getProperty(USER_TIMEOUT, null);</span></span>
<span class="line"><span>        System.out.println(String.format(&quot;首次拉取。key:%s  ， 值：%s&quot;, USER_TIMEOUT, userTimeoutValue));</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="管理后台" tabindex="-1"><a class="header-anchor" href="#管理后台"><span>管理后台</span></a></h2><h3 id="控制台地址" tabindex="-1"><a class="header-anchor" href="#控制台地址"><span>控制台地址</span></a></h3><p><a href="http://localhost:8070/config.html?#/appid=spring-boot-bulking-apollo" target="_blank" rel="noopener noreferrer">http://localhost:8070/config.html?#/appid=spring-boot-bulking-apollo</a></p><div align="left"><img src="`+l+`" width="700px"></div><p>控制台多次修改<code>user.timeout</code>的值，客户端系统能实时接收到配置变更。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>首次拉取。key:user.timeout  ， 值：1000</span></span>
<span class="line"><span>动态刷新的新值。key:user.timeout  ， 值：500</span></span>
<span class="line"><span>动态刷新的新值。key:user.timeout  ， 值：1000</span></span>
<span class="line"><span>动态刷新的新值。key:user.timeout  ， 值：500</span></span>
<span class="line"><span>动态刷新的新值。key:user.timeout  ， 值：1000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="项目源码" tabindex="-1"><a class="header-anchor" href="#项目源码"><span>项目源码</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>https://github.com/aalansehaiyang/spring-boot-bulking  </span></span>
<span class="line"><span></span></span>
<span class="line"><span>模块：spring-boot-bulking-apollo</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,54)]))}const g=n(o,[["render",r]]),u=JSON.parse('{"path":"/posts/interview/spring/springboot/Apollo.html","title":"分布式配置中心选型，为什么选择 Apollo？","lang":"zh-CN","frontmatter":{"title":"分布式配置中心选型，为什么选择 Apollo？","description":"分布式配置中心选型，为什么选择 Apollo？ 作者：老马 公众号：老马啸西风 博客：https://houbb.github.io/ 人生理念：知行合一 Spring Boot 作为主流微服务框架，拥有成熟的社区生态。市场应用广泛，为了方便大家，整理了一个基于spring boot的常用中间件快速集成入门系列手册，涉及RPC、缓存、消息队列、分库分表...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/vpress/posts/interview/spring/springboot/Apollo.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"分布式配置中心选型，为什么选择 Apollo？"}],["meta",{"property":"og:description","content":"分布式配置中心选型，为什么选择 Apollo？ 作者：老马 公众号：老马啸西风 博客：https://houbb.github.io/ 人生理念：知行合一 Spring Boot 作为主流微服务框架，拥有成熟的社区生态。市场应用广泛，为了方便大家，整理了一个基于spring boot的常用中间件快速集成入门系列手册，涉及RPC、缓存、消息队列、分库分表..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-30T09:38:40.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-30T09:38:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"分布式配置中心选型，为什么选择 Apollo？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-30T09:38:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743327520000,"updatedTime":1743327520000,"contributors":[{"name":"houbb","username":"houbb","email":"houbinbin.echo@gmail.com","commits":1,"url":"https://github.com/houbb"}]},"readingTime":{"minutes":6.44,"words":1931},"filePathRelative":"posts/interview/spring/springboot/Apollo.md","localizedDate":"2025年3月30日","excerpt":"\\n<blockquote>\\n<p>作者：老马<br>\\n<br>公众号：老马啸西风<br>\\n<br> 博客：<a href=\\"https://houbb.github.io/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://houbb.github.io/</a><br>\\n<br> 人生理念：知行合一</p>\\n</blockquote>\\n<p><code>Spring Boot 作为主流微服务框架，拥有成熟的社区生态。市场应用广泛，为了方便大家，整理了一个基于spring boot的常用中间件快速集成入门系列手册，涉及RPC、缓存、消息队列、分库分表、注册中心、分布式配置等常用开源组件，大概有几十篇文章，陆续会开放出来，感兴趣同学可以关注&amp;收藏</code></p>","autoDesc":true}');export{g as comp,u as data};
