import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,a,o as p}from"./app-NomDibRt.js";const r={};function c(n,e){return p(),o("div",null,e[0]||(e[0]=[a('<h1 id="中间件-缓存是性能优化的首选利器" tabindex="-1"><a class="header-anchor" href="#中间件-缓存是性能优化的首选利器"><span>中间件：缓存是性能优化的首选利器</span></a></h1><p>现在短视频非常火，简单的一个手指上翻滑动，就切到下一个视频。虽然现在已经5G时代，但我们知道下载一个视频，尤其是分辨率很高的视频要花不少时间。那么短视频是如何做到实时响应的呢？</p><p>其实，我们在打开视频软件时，后台已经悄悄帮我们提前下载了几个短视频，每次当我们每次翻页时，都是用的本地数据，所以感觉像是秒开一样，这种行为我们称之为缓存。</p><h2 id="什么是缓存" tabindex="-1"><a class="header-anchor" href="#什么是缓存"><span>什么是缓存</span></a></h2><p>缓存是数据交换的缓冲区，采用<code>空间换时间</code>的策略，将<code>原始数据的副本</code>或<code>提前计算好的数据</code>临时存储到一些更快的设备中。弥补CPU的高算力和IO的慢读写之间巨大的鸿沟，减少 CPU的浪费等待时间。</p><p>评估缓存有个很重要的指标，缓存命中率，命中率越高，说明缓存发挥的价值越大。</p><blockquote><p>缓存命中率 = 从缓存中读取次数 / 总读取次数</p></blockquote><h2 id="缓存分类" tabindex="-1"><a class="header-anchor" href="#缓存分类"><span>缓存分类</span></a></h2><p>无论是硬件还是软件，缓存已经随处可见。架构师内部有一句流行话，“性能不够，缓存来凑！”。<br> 广大的开发同学如果要做系统优化，不管遇到什么问题，百试不爽的低成本优化思路就是从「缓存」入手，将原先裸奔的数据缓存化，或者将数据前置到离用户更近的地方，毕竟网络长距离传输也要花费不少时间。</p><p>按照使用维度，对缓存做下分类：</p><h3 id="_1、cpu-缓存" tabindex="-1"><a class="header-anchor" href="#_1、cpu-缓存"><span>1、CPU 缓存</span></a></h3><p>CPU缓存分为L1、L2、L3 三级，越靠近CPU的，容量越小，命中率越高。当L3等级的缓存都取不到数据的时候，需从主存中获取。</p>',12)]))}const h=t(r,[["render",c]]),d=JSON.parse('{"path":"/posts/interview/pay/arch/%E4%B8%AD%E9%97%B4%E4%BB%B6%EF%BC%9A%E7%BC%93%E5%AD%98%E6%98%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9A%84%E9%A6%96%E9%80%89%E5%88%A9%E5%99%A8.html","title":"中间件：缓存是性能优化的首选利器","lang":"zh-CN","frontmatter":{"title":"中间件：缓存是性能优化的首选利器","pay":"https://articles.zsxq.com/id_dpdwv0i2hhlr.html","description":"中间件：缓存是性能优化的首选利器 现在短视频非常火，简单的一个手指上翻滑动，就切到下一个视频。虽然现在已经5G时代，但我们知道下载一个视频，尤其是分辨率很高的视频要花不少时间。那么短视频是如何做到实时响应的呢？ 其实，我们在打开视频软件时，后台已经悄悄帮我们提前下载了几个短视频，每次当我们每次翻页时，都是用的本地数据，所以感觉像是秒开一样，这种行为我们...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/vpress/posts/interview/pay/arch/%E4%B8%AD%E9%97%B4%E4%BB%B6%EF%BC%9A%E7%BC%93%E5%AD%98%E6%98%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9A%84%E9%A6%96%E9%80%89%E5%88%A9%E5%99%A8.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"中间件：缓存是性能优化的首选利器"}],["meta",{"property":"og:description","content":"中间件：缓存是性能优化的首选利器 现在短视频非常火，简单的一个手指上翻滑动，就切到下一个视频。虽然现在已经5G时代，但我们知道下载一个视频，尤其是分辨率很高的视频要花不少时间。那么短视频是如何做到实时响应的呢？ 其实，我们在打开视频软件时，后台已经悄悄帮我们提前下载了几个短视频，每次当我们每次翻页时，都是用的本地数据，所以感觉像是秒开一样，这种行为我们..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-30T09:38:40.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-30T09:38:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"中间件：缓存是性能优化的首选利器\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-30T09:38:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743327520000,"updatedTime":1743327520000,"contributors":[{"name":"houbb","username":"houbb","email":"houbinbin.echo@gmail.com","commits":1,"url":"https://github.com/houbb"}]},"readingTime":{"minutes":1.71,"words":512},"filePathRelative":"posts/interview/pay/arch/中间件：缓存是性能优化的首选利器.md","localizedDate":"2025年3月30日","excerpt":"\\n<p>现在短视频非常火，简单的一个手指上翻滑动，就切到下一个视频。虽然现在已经5G时代，但我们知道下载一个视频，尤其是分辨率很高的视频要花不少时间。那么短视频是如何做到实时响应的呢？</p>\\n<p>其实，我们在打开视频软件时，后台已经悄悄帮我们提前下载了几个短视频，每次当我们每次翻页时，都是用的本地数据，所以感觉像是秒开一样，这种行为我们称之为缓存。</p>\\n<h2>什么是缓存</h2>\\n<p>缓存是数据交换的缓冲区，采用<code>空间换时间</code>的策略，将<code>原始数据的副本</code>或<code>提前计算好的数据</code>临时存储到一些更快的设备中。弥补CPU的高算力和IO的慢读写之间巨大的鸿沟，减少 CPU的浪费等待时间。</p>","autoDesc":true}');export{h as comp,d as data};
