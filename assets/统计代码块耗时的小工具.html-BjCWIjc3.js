import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as i}from"./app-NomDibRt.js";const l="/vpress/images/spring/spring/2-1.jpg",p={};function t(r,s){return i(),a("div",null,s[0]||(s[0]=[e('<h1 id="统计代码块耗时的小工具" tabindex="-1"><a class="header-anchor" href="#统计代码块耗时的小工具"><span>统计代码块耗时的小工具</span></a></h1><blockquote><p>作者：老马<br><br>公众号：老马啸西风<br><br> 博客：<a href="https://houbb.github.io/" target="_blank" rel="noopener noreferrer">https://houbb.github.io/</a><br><br> 人生理念：知行合一</p></blockquote><p>相信很多人都遇到这样一个问题？</p><p>上线了一个功能，但接口的响应时间有点长？</p><h2 id="如何定位排查" tabindex="-1"><a class="header-anchor" href="#如何定位排查"><span>如何定位排查？</span></a></h2><div align="left"><img src="'+l+`" width="600px"></div><p>普通研发人员一般会采用下面方式，在很多位置点埋入开始时间戳、结束时间戳，相减便得到耗时。代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>long start1 = System.currentTimeMillis();</span></span>
<span class="line"><span>// 模拟业务逻辑处理</span></span>
<span class="line"><span>Thread.sleep(300);</span></span>
<span class="line"><span>long end1 = System.currentTimeMillis();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>long start2 = System.currentTimeMillis();</span></span>
<span class="line"><span>// 模拟业务逻辑处理</span></span>
<span class="line"><span>Thread.sleep(730);</span></span>
<span class="line"><span>long end2 = System.currentTimeMillis();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>System.out.println(&quot;执行操作1，耗时:&quot; + (end1 - start1));</span></span>
<span class="line"><span>System.out.println(&quot;执行操作2，耗时:&quot; + (end2 - start2));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然书写简单，但导致系统中充斥着大量低级代码，比较烦人，很容易让人怀疑你的技术实力。</p><p>我们的直接想法是能不能写个工具类，即统计<code>代码块</code>耗时，还能将分析结果直观展示出来</p><p>恰好 Spring框架提供了一个工具类，<code>org.springframework.util.StopWatch</code>，提供了轻量级统计功能，对应的pom文件依赖</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;spring-core&lt;/artifactId&gt;</span></span>
<span class="line"><span>    &lt;version&gt;5.2.9.RELEASE&lt;/version&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="stopwatch-源码" tabindex="-1"><a class="header-anchor" href="#stopwatch-源码"><span>StopWatch 源码</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>省略。。。</span></span>
<span class="line"><span>public void start(String taskName) throws IllegalStateException {</span></span>
<span class="line"><span>    if (this.currentTaskName != null) {</span></span>
<span class="line"><span>        throw new IllegalStateException(&quot;Can&#39;t start StopWatch: it&#39;s already running&quot;);</span></span>
<span class="line"><span>    } else {</span></span>
<span class="line"><span>        this.currentTaskName = taskName;</span></span>
<span class="line"><span>        this.startTimeNanos = System.nanoTime();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>public void stop() throws IllegalStateException {</span></span>
<span class="line"><span>    if (this.currentTaskName == null) {</span></span>
<span class="line"><span>        throw new IllegalStateException(&quot;Can&#39;t stop StopWatch: it&#39;s not running&quot;);</span></span>
<span class="line"><span>    } else {</span></span>
<span class="line"><span>        long lastTime = System.nanoTime() - this.startTimeNanos;</span></span>
<span class="line"><span>        this.totalTimeNanos += lastTime;</span></span>
<span class="line"><span>        this.lastTaskInfo = new StopWatch.TaskInfo(this.currentTaskName, lastTime);</span></span>
<span class="line"><span>        if (this.keepTaskList) {</span></span>
<span class="line"><span>            this.taskList.add(this.lastTaskInfo);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        ++this.taskCount;</span></span>
<span class="line"><span>        this.currentTaskName = null;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>省略。。。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>start与stop方法分别记录开始时间与结束时间。</p><p>其中在记录结束时间时，会维护一个链表类型的<code>tasklist</code>属性，从而使该类可记录多个任务，最后的输出也仅仅是对之前记录的信息做了一个统一的归纳输出，从而使结果更加直观的展示出来。</p><p>prettyPrint方法，可直观的输出代码执行耗时，以及执行时间百分比。</p><h3 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h3><ul><li>spring自带，操作简单，开箱即用</li><li>任务start时可以指定name，显示更加友好</li><li>数据归纳，展示每项任务耗时与占用总时间的百分比，展示结果直观</li></ul><h3 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span>缺点</span></a></h3><ul><li>一个<code>StopWatch</code>不能同时启动多个任务，必须在当前任务<code>stop</code>之后才能开启新的task。若要一次开启多个，需要new一个新的<code>StopWatch</code>实例</li><li>代码有侵入性</li></ul><p>代码示例：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>StopWatch sw = new StopWatch();</span></span>
<span class="line"><span>sw.start(&quot;任务1&quot;);</span></span>
<span class="line"><span>// 模拟业务逻辑处理</span></span>
<span class="line"><span>Thread.sleep(300);</span></span>
<span class="line"><span>sw.stop();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>sw.start(&quot;任务2&quot;);</span></span>
<span class="line"><span>// 模拟业务逻辑处理</span></span>
<span class="line"><span>Thread.sleep(730);</span></span>
<span class="line"><span>sw.stop();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>System.out.println(sw.prettyPrint());</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>StopWatch &#39;&#39;: running time (millis) = 1033</span></span>
<span class="line"><span>-----------------------------------------</span></span>
<span class="line"><span>ms     %     Task name</span></span>
<span class="line"><span>-----------------------------------------</span></span>
<span class="line"><span>00303  029%  任务1</span></span>
<span class="line"><span>00730  071%  任务2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="类似工具" tabindex="-1"><a class="header-anchor" href="#类似工具"><span>类似工具</span></a></h2><p>除了上面 <code>Spring</code> 提供了工具外，apache下的<code>org.apache.commons.lang.time.StopWatch</code> 和 Guava 下的<code>com.google.common.base.Stopwatch</code> 都提供了类似的工具</p><p>大家根据自己的喜好，选择使用。原理大同小异，只是编码风格略有不同。</p><h2 id="项目源码" tabindex="-1"><a class="header-anchor" href="#项目源码"><span>项目源码</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>https://github.com/aalansehaiyang/spring-boot-bulking  </span></span>
<span class="line"><span></span></span>
<span class="line"><span>模块：spring-boot-bulking-tool</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>最后，阿里巴巴还开源一种系统诊断工具（Arthas），支持在线分析系统瓶颈，定位问题，并提供了丰富的命令行操作，感兴趣的同学可以体验。</p></blockquote>`,31)]))}const o=n(p,[["render",t]]),h=JSON.parse('{"path":"/posts/interview/spring/spring/%E7%BB%9F%E8%AE%A1%E4%BB%A3%E7%A0%81%E5%9D%97%E8%80%97%E6%97%B6%E7%9A%84%E5%B0%8F%E5%B7%A5%E5%85%B7.html","title":"统计代码块耗时的小工具","lang":"zh-CN","frontmatter":{"title":"统计代码块耗时的小工具","description":"统计代码块耗时的小工具 作者：老马 公众号：老马啸西风 博客：https://houbb.github.io/ 人生理念：知行合一 相信很多人都遇到这样一个问题？ 上线了一个功能，但接口的响应时间有点长？ 如何定位排查？ 普通研发人员一般会采用下面方式，在很多位置点埋入开始时间戳、结束时间戳，相减便得到耗时。代码如下： 虽然书写简单，但导致系统中充斥着...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/vpress/posts/interview/spring/spring/%E7%BB%9F%E8%AE%A1%E4%BB%A3%E7%A0%81%E5%9D%97%E8%80%97%E6%97%B6%E7%9A%84%E5%B0%8F%E5%B7%A5%E5%85%B7.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"统计代码块耗时的小工具"}],["meta",{"property":"og:description","content":"统计代码块耗时的小工具 作者：老马 公众号：老马啸西风 博客：https://houbb.github.io/ 人生理念：知行合一 相信很多人都遇到这样一个问题？ 上线了一个功能，但接口的响应时间有点长？ 如何定位排查？ 普通研发人员一般会采用下面方式，在很多位置点埋入开始时间戳、结束时间戳，相减便得到耗时。代码如下： 虽然书写简单，但导致系统中充斥着..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-30T09:38:40.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-30T09:38:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"统计代码块耗时的小工具\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-30T09:38:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743327520000,"updatedTime":1743327520000,"contributors":[{"name":"houbb","username":"houbb","email":"houbinbin.echo@gmail.com","commits":1,"url":"https://github.com/houbb"}]},"readingTime":{"minutes":2.71,"words":813},"filePathRelative":"posts/interview/spring/spring/统计代码块耗时的小工具.md","localizedDate":"2025年3月30日","excerpt":"\\n<blockquote>\\n<p>作者：老马<br>\\n<br>公众号：老马啸西风<br>\\n<br> 博客：<a href=\\"https://houbb.github.io/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://houbb.github.io/</a><br>\\n<br> 人生理念：知行合一</p>\\n</blockquote>\\n<p>相信很多人都遇到这样一个问题？</p>\\n<p>上线了一个功能，但接口的响应时间有点长？</p>\\n<h2>如何定位排查？</h2>\\n<div align=\\"left\\">\\n    <img src=\\"/images/spring/spring/2-1.jpg\\" width=\\"600px\\">\\n</div>","autoDesc":true}');export{o as comp,h as data};
