import{_ as i}from"./13-1-CBOkzbgN.js";import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a,o as l}from"./app-NomDibRt.js";const o="/vpress/images/middleware/mysql/13-12.png",p="/vpress/images/middleware/mysql/13-2.png",t="/vpress/images/middleware/mysql/13-13.png",d="/vpress/images/middleware/mysql/13-5.png",r="/vpress/images/middleware/mysql/13-6.png",c="/vpress/images/middleware/mysql/13-9.png",h="/vpress/images/middleware/mysql/13-14.png",m="/vpress/images/middleware/mysql/13-15.png",b="/vpress/images/middleware/mysql/13-7.png",g="/vpress/images/middleware/mysql/13-8.png",u={};function v(k,e){return l(),n("div",null,e[0]||(e[0]=[a('<h1 id="mysql-一棵-b-树能存多少条数据" tabindex="-1"><a class="header-anchor" href="#mysql-一棵-b-树能存多少条数据"><span>mysql 一棵 B+ 树能存多少条数据？</span></a></h1><blockquote><p>作者：老马<br><br>公众号：老马啸西风<br><br> 博客：<a href="https://houbb.github.io/" target="_blank" rel="noopener noreferrer">https://houbb.github.io/</a><br><br> 人生理念：知行合一</p></blockquote><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>mysql 的InnoDB存储引擎 一棵B+树可以存放多少行数据?</p><div align="left"><img src="'+i+'" width="500px"></div><p>（答案在文章中！！）</p><p>要搞清楚这个问题，首先要从InnoDB索引数据结构、数据组织方式说起。</p><p>我们都知道计算机有五大组成部分：控制器，运算器，存储器，输入设备，输出设备。</p><p>其中很重要的，也跟今天这个题目有关系的是存储器。</p><p>我们知道万事万物都有自己的单元体系，若干个小单体组成一个个大的个体。就像拼乐高一样，可以自由组合。所以说，如果能熟悉最小单元，就意味着我们抓住了事物的本事，再复杂的问题也会迎刃而解。</p><h2 id="存储单元" tabindex="-1"><a class="header-anchor" href="#存储单元"><span>存储单元</span></a></h2><p><strong>存储器范围比较大，但是数据具体怎么存储，有自己的最小存储单元。</strong></p><p>1、数据持久化存储磁盘里，磁盘的最小单元是扇区，<code>一个扇区的大小是 512个字节</code></p><p>2、文件系统的最小单元是块，<code>一个块的大小是 4K</code></p><p>3、InnoDB存储引擎，有自己的最小单元，称之为页，<code>一个页的大小是16K</code></p><p><strong>扇区、块、页这三者的存储关系？</strong></p><div align="left"><img src="'+o+'" width="500px"></div><h2 id="innodb-引擎" tabindex="-1"><a class="header-anchor" href="#innodb-引擎"><span>InnoDB 引擎</span></a></h2><p>如果mysql部署在本地，通过命令行方式连接mysql，默认的端口 <code>3306</code> ，然后输入密码即可进入</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>mysql -u root -p</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>查看InnoDB的页大小</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>show variables like &#39;innodb_page_size&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div align="left"><img src="'+p+'" width="500px"></div><p>mysql数据库中，table表中的记录都是存储在页中，那么一页可以存多少行数据？假如一行数据的大小约为1K字节，那么按 <code>16K / 1K = 16</code>，可以计算出一页大约能存放16条数据。</p><p>mysql 的最小存储单元叫做“页”，这么多的页是如何构建一个庞大的数据组织，我们又如何知道数据存储在哪一个页中？</p><p>如果逐条遍历，性能肯定很差。为了提升查找速度，我们引入了<code>B+树</code>，先来看下<code>B+树</code>的存储结构</p><div align="left"><img src="'+t+`" width="500px"></div><p>页除了可以存放<code>数据</code>（叶子节点），还可以存放<code>健值和指针</code>（非叶子节点），当然他们是有序的。这样的数据组织形式，我们称为索引组织表。</p><blockquote><p>如：上图中 page number=3的页，该页存放键值和指向数据页的指针，这样的页由N个键值+指针组成</p></blockquote><p><strong>B+ 树是如何检索记录？</strong></p><ul><li>首先找到根页，你怎么知道一张表的根页在哪呢？</li><li>其实每张表的根页位置在表空间文件中是固定的，即page number=3的页</li><li>找到根页后通过二分查找法，定位到id=5的数据应该在指针P5指向的页中</li><li>然后再去page number=5的页中查找，同样通过二分查询法即可找到id=5的记录</li></ul><h2 id="如何计算b-树的高度" tabindex="-1"><a class="header-anchor" href="#如何计算b-树的高度"><span>如何计算B+树的高度？</span></a></h2><p>在<code>InnoDB </code> 的表空间文件中，约定<code>page number = 3</code>表示主键索引的根页</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>SELECT</span></span>
<span class="line"><span>b.name, a.name, index_id, type, a.space, a.PAGE_NO</span></span>
<span class="line"><span>FROM</span></span>
<span class="line"><span>information_schema.INNODB_SYS_INDEXES a,</span></span>
<span class="line"><span>information_schema.INNODB_SYS_TABLES b</span></span>
<span class="line"><span>WHERE</span></span>
<span class="line"><span>a.table_id = b.table_id AND a.space &lt;&gt; 0</span></span>
<span class="line"><span>and b.name like &#39;%sp_job_log&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div align="left"><img src="`+d+'" width="500px"></div><blockquote><p>从图中可以看出，每个表的主键索引的根页的<code>page number</code>都是3，而其他的二级索引<code>page number</code>为4</p></blockquote><p>在根页偏移量为<code>64</code>的地方存放了该B+树的<code>page level</code>。主键索引B+树的根页在整个表空间文件中的第3个页开始，所以算出它在文件中的偏移量：<code>16384*3 + 64 = 49152 + 64 =49216</code>，前2个字节中。</p><p>首先，找到MySql数据库物理文件存放位置：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>show global variables like &quot;%datadir%&quot; ;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div align="left"><img src="'+r+'" width="500px"></div><p>hexdump工具，查看表空间文件指定偏移量上的数据：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>hexdump -s 49216 -n 10  sp_job_log.ibd</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div align="left"><img src="'+c+'" width="500px"></div><p>page_level 值是 1，那么 B+树高度为 <code>page level + 1 = 2</code></p><p><strong>特别说明：</strong></p><ul><li><p>查询数据库时，不论读一行，还是读多行，都是将这些行所在的整页数据加载，然后在内存中匹配过滤出最终结果。</p></li><li><p>表的检索速度跟树的深度有直接关系，毕竟一次页加载就是一次IO，而磁盘IO又是比较费时间。<code>对于一张千万级条数B+树高度为3的表与几十万级B+树高度也为3的表，其实查询效率相差不大。</code></p></li></ul><h2 id="一棵b-树可以存放多少行数据" tabindex="-1"><a class="header-anchor" href="#一棵b-树可以存放多少行数据"><span>一棵B+树可以存放多少行数据？</span></a></h2><p><strong>假设B+树的深度为2</strong></p><p>这棵B+树的存储总记录数 = <code>根节点指针数 * 单个叶子节点记录条数</code></p><p><strong>那么指针数如何计算？</strong></p><p>假设主键ID为<code>bigint</code>类型，长度为<code>8字节</code>，而指针大小在InnoDB源码中设置为<code>6字节</code>，这样一共<code>14字节</code>。</p><p>那么一个页中能存放多少这样的组合，就代表有多少指针，即 <code>16384 / 14 = 1170</code>。那么可以算出一棵高度为2 的B+树，能存放 <code>1170 * 16 = 18720</code> 条这样的数据记录。</p><p>同理：</p><p>高度为3的B+树可以存放的行数 = <code>1170 * 1170 * 16 = 21902400 </code></p><blockquote><p>千万级的数据存储只需要约3层B+树，查询数据时，每加载一页（page）代表一次IO。所以说，根据主键id索引查询约3次IO便可以找到目标结果。</p></blockquote><p><strong>对于一些复杂的查询，可能需要走二级索引，那么通过二级索引查找记录最多需要花费多少次IO呢？</strong></p><div align="left"><img src="'+h+'" width="500px"></div><p>首先，从二级索引B+树中，根据<code>name</code> 找到对应的主键id</p><div align="left"><img src="'+m+'" width="500px"></div><p>然后，再根据主键id 从 聚簇索引查找到对应的记录。如上图所示，二级索引有3层，聚簇索引有3层，那么最多花费的IO次数是：3+3 = 6</p><p>聚簇索引默认是主键，如果表中没有定义主键，InnoDB 会选择一个唯一的非空索引代替。如果没有这样的索引，InnoDB 会隐式定义一个主键来作为聚簇索引。</p><blockquote><p>这也是为什么InnoDB表必须有主键，并且推荐使用整型的自增主键！！！</p></blockquote><blockquote><p>InnoDB使用的是聚簇索引，将主键组织到一棵B+树中，而行数据就储存在叶子节点上</p></blockquote><p><strong>举例说明：</strong></p><p>1、若使用<code>&quot;where id = 14&quot;</code>这样的条件查找记录，则按照B+树的检索算法即可查找到对应的叶节点，之后获得行数据。</p><p>2、若对Name列进行条件搜索，则需要两个步骤：</p><ul><li>第一步在辅助索引B+树中检索Name，到达其叶子节点获取对应的主键值。</li><li>第二步使用主键值在主索引B+树中再执行一次B+树检索操作，最终到达叶子节点即可获取整行数据。（重点在于通过其他键需要建立辅助索引）</li></ul><h2 id="实战演示" tabindex="-1"><a class="header-anchor" href="#实战演示"><span>实战演示</span></a></h2><p>实际项目中，每个表的结构设计都不一样，占用的存储空间大小也各不相等。如何计算不同的B+树深度下，一个表可以存储的记录条数？</p><p>我们以业务日志表 <code>sp_job_log</code> 为例，讲解详细的计算过程：</p><p>1、查看表的状态信息</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>show table status like &#39;sp_job_log&#39;\\G</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div align="left"><img src="'+b+'" width="500px"></div><p>图中看到<code>sp_job_log</code>表的行平均大小为<code>153</code>个字节</p><p>2、查看表结构</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>desc sp_job_log;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div align="left"><img src="'+g+'" width="500px"></div><p>3、计算B+树的行数</p><ul><li>单个叶子节点（页）中的记录数 = 16K / 153 = 105</li><li>非叶子节点能存放多少指针， 16384 / 14 = 1170</li><li>如果树的高度为3，可以存放的记录行数 = 1170 * 1170 * 105 = 143,734,500</li></ul><h2 id="最后加餐" tabindex="-1"><a class="header-anchor" href="#最后加餐"><span>最后加餐</span></a></h2><p>普通索引和唯一索引在查询效率上有什么不同？</p><p>唯一索引就是在普通索引上增加了约束性，也就是关键字唯一，找到了关键字就停止检索。而普通索引，可能会存在用户记录中的关键字相同的情况，根据页结构的原理，当我们读取一条记录的时候，不是单独将这条记录从磁盘中读出去，而是将这个记录所在的页全部加载到内存中进行读取。InnoDB 存储引擎的页大小为 16KB，在一个页中可能存储着上千个记录，因此在普通索引的字段上进行查找也就是在内存中多几次<code>判断下一条记录</code>的操作，对于 CPU 来说，这些操作所消耗的时间是可以忽略不计的。所以对一个索引字段进行检索，采用普通索引还是唯一索引在检索效率上基本上没有差别。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><ul><li><a href="https://mp.weixin.qq.com/s/ceMTuWeL5DGQ2g-XjcEj0A" target="_blank" rel="noopener noreferrer">面试题：InnoDB 中一棵 B+ 树能存多少行数据？</a></li><li><a href="https://juejin.cn/post/6844903559029325838" target="_blank" rel="noopener noreferrer">如何获取InnoDB树的高度</a></li><li><a href="https://juejin.cn/post/6904293886626103309" target="_blank" rel="noopener noreferrer">MySQL：InnoDB一棵B+树可以存放多少行数据？</a></li></ul>',84)]))}const q=s(u,[["render",v]]),f=JSON.parse('{"path":"/posts/interview/middleware/mysql/mysql%20%E4%B8%80%E6%A3%B5%20B_%20%E6%A0%91%E8%83%BD%E5%AD%98%E5%A4%9A%E5%B0%91%E6%9D%A1%E6%95%B0%E6%8D%AE%EF%BC%9F.html","title":"mysql 一棵 B+ 树能存多少条数据？","lang":"zh-CN","frontmatter":{"title":"mysql 一棵 B+ 树能存多少条数据？","description":"mysql 一棵 B+ 树能存多少条数据？ 作者：老马 公众号：老马啸西风 博客：https://houbb.github.io/ 人生理念：知行合一 简介 mysql 的InnoDB存储引擎 一棵B+树可以存放多少行数据? （答案在文章中！！） 要搞清楚这个问题，首先要从InnoDB索引数据结构、数据组织方式说起。 我们都知道计算机有五大组成部分：控...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/vpress/posts/interview/middleware/mysql/mysql%20%E4%B8%80%E6%A3%B5%20B_%20%E6%A0%91%E8%83%BD%E5%AD%98%E5%A4%9A%E5%B0%91%E6%9D%A1%E6%95%B0%E6%8D%AE%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"mysql 一棵 B+ 树能存多少条数据？"}],["meta",{"property":"og:description","content":"mysql 一棵 B+ 树能存多少条数据？ 作者：老马 公众号：老马啸西风 博客：https://houbb.github.io/ 人生理念：知行合一 简介 mysql 的InnoDB存储引擎 一棵B+树可以存放多少行数据? （答案在文章中！！） 要搞清楚这个问题，首先要从InnoDB索引数据结构、数据组织方式说起。 我们都知道计算机有五大组成部分：控..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-30T09:38:40.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-30T09:38:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"mysql 一棵 B+ 树能存多少条数据？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-30T09:38:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743327520000,"updatedTime":1743327520000,"contributors":[{"name":"houbb","username":"houbb","email":"houbinbin.echo@gmail.com","commits":1,"url":"https://github.com/houbb"}]},"readingTime":{"minutes":7.87,"words":2361},"filePathRelative":"posts/interview/middleware/mysql/mysql 一棵 B+ 树能存多少条数据？.md","localizedDate":"2025年3月30日","excerpt":"\\n<blockquote>\\n<p>作者：老马<br>\\n<br>公众号：老马啸西风<br>\\n<br> 博客：<a href=\\"https://houbb.github.io/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://houbb.github.io/</a><br>\\n<br> 人生理念：知行合一</p>\\n</blockquote>\\n<h2>简介</h2>\\n<p>mysql 的InnoDB存储引擎 一棵B+树可以存放多少行数据?</p>\\n<div align=\\"left\\">\\n    <img src=\\"/images/middleware/mysql/13-1.png\\" width=\\"500px\\">\\n</div>","autoDesc":true}');export{q as comp,f as data};
