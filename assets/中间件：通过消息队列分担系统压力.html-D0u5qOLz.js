import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,a as r,o as a}from"./app-NomDibRt.js";const p="/vpress/images/pay/arch/10-1.png",i="/vpress/images/pay/arch/10-2.png",s="/vpress/images/pay/arch/10-3.png",n="/vpress/images/pay/arch/10-4.png",c={};function h(d,e){return a(),o("div",null,e[0]||(e[0]=[r('<h1 id="中间件-通过消息队列分担系统压力" tabindex="-1"><a class="header-anchor" href="#中间件-通过消息队列分担系统压力"><span>中间件：通过消息队列分担系统压力</span></a></h1><blockquote><p>作者：老马<br><br>公众号：老马啸西风<br><br> 博客：<a href="https://houbb.github.io/" target="_blank" rel="noopener noreferrer">https://houbb.github.io/</a><br><br> 人生理念：知行合一</p></blockquote><p>随着分布式系统架构的盛行，除了之前的<code>同步调用</code>方式外，基于<code>消息机制</code>的<code>异步调用</code>方式能发挥出更大的吞吐量，越来越受架构师的青睐。</p><h2 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h2><h3 id="_1、应用解耦" tabindex="-1"><a class="header-anchor" href="#_1、应用解耦"><span>1、应用解耦</span></a></h3><p>传统模式下系统间的耦合性太强，不同的系统之间通过同步调用完成业务逻辑。但是相互依赖，风险会比较高，比如图中 B系统如果宕机，那么A系统就会受到影响。</p><div align="left"><img src="'+p+'" width="450px"></div><p>我们可以考虑将一些非核心逻辑从A系统中剥离，在A系统完成业务动作后，发送一个异步消息。其他业务系统如果关注这个动作，可以通过 <code>发布/订阅</code> 方式监听消息，完成后续处理。</p><p>优化后的流程图：</p><div align="left"><img src="'+i+'" width="450px"></div><p>其中，E 系统是后来新加入的业务系统，这种模式的好处是之前代码不用改动，降低了系统风险，满足软件设计原则的开闭原则。</p><h3 id="_2、异步" tabindex="-1"><a class="header-anchor" href="#_2、异步"><span>2、异步</span></a></h3><p>我们看个新用户注册的例子，一般来讲，用户注册成功后会收到一个消息提醒。</p><p>注册保存逻辑比较简单，校验通过后直接写数据库，假如耗时50ms；邮件比较慢一些，耗时 400 ms。那前台接口给用户返回的总耗时是 400+50 = 450 ms</p><div align="left"><img src="'+s+'" width="550px"></div><p>我们发现邮件通知的耗时比较大，如果能将其剥离，那么注册接口的总耗时会大幅降低。</p><div align="left"><img src="'+n+'" width="550px"></div><p>优化后主流程只有注册用户和发送消息两部分，整体耗时 50 + 5 = 55 ms。后续的邮件和短息完全都是走异步消息逻辑，当然也可以是多线程并行处理。</p>',18)]))}const l=t(c,[["render",h]]),_=JSON.parse('{"path":"/posts/interview/pay/arch/%E4%B8%AD%E9%97%B4%E4%BB%B6%EF%BC%9A%E9%80%9A%E8%BF%87%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%88%86%E6%8B%85%E7%B3%BB%E7%BB%9F%E5%8E%8B%E5%8A%9B.html","title":"中间件：通过消息队列分担系统压力","lang":"zh-CN","frontmatter":{"title":"中间件：通过消息队列分担系统压力","pay":"https://articles.zsxq.com/id_85lcsfa9s4as.html","description":"中间件：通过消息队列分担系统压力 作者：老马 公众号：老马啸西风 博客：https://houbb.github.io/ 人生理念：知行合一 随着分布式系统架构的盛行，除了之前的同步调用方式外，基于消息机制的异步调用方式能发挥出更大的吞吐量，越来越受架构师的青睐。 应用场景 1、应用解耦 传统模式下系统间的耦合性太强，不同的系统之间通过同步调用完成业务...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/vpress/posts/interview/pay/arch/%E4%B8%AD%E9%97%B4%E4%BB%B6%EF%BC%9A%E9%80%9A%E8%BF%87%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%88%86%E6%8B%85%E7%B3%BB%E7%BB%9F%E5%8E%8B%E5%8A%9B.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"中间件：通过消息队列分担系统压力"}],["meta",{"property":"og:description","content":"中间件：通过消息队列分担系统压力 作者：老马 公众号：老马啸西风 博客：https://houbb.github.io/ 人生理念：知行合一 随着分布式系统架构的盛行，除了之前的同步调用方式外，基于消息机制的异步调用方式能发挥出更大的吞吐量，越来越受架构师的青睐。 应用场景 1、应用解耦 传统模式下系统间的耦合性太强，不同的系统之间通过同步调用完成业务..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-30T09:38:40.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-30T09:38:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"中间件：通过消息队列分担系统压力\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-30T09:38:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743327520000,"updatedTime":1743327520000,"contributors":[{"name":"houbb","username":"houbb","email":"houbinbin.echo@gmail.com","commits":1,"url":"https://github.com/houbb"}]},"readingTime":{"minutes":1.86,"words":557},"filePathRelative":"posts/interview/pay/arch/中间件：通过消息队列分担系统压力.md","localizedDate":"2025年3月30日","excerpt":"\\n<blockquote>\\n<p>作者：老马<br>\\n<br>公众号：老马啸西风<br>\\n<br> 博客：<a href=\\"https://houbb.github.io/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://houbb.github.io/</a><br>\\n<br> 人生理念：知行合一</p>\\n</blockquote>\\n<p>随着分布式系统架构的盛行，除了之前的<code>同步调用</code>方式外，基于<code>消息机制</code>的<code>异步调用</code>方式能发挥出更大的吞吐量，越来越受架构师的青睐。</p>","autoDesc":true}');export{l as comp,_ as data};
