import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as n,o as a}from"./app-NomDibRt.js";const l="/vpress/images/middleware/mysql/3-13.jpg",t="/vpress/images/middleware/mysql/3-1.jpg",o="/vpress/images/middleware/mysql/3-2.jpg",d="/vpress/images/middleware/mysql/3-3.jpg",r="/vpress/images/middleware/mysql/3-4.jpg",p="/vpress/images/middleware/mysql/3-5.jpg",c="/vpress/images/middleware/mysql/3-7.jpg",h="/vpress/images/middleware/mysql/3-8.jpg",g="/vpress/images/middleware/mysql/3-9.jpg",b="/vpress/images/middleware/mysql/3-10.jpg",m="/vpress/images/middleware/mysql/3-11.jpg",u="/vpress/images/middleware/mysql/3-12.jpg",v={};function k(_,e){return a(),s("div",null,e[0]||(e[0]=[n('<h1 id="讲一讲-mysql-数据备份杀手锏-binlog" tabindex="-1"><a class="header-anchor" href="#讲一讲-mysql-数据备份杀手锏-binlog"><span>讲一讲 MySQL 数据备份杀手锏 binlog</span></a></h1><blockquote><p>作者：老马<br><br>公众号：老马啸西风<br><br> 博客：<a href="https://houbb.github.io/" target="_blank" rel="noopener noreferrer">https://houbb.github.io/</a><br><br> 人生理念：知行合一</p></blockquote><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>我们都知道，数据非常重要</p><p>网上也经常看到一些段子，某公司程序员对工作不满，删库跑路，老板损失惨重，欲哭无泪。这不最近又爆出一例，京东到家程序员离职当天删库跑路！</p><div align="left"><img src="'+l+'" width="260px"></div><p><strong>那么有没有什么解决方案？</strong></p><p>即使数据库真的被删了，也有备份数据，能快速恢复。甚至可以做到实时热备，即使内部炸掉外部用户也感知不到，一片风平浪静。</p><div align="left"><img src="'+t+'" width="260px"></div><p>MySQL 作为当下流行数据库，在<code>数据备份</code>、<code>高可用</code>方面非常有竞争力，今天，我们就重点来讲下</p><h2 id="什么是-mysql-主备" tabindex="-1"><a class="header-anchor" href="#什么是-mysql-主备"><span>什么是 MySQL 主备</span></a></h2><div align="left"><img src="'+o+'" width="500px"></div><p><strong>情况一：</strong></p><ul><li>客户端的业务操作，<code>读、写</code>访问的是主库</li><li>主库通过某种机制，将数据实时同步给备库</li><li>主库由于有些原因，无法正常响应客户端的请求</li></ul><p><strong>情况二：</strong></p><ul><li>完成主备切换</li><li>客户端读写，访问的是备库（此时备库升级为新主库）</li></ul><p>那么，这里面最核心的<code>数据同步</code>是如何实现的？</p><h2 id="主从同步原理" tabindex="-1"><a class="header-anchor" href="#主从同步原理"><span>主从同步原理</span></a></h2><div align="left"><img src="'+d+'" width="500px"></div><p>1、在备库执行 <code>change master 命令</code> ，绑定主库的信息</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>mysql&gt; CHANGE MASTER TO MASTER_HOST = &#39;192.168.1.1&#39;, MASTER_USER = &#39;repl&#39;, MASTER_PASSWORD = &#39;replpassword&#39;, MASTER_PORT = 3306, MASTER_AUTO_POSITION = 1, MASTER_RETRY_COUNT = 0, MASTER_HEARTBEAT_PERIOD = 10000;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>MASTER_HOST ：master主机名（或IP地址）</li><li>MASTER_PORT ：mysql实例端口号</li><li>MASTER_USER：用户名</li><li>MASTER_PASSWORD：密码</li><li>MASTER_AUTO_POSITION：如果进行change master to时使用MASTER_AUTO_POSITION = 1，slave连接master将使用基于GTID的复制协议</li><li>MASTER_RETRY_COUNT：重连次数</li><li>MASTER_HEARTBEAT_PERIOD：复制心跳的周期</li></ul><blockquote><p><a href="https://www.docs4dev.com/docs/zh/mysql/5.7/reference/change-master-to.html" target="_blank" rel="noopener noreferrer">https://www.docs4dev.com/docs/zh/mysql/5.7/reference/change-master-to.html</a></p></blockquote><p>2、备库执行 <code>start slave </code> 命令，备库启动两个线程：<code>I/O thread</code> 和 <code>SQL thread</code></p><p>3、master主库，有数据更新，将此次更新的事件类型写入到主库的 binlog 文件中</p><p>4、主库会创建<code>log dump 线程</code>，通知slave有数据更新</p><p>5、slave，向master节点的 log dump线程请求一份指定binlog文件位置的副本，并将请求回来的<code>binlog </code>存到本地的<code>Relay log</code> 中继日志中</p><p>6、slave 再开启一个<code>SQL 线程</code>读取<code>Relay log</code>日志，解析出日志里的命令，并执行，从而保证主备库数据同步</p><h2 id="binlog-有哪几种格式" tabindex="-1"><a class="header-anchor" href="#binlog-有哪几种格式"><span>binlog 有哪几种格式</span></a></h2><p>现在，让我们近距离看下 binlog 日志。</p><p>binlog 格式有三种：<code>row</code>、<code>statement</code>、<code>mixed</code></p><p><strong>接下来，我们开始一个实验：</strong></p><p><strong>先创建一个表</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>CREATE TABLE `person` (</span></span>\n<span class="line"><span>  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT &#39;自增主键&#39;,</span></span>\n<span class="line"><span>  `income` bigint(20) NOT NULL COMMENT &#39;收入&#39;,</span></span>\n<span class="line"><span>  `expend` bigint(20) NOT NULL COMMENT &#39;支出&#39;,</span></span>\n<span class="line"><span>  PRIMARY KEY (`id`),</span></span>\n<span class="line"><span>  KEY `idx_income` (`income`)</span></span>\n<span class="line"><span>) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 COMMENT=&#39;个人收支表&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>插入4条记录：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>insert into person values(50,500,500);</span></span>\n<span class="line"><span>insert into person values(60,600,600);</span></span>\n<span class="line"><span>insert into person values(70,700,700);</span></span>\n<span class="line"><span>insert into person values(80,800,800);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>查看binlog模式：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>show variables like &#39;binlog_format%&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div align="left"><img src="'+r+'" width="500px"></div><p><strong>查看当前正在写入的binlog文件：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>show master status;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div align="left"><img src="'+p+'" width="500px"></div><p><strong>查看 binlog 中的内容，我们先来看下 row 模式</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>show binlog events in &#39;mysql-bin.000001&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div align="left"><img src="'+c+`" width="650px"></div><p>说明：</p><ul><li>SET @@SESSION.GTID_NEXT=&#39;ANONYMOUS’</li><li>BEGIN 开始一个事务</li><li>Table_map 记录更新了哪个库、哪张表</li><li>Write_rows 记录做了什么操作，详细看binlog需要借助mysqlbinlog工具。</li><li>COMMIT /* xid=157 */ 结束一个事务</li></ul><p>查找 binlog 文件的物理位置：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>root@167bfa3785f1:/# find / -name mysql-bin.000001</span></span>
<span class="line"><span>/var/lib/mysql/mysql-bin.000001</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>借助 mysqlbinlog 命令，查看具体内容：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>mysqlbinlog -vv mysql-bin.000001 --start-position=2986;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div align="left"><img src="`+h+'" width="650px"></div><p>红框中的内容表示执行了插入命令，<code>insert into person values(80,800,800);</code></p><p>其中，@1、@2、@3 表示<code>表 person</code> 的第几个字段，不用原始名称，是为了节省空间。</p><p><strong>修改 binlog 格式，设置为 STATEMENT ，查看日志格式：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>set global binlog_format=&#39;STATEMENT&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>设置之后，需要退出mysql重新连接，才能看到生效</p></blockquote><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>show binlog events in &#39;mysql-bin.000001&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div align="left"><img src="'+g+'" width="500px"></div><p>从图中我们可以看出，当 binlog_format=statement 时，binlog 里面记录的就是 SQL 语句的原文。</p><p>其中，use <code>tomge</code> ：表示要先切到对应的数据库</p><p>如果想从指定位置查看binlog，可以增加 <code>from</code> 可选参数，如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>show binlog events in &#39;mysql-bin.000001&#39;  from 5168;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>statement 与 row 对比：</strong></p><p><code>statement</code> 格式的binlog记录的是sql语句；<code>row</code> 格式的binlog记录的是两个event（Table_map，Write_rows，Delete_rows）</p><div align="left"><img src="'+b+'" width="260px"></div><p>当 binlog 在 statement 格式下，记录的是sql语句，在主库执行时可能使用的是索引 A；但是同步给备库执行时，可能用了 索引B。</p><p>索引不同，同一条sql语句，运行结果可能也不一样。</p><p>针对这个场景，我们建议采用 <code>row</code> 格式的 binlog。</p><blockquote><p>即使我们使用了带where 条件（如：income&gt;720）的delete语句，但 binlog 记录的是要删除的主键id（id =80 ），所以不会出现差错。</p></blockquote><div align="left"><img src="'+m+'" width="500px"></div><div align="left"><img src="'+u+'" width="500px"></div><p><strong>mixed 格式 的binlog 是个啥？</strong></p><p>由于 <code>statement</code> 格式的binlog 可能会导致主库、备库间的数据同步不一致，因此我们会采用 <code>row</code> 格式。</p><p>但是，<code>row</code> 格式占用的空间很大，写 binlog 也要占用大量的 IO 资源。</p><p>所以，官方提出一种mixed混合模式，集成了两者的优点。</p><p>内容如下：</p><ul><li>mysql会自动判断<code>statement</code>格式，是否会引发主备不一致的问题</li><li>如果<code>statement</code>格式会引起主备不一致的问题，自动使用<code>row</code>格式。</li><li>如果<code>statement</code>格式不会引起主备不一致的问题，那么就用<code>statement</code>格式，</li></ul><h2 id="恢复数据" tabindex="-1"><a class="header-anchor" href="#恢复数据"><span>恢复数据</span></a></h2><p>当然，我们还建议把MySQL 的binlog设置成 <code>row</code> 模式，因为它可以用于数据恢复。我们来看下 <code>insert</code>、<code>update</code>、<code>delete</code> 三种DML操作如何来恢复数据的。</p><h3 id="_1、delete" tabindex="-1"><a class="header-anchor" href="#_1、delete"><span>1、delete</span></a></h3><p>当我们执行 delete 命令时，如果 <code>binlog_row_image</code> 设置了 &#39;FULL&#39;，那么 Delete_rows 里面，包含了删掉的行的所有字段的值。</p><p>如果误删了，因为 binlog 记录了所有字段的值，反向执行 insert 就可以了。</p><blockquote><p>当 <code>binlog_row_image</code> 设置为 <code>MINIMAL</code>，只记录关键信息，比如 id=80</p></blockquote><h3 id="_2、insert" tabindex="-1"><a class="header-anchor" href="#_2、insert"><span>2、insert</span></a></h3><p>row 格式下，binlog 会 记录 insert 的所有字段值。</p><p>如果误操作，只需要根据这些值找到对应的行，再执行 delete 操作即可</p><h3 id="_3、update" tabindex="-1"><a class="header-anchor" href="#_3、update"><span>3、update</span></a></h3><p>row 格式下，binlog 会 记录 update 修改前、修改后的整行数据。</p><p>如果误操作，只需要用修改前的数据覆盖即可。</p><h2 id="通过命令来恢复数据" tabindex="-1"><a class="header-anchor" href="#通过命令来恢复数据"><span>通过命令来恢复数据</span></a></h2><p>如果要执行数据恢复，可以使用下面命令</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>mysqlbinlog mysql-bin.000001  --start-position=1  --stop-position=3000 | mysql -h192.168.0.1 -P3306 -u$user -p$pwd;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>将 <code>mysql-bin.000001</code> 文件位置从 1到3000 的 binlog 在 <code>192.168.0.1</code>机器的数据库上回放，还原。</p>',94)]))}const E=i(v,[["render",k]]),T=JSON.parse('{"path":"/posts/interview/middleware/mysql/%E8%AE%B2%E4%B8%80%E8%AE%B2%20MySQL%20%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E6%9D%80%E6%89%8B%E9%94%8F%20binlog.html","title":"讲一讲 MySQL 数据备份杀手锏 binlog","lang":"zh-CN","frontmatter":{"title":"讲一讲 MySQL 数据备份杀手锏 binlog","description":"讲一讲 MySQL 数据备份杀手锏 binlog 作者：老马 公众号：老马啸西风 博客：https://houbb.github.io/ 人生理念：知行合一 简介 我们都知道，数据非常重要 网上也经常看到一些段子，某公司程序员对工作不满，删库跑路，老板损失惨重，欲哭无泪。这不最近又爆出一例，京东到家程序员离职当天删库跑路！ 那么有没有什么解决方案？ 即...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/vpress/posts/interview/middleware/mysql/%E8%AE%B2%E4%B8%80%E8%AE%B2%20MySQL%20%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E6%9D%80%E6%89%8B%E9%94%8F%20binlog.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"讲一讲 MySQL 数据备份杀手锏 binlog"}],["meta",{"property":"og:description","content":"讲一讲 MySQL 数据备份杀手锏 binlog 作者：老马 公众号：老马啸西风 博客：https://houbb.github.io/ 人生理念：知行合一 简介 我们都知道，数据非常重要 网上也经常看到一些段子，某公司程序员对工作不满，删库跑路，老板损失惨重，欲哭无泪。这不最近又爆出一例，京东到家程序员离职当天删库跑路！ 那么有没有什么解决方案？ 即..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-30T09:38:40.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-30T09:38:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"讲一讲 MySQL 数据备份杀手锏 binlog\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-30T09:38:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743327520000,"updatedTime":1743327520000,"contributors":[{"name":"houbb","username":"houbb","email":"houbinbin.echo@gmail.com","commits":1,"url":"https://github.com/houbb"}]},"readingTime":{"minutes":5.86,"words":1758},"filePathRelative":"posts/interview/middleware/mysql/讲一讲 MySQL 数据备份杀手锏 binlog.md","localizedDate":"2025年3月30日","excerpt":"\\n<blockquote>\\n<p>作者：老马<br>\\n<br>公众号：老马啸西风<br>\\n<br> 博客：<a href=\\"https://houbb.github.io/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://houbb.github.io/</a><br>\\n<br> 人生理念：知行合一</p>\\n</blockquote>\\n<h2>简介</h2>\\n<p>我们都知道，数据非常重要</p>\\n<p>网上也经常看到一些段子，某公司程序员对工作不满，删库跑路，老板损失惨重，欲哭无泪。这不最近又爆出一例，京东到家程序员离职当天删库跑路！</p>","autoDesc":true}');export{E as comp,T as data};
