import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as i}from"./app-NomDibRt.js";const l="/vpress/images/spring/springboot/14-2.jpg",p="/vpress/images/spring/springboot/14-1.jpg",t={};function c(r,s){return i(),a("div",null,s[0]||(s[0]=[e(`<h1 id="spring-boot-集成-ehcache" tabindex="-1"><a class="header-anchor" href="#spring-boot-集成-ehcache"><span>Spring Boot 集成 EhCache</span></a></h1><blockquote><p>作者：老马<br><br>公众号：老马啸西风<br><br> 博客：<a href="https://houbb.github.io/" target="_blank" rel="noopener noreferrer">https://houbb.github.io/</a><br><br> 人生理念：知行合一</p></blockquote><p><code>Spring Boot 作为主流微服务框架，拥有成熟的社区生态。市场应用广泛，为了方便大家，整理了一个基于spring boot的常用中间件快速集成入门系列手册，涉及RPC、缓存、消息队列、分库分表、注册中心、分布式配置等常用开源组件，大概有几十篇文章，陆续会开放出来，感兴趣同学可以关注&amp;收藏</code></p><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>EhCache 从 Hibernate 发展而来，是一个纯Java的进程内缓存框架，具有快速、精干等特点。Ehcache是一种广泛使用的开源Java分布式缓存。主要面向通用缓存，Java EE和轻量级容器。它具有内存和磁盘存储，缓存加载器，缓存扩展，缓存异常处理程序，一个gzip缓存servlet过滤器，支持REST和SOAP api等特点。</p><h3 id="主要特性" tabindex="-1"><a class="header-anchor" href="#主要特性"><span>主要特性</span></a></h3><ul><li>快速，简单</li><li>多种缓存策略</li><li>缓存数据有两级：内存和磁盘，因此无需担心容量问题</li><li>缓存数据会在虚拟机重启的过程中写入磁盘</li><li>可以通过RMI、可插入API等方式进行分布式缓存</li><li>具有缓存和缓存管理器的侦听接口</li><li>支持多缓存管理器实例，以及一个实例的多个缓存区域</li><li>提供Hibernate的缓存实现</li></ul><h2 id="代码演示" tabindex="-1"><a class="header-anchor" href="#代码演示"><span>代码演示</span></a></h2><h3 id="外部依赖" tabindex="-1"><a class="header-anchor" href="#外部依赖"><span>外部依赖</span></a></h3><p>在 pom.xml 文件中添加 Ehcache 依赖</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;spring-boot-starter-cache&lt;/artifactId&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span>
<span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;net.sf.ehcache&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;ehcache&lt;/artifactId&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>不需要配置 version，SpringBoot 的根pom已经对版本号做了统一声明！</p></blockquote><h3 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件"><span>配置文件</span></a></h3><p>在配置文件 <code>application.yaml</code> 中配置 ehcache 的相关参数，具体内容如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>spring:</span></span>
<span class="line"><span>  application:</span></span>
<span class="line"><span>    name: spring-boot-bulking-ehcache</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  cache:</span></span>
<span class="line"><span>    type: ehcache</span></span>
<span class="line"><span>    ehcache:</span></span>
<span class="line"><span>      config: classpath:/ehcache.xml</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>spring.cache.type 声明spring框架使用哪一种类型的缓存，因为spring框架提供了多种缓存可供选择。</p></blockquote><h3 id="添加-ehcache-配置" tabindex="-1"><a class="header-anchor" href="#添加-ehcache-配置"><span>添加 Ehcache 配置</span></a></h3><p>在 <code>src/main/resources</code> 目录下，创建配置文件<code>ehcache.xml</code> ，内容如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;ehcache name=&quot;test&quot;&gt;</span></span>
<span class="line"><span>    &lt;diskStore path=&quot;java.io.tmpdir&quot;/&gt;</span></span>
<span class="line"><span>    &lt;defaultCache</span></span>
<span class="line"><span>            maxEntriesLocalHeap=&quot;1000&quot;</span></span>
<span class="line"><span>            eternal=&quot;false&quot;</span></span>
<span class="line"><span>            timeToIdleSeconds=&quot;300&quot;</span></span>
<span class="line"><span>            timeToLiveSeconds=&quot;600&quot;</span></span>
<span class="line"><span>            overflowToDisk=&quot;true&quot;</span></span>
<span class="line"><span>            memoryStoreEvictionPolicy=&quot;LRU&quot;&gt;</span></span>
<span class="line"><span>    &lt;/defaultCache&gt;</span></span>
<span class="line"><span>    &lt;cache name=&quot;userCache&quot;</span></span>
<span class="line"><span>           maxEntriesLocalHeap=&quot;200&quot;</span></span>
<span class="line"><span>           eternal=&quot;false&quot;</span></span>
<span class="line"><span>           timeToIdleSeconds=&quot;300&quot;</span></span>
<span class="line"><span>           timeToLiveSeconds=&quot;600&quot;</span></span>
<span class="line"><span>           overflowToDisk=&quot;true&quot;&gt;</span></span>
<span class="line"><span>    &lt;/cache&gt;</span></span>
<span class="line"><span>&lt;/ehcache&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>参数含义：</strong></p><ul><li>diskStore：磁盘缓存位置</li><li>name：缓存名称</li><li>maxElementsInMemory：内存中最大缓存对象数</li><li>maxElementsOnDisk：硬盘中最大缓存对象数，若是0表示无穷大</li><li>eternal：true表示对象永不过期，此时会忽略timeToIdleSeconds和timeToLiveSeconds属性，默认为false</li><li>timeToIdleSeconds：设定允许对象处于空闲状态的最长时间，以秒为单位。当对象自从最近一次被访问后，如果处于空闲状态的时间超过了timeToIdleSeconds属性值，这个对象就会过期，EHCache将把它从缓存中清空。只有当eternal属性为false，该属性才有效。如果该属性值为0，则表示对象可以无限期地处于空闲状态</li><li>timeToLiveSeconds：设定对象允许存在于缓存中的最长时间，以秒为单位。当对象自从被存放到缓存中后，如果处于缓存中的时间超过了 timeToLiveSeconds属性值，这个对象就会过期，EHCache将把它从缓存中清除。只有当eternal属性为false，该属性才有效。如果该属性值为0，则表示对象可以无限期地存在于缓存中。timeToLiveSeconds必须大于timeToIdleSeconds属性，才有意义</li><li>overflowToDisk：当内存中对象数量达到maxElementsInMemory时，Ehcache将会对象写到磁盘中。</li><li>diskSpoolBufferSizeMB：磁盘缓存区大小，默认为30MB。每个Cache都应该有自己的一个缓存区。</li><li>diskPersistent：是否缓存虚拟机重启期数据。</li><li>diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是120秒。</li><li>memoryStoreEvictionPolicy：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是LFU（较少使用）。</li><li>clearOnFlush：内存数量最大时是否清除。</li></ul><h3 id="开启缓存" tabindex="-1"><a class="header-anchor" href="#开启缓存"><span>开启缓存</span></a></h3><p>入口启动类添加注解 <code> @EnableCaching</code></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@SpringBootApplication(exclude = {DataSourceAutoConfiguration.class,</span></span>
<span class="line"><span>        DataSourceTransactionManagerAutoConfiguration.class})</span></span>
<span class="line"><span>@EnableCaching  // 开启缓存，Spring Boot 会自动配置缓存的 CacheManager</span></span>
<span class="line"><span>public class StartApplication {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public static void main(String[] args) {</span></span>
<span class="line"><span>        SpringApplication.run(StartApplication.class, args);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="业务实例" tabindex="-1"><a class="header-anchor" href="#业务实例"><span>业务实例</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@Component</span></span>
<span class="line"><span>@CacheConfig(cacheNames = &quot;userCache&quot;)</span></span>
<span class="line"><span>public class UserService {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Cacheable(key = &quot;#id&quot;)</span></span>
<span class="line"><span>    public User getUserById(Long id) {</span></span>
<span class="line"><span>        System.out.println(&quot;缓存中无值&quot;);</span></span>
<span class="line"><span>        User user = User.builder().id(id).userName(&quot;雪糕(&quot; + id + &quot;)&quot;).age(18).address(&quot;杭州&quot;).build();</span></span>
<span class="line"><span>        return user;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @CachePut(key = &quot;#user.id&quot;)</span></span>
<span class="line"><span>    public User updateUser(User user) {</span></span>
<span class="line"><span>        user.setUserName(&quot;雪糕（new name）&quot;);</span></span>
<span class="line"><span>        return user;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @CacheEvict(key = &quot;#id&quot;)</span></span>
<span class="line"><span>    public void deleteById(Long id) {</span></span>
<span class="line"><span>        System.out.println(&quot;db 删除数据，id=&quot; + id);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>@CacheConfig 作用于类上，用来描述该类中所有方法使用的缓存名称。当然也可以不使用该注解，直接在具体方法上的缓存注解里配置名称</li><li>@Cacheable 用于查询方法上，表示将一个方法的返回值缓存起来。默认情况下，缓存的 key 就是方法的参数，缓存的 value 就是方法的返回值</li><li>@CachePut 更新操作，当数据库中的数据更新后，缓存中的数据也要跟着更新，使用该注解，可以将方法的返回值自动更新到已经存在的 key 上</li><li>@CacheEvict 删除操作，当数据库中的数据删除后，相关的缓存数据也要自动清除。</li></ul><p>除了采用 <code>@Cacheable</code> 、<code>@CachePut</code> 等方法注解解耦式操作缓存外，我们也可以使用 <code>CacheManager</code>显示方式手动来操作缓存。</p><h2 id="cachemanager" tabindex="-1"><a class="header-anchor" href="#cachemanager"><span>CacheManager</span></a></h2><p>Spring 定义了<code>CacheManager</code>和<code>Cache</code>接口统一不同的缓存技术。其中<code>CacheManager</code>是Spring提供的各种缓存技术的抽象接口，而<code>Cache</code>接口包含缓存的读、写、删等各种操作。</p><p>针对不同的缓存技术，需要实现不同的<code>CacheManager</code>，Spring预先定义了主流缓存框架的cacheManger实现类</p><div align="left"><img src="`+l+'" width="800px"></div><table><thead><tr><th>CacheManager</th><th>描述</th></tr></thead><tbody><tr><td>SimpleCacheManager</td><td>使用简单的Collection来存储缓存，主要用于测试</td></tr><tr><td>ConcurrentMapCacheManager</td><td>使用ConcurrentMap作为缓存技术（默认）</td></tr><tr><td>NoOpCacheManager</td><td>测试用</td></tr><tr><td>EhCacheCacheManager</td><td>使用EhCache作为缓存技术，以前在hibernate的时候经常用</td></tr><tr><td>GuavaCacheManager</td><td>使用google guava的GuavaCache作为缓存技术</td></tr><tr><td>HazelcastCacheManager</td><td>使用Hazelcast作为缓存技术</td></tr><tr><td>JCacheCacheManager</td><td>使用JCache标准的实现作为缓存技术，如Apache Commons JCS</td></tr><tr><td>RedisCacheManager</td><td>使用Redis作为缓存技术</td></tr><tr><td>CaffeineCacheManager</td><td>使用Caffeine作为缓存技术</td></tr></tbody></table><blockquote><p>Spring Boot 为我们预留接口扩展，方便我们自动配置 EhCache、Redis、Guava、ConcurrentMap等缓存，默认使用ConcurrentMapCacheManager。Spring Boot的<code>application.yaml</code>配置文件，使用<code>spring.cache</code>前缀属性进行配置。</p></blockquote><p>本文我们使用 <code>EhCache</code> 缓存，代码示例如下：</p><div align="left"><img src="'+p+`" width="800px"></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@Component</span></span>
<span class="line"><span>public class UserCacheManager {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Resource</span></span>
<span class="line"><span>    private CacheManager cacheManager;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public User getUserById(Long id) {</span></span>
<span class="line"><span>        Cache cache = cacheManager.getCache(&quot;userCache&quot;);</span></span>
<span class="line"><span>        User user = cache.get(id, User.class);</span></span>
<span class="line"><span>        if (user == null) {</span></span>
<span class="line"><span>            System.out.println(&quot;缓存中无值&quot;);</span></span>
<span class="line"><span>            user = User.builder().id(id).userName(&quot;雪糕(&quot; + id + &quot;)&quot;).age(18).address(&quot;杭州&quot;).build();</span></span>
<span class="line"><span>            cache.put(id, user);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        return user;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public User updateUser(User user) {</span></span>
<span class="line"><span>        user.setUserName(&quot;雪糕（new name）&quot;);</span></span>
<span class="line"><span>        Cache cache = cacheManager.getCache(&quot;userCache&quot;);</span></span>
<span class="line"><span>        cache.put(user.getId(), user);</span></span>
<span class="line"><span>        return user;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public void deleteById(Long id) {</span></span>
<span class="line"><span>        Cache cache = cacheManager.getCache(&quot;userCache&quot;);</span></span>
<span class="line"><span>        cache.evict(id);</span></span>
<span class="line"><span>        System.out.println(&quot;db 删除数据，id=&quot; + id);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="项目源码" tabindex="-1"><a class="header-anchor" href="#项目源码"><span>项目源码</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>https://github.com/aalansehaiyang/spring-boot-bulking  </span></span>
<span class="line"><span></span></span>
<span class="line"><span>模块：spring-boot-bulking-ehcache</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><ul><li><a href="https://segmentfault.com/a/1190000013269653" target="_blank" rel="noopener noreferrer">https://segmentfault.com/a/1190000013269653</a></li></ul>`,41)]))}const h=n(t,[["render",c]]),u=JSON.parse('{"path":"/posts/interview/spring/springboot/EhCache.html","title":"Spring Boot 集成 EhCache","lang":"zh-CN","frontmatter":{"title":"Spring Boot 集成 EhCache","description":"Spring Boot 集成 EhCache 作者：老马 公众号：老马啸西风 博客：https://houbb.github.io/ 人生理念：知行合一 Spring Boot 作为主流微服务框架，拥有成熟的社区生态。市场应用广泛，为了方便大家，整理了一个基于spring boot的常用中间件快速集成入门系列手册，涉及RPC、缓存、消息队列、分库分表、...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/vpress/posts/interview/spring/springboot/EhCache.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"Spring Boot 集成 EhCache"}],["meta",{"property":"og:description","content":"Spring Boot 集成 EhCache 作者：老马 公众号：老马啸西风 博客：https://houbb.github.io/ 人生理念：知行合一 Spring Boot 作为主流微服务框架，拥有成熟的社区生态。市场应用广泛，为了方便大家，整理了一个基于spring boot的常用中间件快速集成入门系列手册，涉及RPC、缓存、消息队列、分库分表、..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-30T09:38:40.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-30T09:38:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring Boot 集成 EhCache\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-30T09:38:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743327520000,"updatedTime":1743327520000,"contributors":[{"name":"houbb","username":"houbb","email":"houbinbin.echo@gmail.com","commits":1,"url":"https://github.com/houbb"}]},"readingTime":{"minutes":5.88,"words":1765},"filePathRelative":"posts/interview/spring/springboot/EhCache.md","localizedDate":"2025年3月30日","excerpt":"\\n<blockquote>\\n<p>作者：老马<br>\\n<br>公众号：老马啸西风<br>\\n<br> 博客：<a href=\\"https://houbb.github.io/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://houbb.github.io/</a><br>\\n<br> 人生理念：知行合一</p>\\n</blockquote>\\n<p><code>Spring Boot 作为主流微服务框架，拥有成熟的社区生态。市场应用广泛，为了方便大家，整理了一个基于spring boot的常用中间件快速集成入门系列手册，涉及RPC、缓存、消息队列、分库分表、注册中心、分布式配置等常用开源组件，大概有几十篇文章，陆续会开放出来，感兴趣同学可以关注&amp;收藏</code></p>","autoDesc":true}');export{h as comp,u as data};
