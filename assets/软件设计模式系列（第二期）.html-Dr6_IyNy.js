import{_ as n}from"./14-7-DlqDuSqe.js";import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a as e,o as l}from"./app-NomDibRt.js";const p="/vpress/images/arch/designmodel/15-1.jpg",c="/vpress/images/arch/designmodel/15-2.jpg",d="/vpress/images/arch/designmodel/15-3.jpg",r="/vpress/images/arch/designmodel/15-4.jpg",t="/vpress/images/arch/designmodel/15-5.jpg",o="/vpress/images/arch/designmodel/15-6.jpg",v="/vpress/images/arch/designmodel/15-7.jpg",u="/vpress/images/arch/designmodel/15-8.jpg",b={};function m(h,s){return l(),i("div",null,s[0]||(s[0]=[e('<h1 id="软件设计模式系列-第二期" tabindex="-1"><a class="header-anchor" href="#软件设计模式系列-第二期"><span>软件设计模式系列（第二期）</span></a></h1><blockquote><p>作者：老马<br><br>公众号：老马啸西风<br><br> 博客：<a href="https://houbb.github.io/" target="_blank" rel="noopener noreferrer">https://houbb.github.io/</a><br><br> 人生理念：知行合一</p></blockquote><p>面对复杂的业务场景，千变万化的客户需求，如何以一变应万变，以最小的开发成本快速落地实现，同时保证系统有着较低的复杂度，能够保证系统后续de持续迭代能力，让系统拥有较高的可扩展性。</p><p><code>这些是一个合格的架构师必须修炼的基础内功，但是如何修炼这门神功？？？</code></p><p>我将常用的软件设计模式，做了汇总，目录如下：</p><div align="left"><img src="'+n+'" width="400px"></div><p>(考虑到内容篇幅较大，为了便于大家阅读，将软件设计模式系列（共23个）拆分成四篇文章，每篇文章讲解六个设计模式，采用不同的颜色区分，便于快速消化记忆）</p><p><strong>前文回顾：</strong></p><ul><li><a href="https://mp.weixin.qq.com/s/cCPCWCpsJ0VceBQUIMuHPg" target="_blank" rel="noopener noreferrer">面对复杂业务架构，阿里架构师是如何做的？（第一期）</a></li></ul><p>本文是主要讲解<code>桥接模式</code>、<code>组合模式</code>、<code>装饰模式</code>、<code>门面模式</code>、<code>代理模式</code>、<code>责任链模式</code></p><h2 id="_1、桥接模式" tabindex="-1"><a class="header-anchor" href="#_1、桥接模式"><span>1、桥接模式</span></a></h2><p>自然界一般由实体和行为组成。当然为了提升系统的扩展性，它们两个又可以各自抽象，然后在抽象类中描述两者的依赖。</p><p><strong>定义：</strong></p><blockquote><p>将抽象部分与它的实现部分分离，使它们都可以独立地变化。</p></blockquote><p><strong>什么场景使用桥接模式？</strong></p><ul><li>一个类存在两个（或多个）独立变化的维度，且这两个（或多个）维度都需要独立进行扩展。</li><li>对于那些不希望使用继承或因为多层继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。</li></ul><p><strong>核心思路：</strong></p><ul><li>抽象实体：定义的一种抽象分类。比如：人</li><li>具体实体：继承抽象实体的子类实体。比如：中国人、美国人、韩国人</li><li>抽象行为：定义抽象实体中具备的多种行为。比如：学汉语、吃汉堡</li><li>具体行为：实现抽象行为的具体算法。比如：中国人学汉语、美国人吃汉堡</li></ul><div align="left"><img src="'+p+`" width="600px"></div><p><strong>代码示例：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/**</span></span>
<span class="line"><span> * @author 微信公众号：老马啸西风</span></span>
<span class="line"><span> * 抽象实体</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>public abstract class AbstractEntity {</span></span>
<span class="line"><span>    protected AbstractBehavior abstractBehavior;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public AbstractEntity(AbstractBehavior abstractBehavior) {</span></span>
<span class="line"><span>        this.abstractBehavior = abstractBehavior;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public abstract void out();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * 抽象行为</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>public interface AbstractBehavior {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public String action(String name);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * 关于食物的行为</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>public class FoodBehavior implements AbstractBehavior {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public String action(String name) {</span></span>
<span class="line"><span>        if (&quot;中国人&quot;.equals(name)) {</span></span>
<span class="line"><span>            return &quot;吃 饺子&quot;;</span></span>
<span class="line"><span>        } else if (&quot;美国人&quot;.equals(name)) {</span></span>
<span class="line"><span>            return &quot;吃 汉堡&quot;;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        return null;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>桥接模式是将抽象与抽象之间分离，具体实现类依赖于抽象。抽象的分离间接完成了具体类与具体类之间的解耦，它们之间使用抽象来进行组合或聚合，而不再靠多重继承来实现。<code>本质是将一个对象的实体和行为分离，然后再基于这两个维度进行独立的演化。</code></p><p><strong>适用场景：</strong></p><ul><li>拆分复杂的类对象时。 当一个类中包含大量对象和方法时，既不方便阅读，也不方便修改。</li><li>希望从多个独立维度上扩展时。 比如，系统功能性和非功能性角度，业务或技术角度等。</li><li>运行时，组合不同的组件</li></ul><h2 id="_2、组合模式" tabindex="-1"><a class="header-anchor" href="#_2、组合模式"><span>2、组合模式</span></a></h2><p><strong>定义：</strong></p><blockquote><p>组合模式也称整体模式，把一组相似的对象当作一个单一的对象，然后将对象组合成<code>树形结构</code>以表示整个层次结构。</p></blockquote><p>这里边有两个关键点：1、树形结构分层 2、业务统一化来简化操作</p><p><strong>核心思路：</strong></p><ul><li>抽象组件（AbstractNode）：定义需要实现的统一操作。</li><li>组合节点（CompositeNode）：抽象组件的衍生子类，包含了若干孩子节点（其它组合节点或叶子节点）。</li><li>叶子节点（LeafNode）：抽象组件的子类，但它的下面没有子节点。</li></ul><div align="left"><img src="`+c+`" width="600px"></div><p><strong>代码示例：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>public abstract class AbstractNode {</span></span>
<span class="line"><span>    public abstract void add(AbstractNode abstractNode);</span></span>
<span class="line"><span>    public abstract void remove(AbstractNode abstractNode);</span></span>
<span class="line"><span>    public abstract void action();</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>public class CompositeNode extends AbstractNode {</span></span>
<span class="line"><span>    private Long nodeId;</span></span>
<span class="line"><span>    private List&lt;AbstractNode&gt; childNodes;  //存放子节点列表</span></span>
<span class="line"><span>    public CompositeNode(Long nodeId, List&lt;AbstractNode&gt; childNodes) {</span></span>
<span class="line"><span>        this.nodeId = nodeId;</span></span>
<span class="line"><span>        this.childNodes = childNodes;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public void add(AbstractNode abstractNode) {</span></span>
<span class="line"><span>        childNodes.add(abstractNode);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public void remove(AbstractNode abstractNode) {</span></span>
<span class="line"><span>        childNodes.remove(abstractNode);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public void action() {</span></span>
<span class="line"><span>        for (AbstractNode childNode : childNodes) {</span></span>
<span class="line"><span>            childNode.action();</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>public class LeafNode extends AbstractNode {</span></span>
<span class="line"><span>    private Long nodeId;</span></span>
<span class="line"><span>    public LeafNode(Long nodeId) {</span></span>
<span class="line"><span>        this.nodeId = nodeId;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public void add(AbstractNode abstractNode) {</span></span>
<span class="line"><span>        // 无子节点，无需处理</span></span>
<span class="line"><span>        return;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public void remove(AbstractNode abstractNode) {</span></span>
<span class="line"><span>        // 无子节点，无需处理</span></span>
<span class="line"><span>        return;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public void action() {</span></span>
<span class="line"><span>        System.out.println(&quot;叶子节点编号：&quot; + nodeId);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>叶子节点不能新增、删除子节点，所以对应的方法为空。</p><p>组合模式本质上封装了复杂结构的内在变化，让使用者通过一个统一的整体来使用对象之间的结构。数据结构方面支持<code>树形结构</code>、<code>环形结构</code>、<code>网状结构</code>。如我们常见的 <code>深度优先搜索</code>、<code>广度优先搜索</code>都是采用这种模式。</p><p><strong>适用场景：</strong></p><ul><li>一组对象按照某种层级结构进行管理。如：管理文件夹和文件，管理订单下的商品。</li><li>需要按照统一的行为来处理复杂结构中的对象</li><li>快速扩展对象组合。</li></ul><div align="left"><img src="`+d+'" width="600px"></div><p>手机开始是按品牌来归属分类，现在业务增加价格维度分类，我们只需要引入新的分支节点，按新的维度构建组合关系。</p><h2 id="_3、装饰模式" tabindex="-1"><a class="header-anchor" href="#_3、装饰模式"><span>3、装饰模式</span></a></h2><p><strong>定义：</strong></p><blockquote><p>动态地向一个现有对象添加新的职责和行为，同时又不改变其结构，相当于对现有的对象进行包装。</p></blockquote><p><strong>核心思路：</strong></p><ul><li>抽象组件（Component）：装饰器基类，定义组件的基本功能</li><li>具体组件（ConcreteComponent）：抽象组件的具体实现</li><li>抽象装饰器（Decorator）：包含抽象组件的引用</li><li>具体装饰器（ConcreteDecorator）：抽象装饰器的子类，并重写组件接口方法，同时可以添加附加功能。</li></ul><div align="left"><img src="'+r+`" width="600px"></div><p><strong>代码示例：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>public abstract class Component {</span></span>
<span class="line"><span>    public abstract void execute();</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>public class ConcreteComponent extends Component {</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public void execute() {</span></span>
<span class="line"><span>        System.out.println(&quot;具体子类 ConcreteComponent invoke !&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>public class Decorator extends Component {</span></span>
<span class="line"><span>    protected Component component;</span></span>
<span class="line"><span>    public Decorator(Component component) {</span></span>
<span class="line"><span>        this.component = component;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public void execute() {</span></span>
<span class="line"><span>        component.execute();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>public class ConcreteDecorator extends Decorator {</span></span>
<span class="line"><span>    public ConcreteDecorator(Component component) {</span></span>
<span class="line"><span>        super(component);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public void execute() {</span></span>
<span class="line"><span>        System.out.println(&quot;装饰器子类 ConcreteDecorator invoke !&quot;);</span></span>
<span class="line"><span>        super.execute();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>装饰模式本质上就是给已有不可修改的类附加新的功能，同时还能很方便地撤销。</p><p><strong>适用场景：</strong></p><ul><li>无需修改代码的情况下即可使用对象， 且希望在运行时为对象新增额外的功能</li><li>将业务逻辑组织为层次结构，可以为各层创建一个装饰，在运行时将各种不同逻辑组合成对象。 由于这些对象都遵循通用接口，客户端代码能以相同的方式使用这些对象。</li><li>不支持继承扩展类的场景。如：<code>final</code> 关键字限制了某个类的进一步扩展，可以通过装饰器对其进行封装，从而具备扩展能力。</li></ul><h2 id="_4、门面模式" tabindex="-1"><a class="header-anchor" href="#_4、门面模式"><span>4、门面模式</span></a></h2><p><strong>定义：</strong></p><blockquote><p>门面模式提供一个高层次的接口，要求一个子系统的外部与其内部的通信必须通过一个统一的对象进行，使得子系统更易于使用。</p></blockquote><p>门面模式要求我们使用统一的标准与系统交互，比如：我们打印日志基本会选择<code>slf4j</code>框架，其内部统一了<code>log4j</code>、<code>log4j2</code>、<code>CommonLog</code>等日志框架，简化了我们的开发成本。</p><p><strong>核心思路：</strong></p><ul><li>门面系统。接收外部请求，并将请求转发给适当的子系统进行处理</li><li>子系统。表示某个领域内的功能实现、或者具体子接口实现，比如，订单、支付等，专门处理由门面系统指派的任务。</li></ul><p>简单来讲，引入一个外观角色来简化客户端与子系统之间的交互，为复杂的子系统调用提供一个统一的入口。</p><p><strong>可能很多人有疑问，这个不就是代理模式吗？</strong></p><p>门面模式可能代理的是多个接口，而代理模式通常只是代理一个接口。</p><p><strong>业务场景：</strong></p><p>移动互联网，我们都习惯了在线支付，相信很多人在付款时都听过这么一句话，”微信支付还是支付宝“，商户根据用户反馈再针对性选择收款渠道。</p><p>是不是很繁琐，为了解决这个问题，市面就有了聚合支付（该领域做非常棒的是收钱吧），整个业务模式就是这节要讲的门面模式，不管你用什么软件支付，只要打开付款二维码即可，收钱吧底层识别解析二维码，并根据扫描结果自动适配对应的收款渠道，完成用户的扣款动作，确实带来不错的用户体验。</p><div align="left"><img src="`+t+'" width="600px"></div><p><strong>优点：</strong></p><ul><li>简化复杂系统，提供统一接口规范。比如：<code>JPA</code>提供了统一Java持久层API，底层适配多样化的存储系统。</li><li>复杂的业务逻辑由内部子系统消化，只要对外接口规范不变，外部调用方不需要频繁修改</li><li>扩展性较好，类似于<code>SPI架构</code>一样，支持水平扩展。</li><li>较高的平滑过渡性。比如：我们要对老的系统架构升级，开发一系列新接口来替换原来的老接口，过渡期需要新老灰度测试、流量切换、平滑升级，可以采用该模式。门面模式在兼容多套系统、系统重构方面是把利器。</li></ul><h2 id="_5、代理模式" tabindex="-1"><a class="header-anchor" href="#_5、代理模式"><span>5、代理模式</span></a></h2><p><strong>定义：</strong></p><blockquote><p>为其他对象提供一种代理以控制对这个对象的访问</p></blockquote><p><strong>现实场景：</strong></p><ul><li>房产中介</li><li>包工头</li></ul><p><strong>核心思路：</strong></p><ul><li>抽象主题类（AbstractSubject）：定义接口方法，供客户端使用</li><li>主题实现类（RealSubject）：实现了<code>抽象主题类</code>的接口方法</li><li>代理类（Proxy）：实现了<code>抽象主题类</code>的接口方法，内部包含<code>主题实现类</code>的逻辑， 同时还包含一些自身的扩展操作。</li></ul><blockquote><p>代理模式与适配器模式相似。但适配器模式是转换为新的接口，而代理模式不会改变原有接口。</p></blockquote><div align="left"><img src="'+o+`" width="600px"></div><p><strong>代码示例：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/**</span></span>
<span class="line"><span> * @author 微信公众号：老马啸西风</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>public interface AbstractSubject {</span></span>
<span class="line"><span>    void execute();</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>public class RealSubject implements AbstractSubject {</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public void execute() {</span></span>
<span class="line"><span>        System.out.println(&quot;我是老马，我要努力工作！&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>public class Proxy implements AbstractSubject {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    private AbstractSubject abstractSubject;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public Proxy(AbstractSubject abstractSubject) {</span></span>
<span class="line"><span>        this.abstractSubject = abstractSubject;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public void execute() {</span></span>
<span class="line"><span>        System.out.println(&quot;老板给老马分配工作了。。。&quot;);</span></span>
<span class="line"><span>        abstractSubject.execute();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>按使用职责分为静态代理和动态代理。</p><ul><li>静态代理，代理类需要自己编写代码完成。</li><li>动态代理，代理类通过 Proxy#newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h) 方法生成。</li><li>JDK实现的代理中不管是静态代理还是动态代理，都是面向接口编程。CGLib可以不限制一定是接口。</li></ul><p><strong>优点：</strong></p><ul><li>职责清晰</li><li>高扩展，只要实现了接口，都可以用代理</li><li>智能化，动态代理</li><li>降低了对象的直接耦合</li></ul><p><strong>适用场景：</strong></p><ul><li>远程代理。无法直接操作远程对象。比如：Dubbo、gRPC，提供远程服务，客户端调用时需要走参数组装、序列化、网络传输等操作，这些通用逻辑都可以封装到代理中，客户端调用代理对象访问远程服务，就像调用本地对象一样方便。</li><li>保护代理。当客户端通过代理对象访问原始对象时，代理对象会根据规则判断客户端是否有权限访问。比如：防火墙</li><li>日志代理。比如：日志监控，正常业务访问时，调用代理，增加一些额外的日志记录功能。</li><li>虚拟代理，适用于延迟初始化，用小对象表示大对象的场景，减少资源损耗，提升运行速度。</li><li>不希望改变原对象，但需要增加类似于权限控制、日志、流控等附加功能时，可以使用代理模式。</li></ul><h2 id="_6、责任链模式" tabindex="-1"><a class="header-anchor" href="#_6、责任链模式"><span>6、责任链模式</span></a></h2><p><strong>定义：</strong></p><blockquote><p>责任链模式是一种行为设计模式，将所有请求的处理者通过前一对象记住其下一个对象的引用而连成一条链。收到请求后，每个处理者均可对请求进行处理，或将其传递给链中的下个处理者。</p></blockquote><p>责任链模式是对数据结构中的<code>链表</code>结构的具体应用。</p><p><strong>核心思路：</strong></p><ul><li>抽象处理者（Handler）：定义一个接口，内部包含处理方法和下一个节点的引用对象</li><li>具体处理者（ConcreteHandler）：<code>抽象处理者</code>的实现子类，判断本次请求是否处理，如果需要则处理，否则跳过，然后将请求转发给下一个节点。</li></ul><div align="left"><img src="`+v+'" width="600px"></div><p><strong>优点：</strong></p><ul><li>降低了对象之间的耦合度。链上各个节点各司其职，通过上下文传递数据，避免直接依赖。</li><li>增强系统的可扩展性。如果有新的业务需求，只需要在合适的位置增加一个链节点即可，满足开闭原则。</li><li>灵活性强。如果业务有变化，需要对工作流程做调整，只需要动态调整链上节点的次序即可。甚至为了满足多元化业务的多样化需求，我们可以为不同的业务类型定义自己的专属执行顺序。</li><li>简化了对象之间的连接。每个对象只需保存下一个节点的引用，而不需保持所有节点。</li><li>责任明确。每个节点只需处理自己的工作，如果不处理则传递给下一个对象。明确各类的责任范围，符合类的单一职责原则。</li></ul><p>像我们常见的网关架构推荐使用该模式，通过服务编排，可以自由地在任意位置添加或移除节点，满足一系列个性化功能。</p><div align="left"><img src="'+u+'" width="600px"></div><h2 id="写在最后" tabindex="-1"><a class="header-anchor" href="#写在最后"><span>写在最后</span></a></h2><p>设计模式很多人都学习过，但项目实战时总是晕晕乎乎，原因在于没有了解其核心是什么，底层逻辑是什么，《设计模式：可复用面向对象的基础》有讲过，</p><blockquote><p>在设计中思考什么应该变化，并封装会发生变化的概念。</p></blockquote><p><strong>软件架构的精髓：找到变化，封装变化。</strong></p><p>业务千变万化，没有固定的编码答案，千万不要硬套设计模式。无论选择哪一种设计模式，尽量要能满足<code>SOLID</code>原则，自我review是否满足业务的持续扩展性。有句话说的好，“不论白猫黑猫，能抓老鼠就是好猫。”</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><ul><li><a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=710&amp;sid=20-h5Url-0&amp;buyFrom=2&amp;pageId=1pz4#/detail/pc?id=6882" target="_blank" rel="noopener noreferrer">17 | 单例模式：如何有效进行程序初始化？</a></li><li><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1281319134822433" target="_blank" rel="noopener noreferrer">廖雪峰的官方网站</a></li></ul>',100)]))}const _=a(b,[["render",m]]),f=JSON.parse('{"path":"/posts/interview/arch/designmodel/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%EF%BC%88%E7%AC%AC%E4%BA%8C%E6%9C%9F%EF%BC%89.html","title":"软件设计模式系列（第二期）","lang":"zh-CN","frontmatter":{"title":"软件设计模式系列（第二期）","description":"软件设计模式系列（第二期） 作者：老马 公众号：老马啸西风 博客：https://houbb.github.io/ 人生理念：知行合一 面对复杂的业务场景，千变万化的客户需求，如何以一变应万变，以最小的开发成本快速落地实现，同时保证系统有着较低的复杂度，能够保证系统后续de持续迭代能力，让系统拥有较高的可扩展性。 这些是一个合格的架构师必须修炼的基础内...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/vpress/posts/interview/arch/designmodel/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%EF%BC%88%E7%AC%AC%E4%BA%8C%E6%9C%9F%EF%BC%89.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"软件设计模式系列（第二期）"}],["meta",{"property":"og:description","content":"软件设计模式系列（第二期） 作者：老马 公众号：老马啸西风 博客：https://houbb.github.io/ 人生理念：知行合一 面对复杂的业务场景，千变万化的客户需求，如何以一变应万变，以最小的开发成本快速落地实现，同时保证系统有着较低的复杂度，能够保证系统后续de持续迭代能力，让系统拥有较高的可扩展性。 这些是一个合格的架构师必须修炼的基础内..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-30T09:38:40.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-30T09:38:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"软件设计模式系列（第二期）\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-30T09:38:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743327520000,"updatedTime":1743327520000,"contributors":[{"name":"houbb","username":"houbb","email":"houbinbin.echo@gmail.com","commits":1,"url":"https://github.com/houbb"}]},"readingTime":{"minutes":12.84,"words":3853},"filePathRelative":"posts/interview/arch/designmodel/软件设计模式系列（第二期）.md","localizedDate":"2025年3月30日","excerpt":"\\n<blockquote>\\n<p>作者：老马<br>\\n<br>公众号：老马啸西风<br>\\n<br> 博客：<a href=\\"https://houbb.github.io/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://houbb.github.io/</a><br>\\n<br> 人生理念：知行合一</p>\\n</blockquote>\\n<p>面对复杂的业务场景，千变万化的客户需求，如何以一变应万变，以最小的开发成本快速落地实现，同时保证系统有着较低的复杂度，能够保证系统后续de持续迭代能力，让系统拥有较高的可扩展性。</p>\\n<p><code>这些是一个合格的架构师必须修炼的基础内功，但是如何修炼这门神功？？？</code></p>","autoDesc":true}');export{_ as comp,f as data};
