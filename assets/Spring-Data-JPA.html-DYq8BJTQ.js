import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as i}from"./app-NomDibRt.js";const t="/vpress/images/spring/springboot/19-2.jpg",r="/vpress/images/spring/springboot/19-1.jpg",d="/vpress/images/spring/springboot/19-4.jpg",p={};function l(o,e){return i(),a("div",null,e[0]||(e[0]=[n('<h1 id="还在用mybatis-spring-data-jpa-让你的开发效率提升数倍" tabindex="-1"><a class="header-anchor" href="#还在用mybatis-spring-data-jpa-让你的开发效率提升数倍"><span>还在用Mybatis? Spring Data JPA 让你的开发效率提升数倍！</span></a></h1><blockquote><p>作者：老马<br><br>公众号：老马啸西风<br><br> 博客：<a href="https://houbb.github.io/" target="_blank" rel="noopener noreferrer">https://houbb.github.io/</a><br><br> 人生理念：知行合一</p></blockquote><p><code>Spring Boot 作为主流微服务框架，拥有成熟的社区生态。市场应用广泛，为了方便大家，整理了一个基于spring boot的常用中间件快速集成入门系列手册，涉及RPC、缓存、消息队列、分库分表、注册中心、分布式配置等常用开源组件，大概有几十篇文章，陆续会开放出来，感兴趣同学可以关注&amp;收藏</code></p><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>JPA (Java Persistence API) 是 Sun 官方提出的 Java 持久化规范。它为 Java 开发人员提供了一种对象/关联映射工具来管理 Java 应用中的关系数据。他的出现主要是为了简化现有的持久化开发工作和整合 ORM 技术，结束现在 Hibernate，TopLink，JDO 等 ORM 框架各自为营的凌乱局面。JPA 在充分吸收了现有 Hibernate，TopLink，JDO 等ORM框架的基础上发展而来的，具有易于使用，伸缩性强等优点。</p><p>Spring Data JPA 是 Spring 基于 ORM 框架、JPA 规范的基础上封装的一套 JPA 应用框架，底层使用了 Hibernate 的 JPA 技术实现，可使开发者用极简的代码即可实现对数据的访问和操作。它提供了包括<strong>增、删、改、查</strong>等在内的常用功能，易于扩展，极大提高开发效率。</p><p>Spring Data Common 是 Spring Data 所有模块的公共部分，该项目提供了基于 Spring 的共享基础设施，它提供了基于 repository 接口以 DB 操作的一些封装，以及一个坚持在 Java 实体类上标注元数据的模型。</p><blockquote><p>Spring Data 不仅对传统的数据库访问技术如 JDBC、Hibernate、JDO、TopLick、JPA、MyBatis 做了很好的支持和扩展、抽象、提供方便的操作方法，还对 MongoDb、KeyValue、Redis、LDAP、Cassandra 等非关系数据的 NoSQL 做了不同的实现版本，方便我们开发者触类旁通。</p></blockquote><h2 id="spring-data-jpa-优势" tabindex="-1"><a class="header-anchor" href="#spring-data-jpa-优势"><span>Spring Data JPA 优势</span></a></h2><ul><li><p>使用广泛，大厂必备。借助于spring boot广泛受众人群，与 Spring Boot 天然集成的 Spring Data JPA 也逐渐走进了 Java 开发者的视野。JPA 可以使团队在框架约定下进行开发，几乎很难写出有性能瓶颈的 SQL。</p></li><li><p>提升开发效率。刚开始时学习语法（比如方法名、SQL 逻辑）要花点时间，一旦完成系统化的学习后。你可以熟练使用 JPA，那么半小时甚至几分钟就可以写好查询方法了；再配合测试用例，你的开发质量也会明显提高很多。</p></li><li><p>提升技术水平。Spring Data 对数据库进行了封装，统一了关系型数据库和非关系型数据的接口、公共的部分。你会发现，一旦掌握了Spring Data JPA框架后，你可以轻易实现对<code>Redis</code>、<code>MongoDB</code>等NoSQL的操作，他们底层依赖了统一的 <code>Spring Data Common</code>。</p></li></ul><p><strong>Spring Data和JPA的结构关系：</strong></p><div align="left"><img src="'+t+`" width="700px"></div><h2 id="代码演示" tabindex="-1"><a class="header-anchor" href="#代码演示"><span>代码演示</span></a></h2><h3 id="外部依赖" tabindex="-1"><a class="header-anchor" href="#外部依赖"><span>外部依赖</span></a></h3><p>Spring Boot 已经为 JPA 封装了starter组件，只需在 pom.xml 文件中添加jar版本依赖即可：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span>
<span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;mysql&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span>
<span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;commons-dbcp2&lt;/artifactId&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Spring Boot Starter Data JPA 依赖 Spring Data JPA；而 Spring Data JPA 依赖 Spring Data Commons。</p></blockquote><h3 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件"><span>配置文件</span></a></h3><p>在配置文件 application.yaml 中配置 JPA 的相关参数，具体内容如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>spring:</span></span>
<span class="line"><span>  datasource:</span></span>
<span class="line"><span>    driver-class-name: com.mysql.cj.jdbc.Driver</span></span>
<span class="line"><span>    url: jdbc:mysql://127.0.0.1:3306/ds0?characterEncoding=utf-8</span></span>
<span class="line"><span>    username: root</span></span>
<span class="line"><span>    password: 111111</span></span>
<span class="line"><span>    # Hikari config</span></span>
<span class="line"><span>    type: com.zaxxer.hikari.HikariDataSource</span></span>
<span class="line"><span>    hikari:</span></span>
<span class="line"><span>      minimum-idle: 10</span></span>
<span class="line"><span>      maximum-pool-size: 200</span></span>
<span class="line"><span>      idle-timeout: 60000</span></span>
<span class="line"><span>      pool-name: MarketingHikariCP</span></span>
<span class="line"><span>      max-lifetime: 1800000</span></span>
<span class="line"><span>      connection-timeout: 2000</span></span>
<span class="line"><span>      connection-test-query: select 1</span></span>
<span class="line"><span>  jpa:</span></span>
<span class="line"><span>    show-sql: true  #在控制台打印 sql 语句</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>数据库连接用的是 JDBC，连接池用的是 HikariCP，强依赖 Hibernate；</p></blockquote><p><strong>工程结构如图所示：</strong></p><div align="left"><img src="`+r+`" width="500px"></div><h3 id="定义实体对象" tabindex="-1"><a class="header-anchor" href="#定义实体对象"><span>定义实体对象</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@Data</span></span>
<span class="line"><span>@Builder</span></span>
<span class="line"><span>@AllArgsConstructor</span></span>
<span class="line"><span>@NoArgsConstructor</span></span>
<span class="line"><span>@Entity</span></span>
<span class="line"><span>@JsonIgnoreProperties(value = {&quot;hibernateLazyInitializer&quot;})</span></span>
<span class="line"><span>public class User {</span></span>
<span class="line"><span>    @Id // @Id注解指明这个属性映射为数据库的主键。</span></span>
<span class="line"><span>    @GeneratedValue(strategy = GenerationType.IDENTITY)</span></span>
<span class="line"><span>    private Long id;</span></span>
<span class="line"><span>    // 名称</span></span>
<span class="line"><span>    private String userName;</span></span>
<span class="line"><span>    // 年龄</span></span>
<span class="line"><span>    private Integer age;</span></span>
<span class="line"><span>    // 地址</span></span>
<span class="line"><span>    private String address;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注解说明：</strong></p><ul><li><p>@Entity 是一个类注解，用来注解该类是一个实体类用来进行和数据库中的表建立关联关系，首次启动项目的时候，默认会在数据中生成一个同实体类相同名字的表（table），也可以通过注解中的 name 属性来修改表（table）名称， 如@Entity(name=“user”) , 这样数据库中表的名称则是 user 。该注解十分重要，如果没有该注解首次启动项目的时候你会发现数据库没有生成对应的表。</p></li><li><p>@Table 注解也是一个类注解，该注解可以用来修改表的名字，该注解完全可以忽略掉不用，@Entity 注解已具备该注解的功能。</p></li><li><p>@Id 类的属性注解，该注解表明该属性字段是一个主键，该属性必须具备，不可缺少。</p></li><li><p>@GeneratedValue 该注解通常和 @Id 主键注解一起使用，用来定义主键的呈现形式，该注解通常有多种使用策略，总结如下：</p></li><li><p>@GeneratedValue(strategy= GenerationType.IDENTITY) 该注解由数据库自动生成，主键自增型，在 mysql 数据库中使用最频繁，oracle 不支持。</p></li><li><p>@GeneratedValue(strategy= GenerationType.AUTO) 主键由程序控制，默认的主键生成策略，oracle 默认是序列化的方式，mysql 默认是主键自增的方式。</p></li><li><p>@GeneratedValue(strategy= GenerationType.SEQUENCE) 根据底层数据库的序列来生成主键，条件是数据库支持序列，Oracle支持，Mysql不支持。</p></li><li><p>@GeneratedValue(strategy= GenerationType.TABLE) 使用一个特定的数据库表格来保存主键，较少使用。</p></li><li><p>@Column 是一个类的属性注解，该注解可以定义一个字段映射到数据库属性的具体特征，比如字段长度，映射到数据库时属性的具体名字等。</p></li><li><p>@Transient 是一个属性注解，该注解标注的字段不会被映射到数据库当中。</p></li></ul><h3 id="数据访问层-userrepository" tabindex="-1"><a class="header-anchor" href="#数据访问层-userrepository"><span>数据访问层 UserRepository</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>public interface UserRepository extends JpaRepository&lt;User, Long&gt; {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    List&lt;User&gt; findByUserName(String userName);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    List&lt;User&gt; findByUserNameAndAddress(String userName, String address);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 使用 @Query查询，参数按照名称绑定</span></span>
<span class="line"><span>    @Query(&quot;select u from User u where u.userName= :userName and u.address= :address&quot;)</span></span>
<span class="line"><span>    List&lt;User&gt; queryByUserNameAndAddress(@Param(&quot;userName&quot;) String userName, @Param(&quot;address&quot;) String address);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="层次结构类图" tabindex="-1"><a class="header-anchor" href="#层次结构类图"><span>层次结构类图</span></a></h3><div align="left"><img src="`+d+`" width="700px"></div><p><code>UserRepository</code> 接口继承 <code>JpaRepository </code>，<code>JpaRepository </code>继承了接口<code>PagingAndSortingRepository </code>和<code>QueryByExampleExecutor </code>。而<code>PagingAndSortingRepository </code>又继承<code>CrudRepository</code>。</p><ul><li>CrudRepository： 提供了常用的存储层的增、删、改、查 操作方法</li><li>PagingAndSortingRepository：主要用于分页查询、排序查询</li><li>JpaRepository：上面接口是为了兼容 NoSQL 而进行的一些抽象封装。从 JpaRepository 开始是对关系型数据库进行抽象封装。JpaRepository 里面重点新增了批量删除，优化了批量删除的性能，类似于之前 SQL 的 batch 操作，并不是像上面的 deleteAll 来 for 循环删除。其中 flush() 和 saveAndFlush() 提供了手动刷新 session，把对象的值立即更新到数据库里面的机制。</li></ul><p><strong>除了使用继承系统提供的扩展接口类外，还可以采用约定规则方式。</strong></p><p>自定义的简单查询就是根据方法名来自动生成SQL，具体是方法名以 <code>findBy、existsBy、countBy、deleteBy</code> 开头，后面跟具体的条件，举几个例子：</p><table><thead><tr><th>关键字</th><th>方法示例</th><th>JPQL snippet</th></tr></thead><tbody><tr><td>And</td><td>findByLastnameAndFirstname</td><td>… where x.lastname = ?1 and x.firstname = ?2</td></tr><tr><td>Or</td><td>findByLastnameOrFirstname</td><td>… where x.lastname = ?1 or x.firstname = ?2</td></tr><tr><td>Is, Equals</td><td>findByFirstname,findByFirstnameIs,findByFirstnameEquals</td><td>… where x.firstname = ?1</td></tr><tr><td>Between</td><td>findByStartDateBetween</td><td>… where x.startDate between ?1 and ?2</td></tr><tr><td>LessThan</td><td>findByAgeLessThan</td><td>… where x.age &lt; ?1</td></tr><tr><td>LessThanEqual</td><td>findByAgeLessThanEqual</td><td>… where x.age &lt;= ?1</td></tr><tr><td>GreaterThan</td><td>findByAgeGreaterThan</td><td>… where x.age &gt; ?1</td></tr><tr><td>GreaterThanEqual</td><td>findByAgeGreaterThanEqual</td><td>… where x.age &gt;= ?1</td></tr><tr><td>After</td><td>findByStartDateAfter</td><td>… where x.startDate &gt; ?1</td></tr><tr><td>Before</td><td>findByStartDateBefore</td><td>… where x.startDate &lt; ?1</td></tr><tr><td>IsNull, Null</td><td>findByAge(Is)Null</td><td>… where x.age is null</td></tr><tr><td>IsNotNull, NotNull</td><td>findByAge(Is)NotNull</td><td>… where x.age not null</td></tr><tr><td>Like</td><td>findByFirstnameLike</td><td>… where x.firstname like ?1</td></tr><tr><td>NotLike</td><td>findByFirstnameNotLike</td><td>… where x.firstname not like ?1</td></tr><tr><td>StartingWith</td><td>findByFirstnameStartingWith</td><td>… where x.firstname like ?1 (parameter bound with appended %)</td></tr><tr><td>EndingWith</td><td>findByFirstnameEndingWith</td><td>… where x.firstname like ?1 (parameter bound with prepended %)</td></tr><tr><td>Containing</td><td>findByFirstnameContaining</td><td>… where x.firstname like ?1 (parameter bound wrapped in %)</td></tr><tr><td>OrderBy</td><td>findByAgeOrderByLastnameDesc</td><td>… where x.age = ?1 order by x.lastname desc</td></tr><tr><td>Not</td><td>findByLastnameNot</td><td>… where x.lastname &lt;&gt; ?1</td></tr><tr><td>In</td><td>findByAgeIn(Collection ages)</td><td>… where x.age in ?1</td></tr><tr><td>NotIn</td><td>findByAgeNotIn(Collection ages)</td><td>… where x.age not in ?1</td></tr><tr><td>True</td><td>findByActiveTrue()</td><td>… where x.active = true</td></tr><tr><td>False</td><td>findByActiveFalse()</td><td>… where x.active = false</td></tr><tr><td>IgnoreCase</td><td>findByFirstnameIgnoreCase</td><td>… where UPPER(x.firstame) = UPPER(?1)</td></tr></tbody></table><p>Spring Data JPA 已经帮我们实现了分页，在查询的方法中，需要传入参数<code>PageRequest</code>，当查询中有多个参数的时候<code>PageRequest</code>建议做为最后一个参数传入。<code>PageRequest</code>是 spring 封装的分页实现类，使用的时候需要传入页数、每页条数和排序规则</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@RequestMapping(&quot;/page&quot;)</span></span>
<span class="line"><span>public Page&lt;User&gt; page(@RequestParam(&quot;pageNo&quot;) int pageNo, @RequestParam(&quot;pageSize&quot;) int pageSize) {</span></span>
<span class="line"><span>   Page&lt;User&gt; pageUser = userRepository.findAll(new PageRequest(pageNo, pageSize));</span></span>
<span class="line"><span>   return pageUser;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Spring data 大部分的 SQL 都可以根据方法名定义的方式来实现，但是有些复杂业务场景需要使用自定义的 SQL 来查询，spring data 也是支持的。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@Query(&quot;select u from User u where u.userName= :userName and u.address= :address&quot;)</span></span>
<span class="line"><span>List&lt;User&gt; queryByUserNameAndAddress(@Param(&quot;userName&quot;) String userName, @Param(&quot;address&quot;) String address);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="项目源码" tabindex="-1"><a class="header-anchor" href="#项目源码"><span>项目源码</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>https://github.com/aalansehaiyang/spring-boot-bulking  </span></span>
<span class="line"><span></span></span>
<span class="line"><span>模块：spring-boot-bulking-data-jpa</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,42)]))}const u=s(p,[["render",l]]),h=JSON.parse('{"path":"/posts/interview/spring/springboot/Spring-Data-JPA.html","title":"Spring Data JPA 让你的开发效率提升数倍！","lang":"zh-CN","frontmatter":{"title":"Spring Data JPA 让你的开发效率提升数倍！","description":"还在用Mybatis? Spring Data JPA 让你的开发效率提升数倍！ 作者：老马 公众号：老马啸西风 博客：https://houbb.github.io/ 人生理念：知行合一 Spring Boot 作为主流微服务框架，拥有成熟的社区生态。市场应用广泛，为了方便大家，整理了一个基于spring boot的常用中间件快速集成入门系列手册，涉...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/vpress/posts/interview/spring/springboot/Spring-Data-JPA.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"Spring Data JPA 让你的开发效率提升数倍！"}],["meta",{"property":"og:description","content":"还在用Mybatis? Spring Data JPA 让你的开发效率提升数倍！ 作者：老马 公众号：老马啸西风 博客：https://houbb.github.io/ 人生理念：知行合一 Spring Boot 作为主流微服务框架，拥有成熟的社区生态。市场应用广泛，为了方便大家，整理了一个基于spring boot的常用中间件快速集成入门系列手册，涉..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-30T09:38:40.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-30T09:38:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring Data JPA 让你的开发效率提升数倍！\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-30T09:38:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743327520000,"updatedTime":1743327520000,"contributors":[{"name":"houbb","username":"houbb","email":"houbinbin.echo@gmail.com","commits":1,"url":"https://github.com/houbb"}]},"readingTime":{"minutes":7.57,"words":2270},"filePathRelative":"posts/interview/spring/springboot/Spring-Data-JPA.md","localizedDate":"2025年3月30日","excerpt":"\\n<blockquote>\\n<p>作者：老马<br>\\n<br>公众号：老马啸西风<br>\\n<br> 博客：<a href=\\"https://houbb.github.io/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://houbb.github.io/</a><br>\\n<br> 人生理念：知行合一</p>\\n</blockquote>\\n<p><code>Spring Boot 作为主流微服务框架，拥有成熟的社区生态。市场应用广泛，为了方便大家，整理了一个基于spring boot的常用中间件快速集成入门系列手册，涉及RPC、缓存、消息队列、分库分表、注册中心、分布式配置等常用开源组件，大概有几十篇文章，陆续会开放出来，感兴趣同学可以关注&amp;收藏</code></p>","autoDesc":true}');export{u as comp,h as data};
