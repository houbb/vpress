import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as e,o as i}from"./app-NomDibRt.js";const a="/vpress/images/spring/springboot/2-1.jpg",r="/vpress/images/spring/springboot/2-3.jpg",d="/vpress/images/spring/springboot/2-2.jpg",l={};function p(o,s){return i(),n("div",null,s[0]||(s[0]=[e(`<h1 id="数据库连接池为什么首选-druid" tabindex="-1"><a class="header-anchor" href="#数据库连接池为什么首选-druid"><span>数据库连接池为什么首选 Druid ？</span></a></h1><blockquote><p>作者：老马<br><br>公众号：老马啸西风<br><br> 博客：<a href="https://houbb.github.io/" target="_blank" rel="noopener noreferrer">https://houbb.github.io/</a><br><br> 人生理念：知行合一</p></blockquote><p><code>Spring Boot 作为主流微服务框架，拥有成熟的社区生态。市场应用广泛，为了方便大家，整理了一个基于spring boot的常用中间件快速集成入门系列手册，涉及RPC、缓存、消息队列、分库分表、注册中心、分布式配置等常用开源组件，大概有几十篇文章，陆续会开放出来，感兴趣同学可以关注&amp;收藏</code></p><h2 id="_1、简介" tabindex="-1"><a class="header-anchor" href="#_1、简介"><span>1、简介</span></a></h2><p>Druid是阿里巴巴的一个开源项目，<strong>号称为监控而生的数据库连接池，在功能、性能、扩展性方面都超过其他</strong>，例如 DBCP、C3P0、BoneCP、Proxool、JBoss、DataSource 等连接池，而且Druid已经在阿里巴巴部署了超过600个应用，通过了极为严格的考验，这才收获了大家的青睐！</p><p><strong>Druid是一个JDBC组件，包含三个部分：</strong></p><ul><li>DruidDriver 代理Driver，能够提供基于Filter－Chain模式的插件体系。</li><li>DruidDataSource 高效管理的数据库连接池。</li><li>SQLParser SQL语法分析</li></ul><p><strong>强大的监控特性</strong></p><p>Druid内置了一个功能强大的<code>StatFilter</code>插件可以监控数据库访问性能，可以清楚知道连接池和SQL的工作情况。</p><p>监控SQL的执行时间、ResultSet持有时间、返回行数、更新行数、错误次数、错误堆栈信息。</p><p>SQL执行的耗时区间分布。什么是耗时区间分布呢？比如说，某个SQL执行了1000次，其中0-1毫秒区间50次，1-10毫秒800次，10-100毫秒100次，100-1000毫秒30次，1-10秒15次，10秒以上5次。通过耗时区间分布，能够非常清楚知道SQL的执行耗时情况。</p><p>监控连接池的物理连接创建和销毁次数、逻辑连接的申请和关闭次数、非空等待次数、PSCache命中率等。</p><p><strong>数据库密码加密</strong></p><p>直接把数据库密码写在配置文件中，容易导致安全问题。<code>DruidDriver</code>和<code>DruidDataSource</code>都支持<code>PasswordCallback</code>。</p><p><strong>SQLParser</strong></p><p>SQL Parser是Druid的一个重要组成部分，它提供了MySql、Oracle、Postgresql、SQL-92的SQL的完整支持，这是一个手写的高性能SQL Parser，支持Visitor模式，使得分析SQL的抽象语法树很方便。简单SQL语句用时10微秒以内，复杂SQL用时30微秒。</p><p>通过Druid提供的SQL Parser可以在JDBC层拦截SQL做相应处理，比如防御SQL注入（WallFilter）、合并统计没有参数化的SQL(StatFilter的mergeSql)、SQL格式化、分库分表。</p><h2 id="_2、依赖集成" tabindex="-1"><a class="header-anchor" href="#_2、依赖集成"><span>2、依赖集成</span></a></h2><p>在pom.xml中引入druid官方提供的Spring Boot Starter组件</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;</span></span>
<span class="line"><span>    &lt;version&gt;1.1.21&lt;/version&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>application.yaml 配置文件配置数据库信息、以及Druid的连接池</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>spring:</span></span>
<span class="line"><span>  datasource:</span></span>
<span class="line"><span>    type: com.alibaba.druid.pool.DruidDataSource</span></span>
<span class="line"><span>    druid:</span></span>
<span class="line"><span>      driver-class-name: com.mysql.cj.jdbc.Driver</span></span>
<span class="line"><span>      url: jdbc:mysql://127.0.0.1:3306/ds0?characterEncoding=utf-8&amp;useSSL=false</span></span>
<span class="line"><span>      username: root</span></span>
<span class="line"><span>      password: 111111</span></span>
<span class="line"><span>      initial-size: 5</span></span>
<span class="line"><span>      min-idle: 5</span></span>
<span class="line"><span>      max-active: 20</span></span>
<span class="line"><span>      max-wait: 60000</span></span>
<span class="line"><span>      time-between-eviction-runs-millis: 60000</span></span>
<span class="line"><span>      min-evictable-idle-time-millis: 300000</span></span>
<span class="line"><span>      validation-query: SELECT &#39;x&#39;</span></span>
<span class="line"><span>      test-while-idle: true</span></span>
<span class="line"><span>      test-on-borrow: false</span></span>
<span class="line"><span>      test-on-return: false</span></span>
<span class="line"><span>      pool-prepared-statements: false</span></span>
<span class="line"><span>      max-pool-prepared-statement-per-connection-size: -1</span></span>
<span class="line"><span>      use-global-data-source-stat: true</span></span>
<span class="line"><span>      connection-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000</span></span>
<span class="line"><span>      filters: stat,wall,log4j</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、druid-配置详解" tabindex="-1"><a class="header-anchor" href="#_3、druid-配置详解"><span>3、Druid 配置详解</span></a></h2><table><thead><tr><th>配置</th><th>缺省值</th><th>说明</th></tr></thead><tbody><tr><td>name</td><td></td><td>如果存在多个数据源，监控的时候可以通过名字来区分开来。如果没有配置，将会生成一个名字，格式是：”DataSource-“ + System.identityHashCode(this)</td></tr><tr><td>url</td><td></td><td>连接数据库的url，不同数据库不一样</td></tr><tr><td>username</td><td></td><td>连接数据库的用户名</td></tr><tr><td>password</td><td></td><td>连接数据库的密码。如果你不希望密码直接写在配置文件中，可以使用ConfigFilter</td></tr><tr><td>driverClassName</td><td></td><td>根据url自动识别 ，这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName</td></tr><tr><td>initialSize</td><td>0</td><td>初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时</td></tr><tr><td>maxActive</td><td>8</td><td>最大连接池数</td></tr><tr><td>minIdle</td><td></td><td>最小连接池数</td></tr><tr><td>maxWait</td><td></td><td>获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。</td></tr><tr><td>poolPreparedStatements</td><td>false</td><td>是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。</td></tr><tr><td>maxPoolPreparedStatementPerConnectionSize</td><td>-1</td><td>要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100</td></tr><tr><td>validationQuery</td><td></td><td>用来检测连接是否有效的sql，要求是一个查询语句，常用select ‘x’。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用。</td></tr><tr><td>validationQueryTimeout</td><td></td><td>单位：秒，检测连接是否有效的超时时间。底层调用jdbc Statement对象的void setQueryTimeout(int seconds)方法</td></tr><tr><td>testOnBorrow</td><td>true</td><td>申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</td></tr><tr><td>testOnReturn</td><td>false</td><td>归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</td></tr><tr><td>testWhileIdle</td><td>false</td><td>建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</td></tr><tr><td>keepAlive</td><td>false （1.0.28）</td><td>连接池中的minIdle数量以内的连接，空闲时间超过minEvictableIdleTimeMillis，则会执行keepAlive操作。</td></tr><tr><td>timeBetweenEvictionRunsMillis</td><td>1分钟（1.0.14）</td><td>有两个含义：1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明</td></tr><tr><td>numTestsPerEvictionRun</td><td>30分钟（1.0.14）</td><td>不再使用，一个DruidDataSource只支持一个EvictionRun</td></tr><tr><td>minEvictableIdleTimeMillis</td><td></td><td>连接保持空闲而不被驱逐的最小时间</td></tr><tr><td>connectionInitSqls</td><td></td><td>物理连接初始化的时候执行的sql</td></tr><tr><td>exceptionSorter</td><td>根据dbType自动识别</td><td>当数据库抛出一些不可恢复的异常时，抛弃连接</td></tr><tr><td>filters</td><td></td><td>属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：监控统计用的filter:stat， 日志用的filter:log4j ， 防御sql注入的filter:wall</td></tr><tr><td>proxyFilters</td><td></td><td>类型是List，如果同时配置了filters和proxyFilters，是组合关系，并非替换关系</td></tr></tbody></table><p>Druid提供以下几种Filter信息：</p><table><thead><tr><th>别名</th><th>Filter类名</th></tr></thead><tbody><tr><td>default</td><td>com.alibaba.druid.filter.stat.StatFilter</td></tr><tr><td>stat</td><td>com.alibaba.druid.filter.stat.StatFilter</td></tr><tr><td>mergeStat</td><td>com.alibaba.druid.filter.stat.MergeStatFilter</td></tr><tr><td>encoding</td><td>com.alibaba.druid.filter.encoding.EncodingConvertFilter</td></tr><tr><td>log4j</td><td>com.alibaba.druid.filter.logging.Log4jFilter</td></tr><tr><td>log4j2</td><td>com.alibaba.druid.filter.logging.Log4j2Filter</td></tr><tr><td>slf4j</td><td>com.alibaba.druid.filter.logging.Slf4jLogFilter</td></tr><tr><td>commonlogging</td><td>com.alibaba.druid.filter.logging.CommonsLogFilter</td></tr><tr><td>wall</td><td>com.alibaba.druid.wall.WallFilter</td></tr></tbody></table><h2 id="_4、druid-监控" tabindex="-1"><a class="header-anchor" href="#_4、druid-监控"><span>4、Druid 监控</span></a></h2><p>支持多种形式，本文列举的是java类创建Bean实例方式。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@Bean</span></span>
<span class="line"><span>public ServletRegistrationBean druidServlet() {</span></span>
<span class="line"><span>    logger.info(&quot;init Druid Servlet Configuration &quot;);</span></span>
<span class="line"><span>    ServletRegistrationBean servletRegistrationBean = new ServletRegistrationBean();</span></span>
<span class="line"><span>    servletRegistrationBean.setServlet(new StatViewServlet());</span></span>
<span class="line"><span>    servletRegistrationBean.addUrlMappings(&quot;/druid/*&quot;);</span></span>
<span class="line"><span>    Map&lt;String, String&gt; initParameters = new HashMap&lt;String, String&gt;();</span></span>
<span class="line"><span>    initParameters.put(&quot;loginUsername&quot;, &quot;admin&quot;);// 用户名</span></span>
<span class="line"><span>    initParameters.put(&quot;loginPassword&quot;, &quot;admin&quot;);// 密码</span></span>
<span class="line"><span>    initParameters.put(&quot;resetEnable&quot;, &quot;false&quot;);// 禁用HTML页面上的“Reset All”功能</span></span>
<span class="line"><span>    initParameters.put(&quot;allow&quot;, &quot;&quot;); // IP白名单 (没有配置或者为空，则允许所有访问)</span></span>
<span class="line"><span>    //initParameters.put(&quot;deny&quot;, &quot;192.168.20.38&quot;);// IP黑名单 (存在共同时，deny优先于allow)</span></span>
<span class="line"><span>    servletRegistrationBean.setInitParameters(initParameters);</span></span>
<span class="line"><span>    return servletRegistrationBean;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@Bean</span></span>
<span class="line"><span>public FilterRegistrationBean filterRegistrationBean() {</span></span>
<span class="line"><span>    FilterRegistrationBean filterRegistrationBean = new FilterRegistrationBean();</span></span>
<span class="line"><span>    filterRegistrationBean.setFilter(new WebStatFilter());</span></span>
<span class="line"><span>    filterRegistrationBean.addUrlPatterns(&quot;/*&quot;);</span></span>
<span class="line"><span>    filterRegistrationBean.addInitParameter(&quot;exclusions&quot;, &quot;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&quot;);</span></span>
<span class="line"><span>    return filterRegistrationBean;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以采用另一种方式，在<code>application.properties</code>中添加Druid的监控配置</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># druid连接池监控</span></span>
<span class="line"><span>spring.datasource.druid.stat-view-servlet.login-username=admin</span></span>
<span class="line"><span>spring.datasource.druid.stat-view-servlet.login-password=admin</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 配置 StatFilter</span></span>
<span class="line"><span>spring.datasource.druid.filter.stat.log-slow-sql=true</span></span>
<span class="line"><span>spring.datasource.druid.filter.stat.slow-sql-millis=2000</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 排除一些静态资源，以提高效率</span></span>
<span class="line"><span>spring.datasource.druid.web-stat-filter.exclusions=*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置完成后， 并完成相关的数据库操作配置， 启动Spring Boot应用程序。</p><p>访问Druid监控后台页面： <code>http://127.0.0.1:8090/druid/sql.html</code> ，</p><p>首先进入登录页，账号和密码在上面的配置项中</p><div align="left"><img src="`+a+'" width="800px"></div><p>输入用户名：admin，密码：admin，可以看到详细的监控页面</p><div align="left"><img src="'+r+'" width="800px"></div><p>首页会展示项目使用的 JDK 版本、数据库驱动、JVM 相关统计信息。根据上面的菜单可以看出 Druid 的功能非常强大，支持数据源、SQL 监控、SQL 防火墙、URI 监控等很多功能。</p><p>我们这里重点介绍一下 SQL 监控，具体的展示信息如下：</p><div align="left"><img src="'+d+`" width="800px"></div><p>这里的 SQL 监控会将项目中具体执行的 SQL 打印出来，展示此 SQL 执行了多少次、每次返回多少数据、执行的时间分布是什么。这些功能非常的实用，方便我们在实际生产中查找出慢 SQL，最后对 SQL 进行调优。</p><h2 id="_5、项目源码" tabindex="-1"><a class="header-anchor" href="#_5、项目源码"><span>5、项目源码</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>https://github.com/aalansehaiyang/spring-boot-bulking  </span></span>
<span class="line"><span></span></span>
<span class="line"><span>模块：spring-boot-bulking-druid</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,43)]))}const b=t(l,[["render",p]]),m=JSON.parse('{"path":"/posts/interview/spring/springboot/Druid.html","title":"数据库连接池为什么首选 Druid","lang":"zh-CN","frontmatter":{"title":"数据库连接池为什么首选 Druid","description":"数据库连接池为什么首选 Druid ？ 作者：老马 公众号：老马啸西风 博客：https://houbb.github.io/ 人生理念：知行合一 Spring Boot 作为主流微服务框架，拥有成熟的社区生态。市场应用广泛，为了方便大家，整理了一个基于spring boot的常用中间件快速集成入门系列手册，涉及RPC、缓存、消息队列、分库分表、注册中...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/vpress/posts/interview/spring/springboot/Druid.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"数据库连接池为什么首选 Druid"}],["meta",{"property":"og:description","content":"数据库连接池为什么首选 Druid ？ 作者：老马 公众号：老马啸西风 博客：https://houbb.github.io/ 人生理念：知行合一 Spring Boot 作为主流微服务框架，拥有成熟的社区生态。市场应用广泛，为了方便大家，整理了一个基于spring boot的常用中间件快速集成入门系列手册，涉及RPC、缓存、消息队列、分库分表、注册中..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-30T09:38:40.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-30T09:38:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据库连接池为什么首选 Druid\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-30T09:38:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743327520000,"updatedTime":1743327520000,"contributors":[{"name":"houbb","username":"houbb","email":"houbinbin.echo@gmail.com","commits":1,"url":"https://github.com/houbb"}]},"readingTime":{"minutes":7.22,"words":2167},"filePathRelative":"posts/interview/spring/springboot/Druid.md","localizedDate":"2025年3月30日","excerpt":"\\n<blockquote>\\n<p>作者：老马<br>\\n<br>公众号：老马啸西风<br>\\n<br> 博客：<a href=\\"https://houbb.github.io/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://houbb.github.io/</a><br>\\n<br> 人生理念：知行合一</p>\\n</blockquote>\\n<p><code>Spring Boot 作为主流微服务框架，拥有成熟的社区生态。市场应用广泛，为了方便大家，整理了一个基于spring boot的常用中间件快速集成入门系列手册，涉及RPC、缓存、消息队列、分库分表、注册中心、分布式配置等常用开源组件，大概有几十篇文章，陆续会开放出来，感兴趣同学可以关注&amp;收藏</code></p>","autoDesc":true}');export{b as comp,m as data};
