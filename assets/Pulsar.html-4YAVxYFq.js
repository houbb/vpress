import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as e,o as i}from"./app-NomDibRt.js";const l="/vpress/images/spring/springboot/10-1.jpg",p={};function r(t,s){return i(),n("div",null,s[0]||(s[0]=[e('<h1 id="为什么放弃kafka-选择pulsar" tabindex="-1"><a class="header-anchor" href="#为什么放弃kafka-选择pulsar"><span>为什么放弃Kafka，选择Pulsar?</span></a></h1><blockquote><p>作者：老马<br><br>公众号：老马啸西风<br><br> 博客：<a href="https://houbb.github.io/" target="_blank" rel="noopener noreferrer">https://houbb.github.io/</a><br><br> 人生理念：知行合一</p></blockquote><p><code>Spring Boot 作为主流微服务框架，拥有成熟的社区生态。市场应用广泛，为了方便大家，整理了一个基于spring boot的常用中间件快速集成入门系列手册，涉及RPC、缓存、消息队列、分库分表、注册中心、分布式配置等常用开源组件，大概有几十篇文章，陆续会开放出来，感兴趣同学可以关注&amp;收藏</code></p><h2 id="pulsar-介绍" tabindex="-1"><a class="header-anchor" href="#pulsar-介绍"><span>Pulsar 介绍</span></a></h2><p>Pulsar 是 Yahoo 在 2013 年创建的，2016年贡献给了 Apache 基金会，目前已经是 Apache 的顶级项目。Yahoo、Verizon、Twitter 等很多公司都在使用 Pulsar 来处理海量消息。</p><p>Pulsar 声称比 Kafka 更快、运行成本更低、解决了很多 Kafka 的痛点。</p><p>Pulsar 非常灵活，可以像<code>Kafka</code> 一样作为分布式日志系统，也可以作为类似<code>RabbitMQ</code> 这类简单的消息系统。</p><p>Pulsar 有多种订阅类型、传递保障、保存策略。</p><h2 id="特性" tabindex="-1"><a class="header-anchor" href="#特性"><span>特性</span></a></h2><ul><li>内置多租户</li></ul><p>不同的团队可以使用同一个集群，互相隔离。支持隔离、认证授权、配额。</p><ul><li>多层架构</li></ul><p>Pulsar 使用特定的数据层来存储 topic 数据，使用了 Apache BookKeeper 作为数据账本。Broker 与存储分离。</p><p>使用分隔机制可以解决集群的扩展、再平衡、维护等问题。也提升了可用性，不会丢失数据。</p><p>因为使用了多层架构，对于 topic 数量没有限制，topic 与存储是分离的，也可以创建非持久化的 topic。</p><ul><li>多层存储</li></ul><p>Kafka 中存储是很昂贵的，所以很少存储冷数据。Pulsar 使用了多层存储，可以自动把旧数据移动到专门的存储设备，例如 Amazon S3，但是对于客户端来讲是透明的，还可以正常使用。</p><ul><li>Functions</li></ul><p>Pulsar Function 是一种部署简单，轻量级计算、对开发人员友好的 API，无需像 Kafka 那样运行自己的流处理引擎。</p><ul><li>安全</li></ul><p>内置了代理、多租户安全机制、可插入的身份验证等功能。</p><ul><li>快速再平衡</li></ul><p>partition 被分为了小块儿，所以再平衡时非常快。</p><ul><li>多系统集成</li></ul><p>例如 Kafka、RabbitMQ 等系统都可以轻松集成。</p><ul><li>支持多种开发语言</li></ul><p>例如 Go、Java、Scala、Node、Python 等等</p><h2 id="为什么选择-pulsar" tabindex="-1"><a class="header-anchor" href="#为什么选择-pulsar"><span>为什么选择 Pulsar</span></a></h2><p>目前业界使用比较多的是 Kafka，主要场景是大数据日志处理，较少用于金融场景。RocketMQ 对 Topic 运营不太友好，特别是不支持按 Topic 删除失效消息，以及不具备宕机 Failover 能力。选 Pulsar 是因为其原生的高一致性，基于 BookKeeper 提供高可用存储服务，采用了存储和服务分离架构方便扩容，同时还支持多种消费模式和多域部署模式。Kafka、RocketMQ 和 Pulsar 的对比如下：</p><div align="left"><img src="'+l+`" width="700px"></div><h2 id="代码演示" tabindex="-1"><a class="header-anchor" href="#代码演示"><span>代码演示</span></a></h2><h3 id="外部依赖" tabindex="-1"><a class="header-anchor" href="#外部依赖"><span>外部依赖</span></a></h3><p>在 <code>pom.xml</code> 中添加 <code>Pulsar</code> 依赖：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;org.apache.pulsar&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;pulsar-client&lt;/artifactId&gt;</span></span>
<span class="line"><span>    &lt;version&gt;2.4.0&lt;/version&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件"><span>配置文件</span></a></h3><p>在配置文件 <code>application.yaml</code>中配置 Pulsar 的相关参数，具体内容如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>pulsar:</span></span>
<span class="line"><span>  service:</span></span>
<span class="line"><span>    url: pulsar://127.0.0.1:6650</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="producer-发送消息" tabindex="-1"><a class="header-anchor" href="#producer-发送消息"><span>Producer 发送消息</span></a></h3><p>生产端提供了一个restful接口，模拟发送一条创建新用户消息。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Long id = Long.valueOf(new Random().nextInt(1000));</span></span>
<span class="line"><span>User user = User.builder().id(id).userName(&quot;TomGE&quot;).age(29).address(&quot;上海&quot;).build();</span></span>
<span class="line"><span>userPulsarMsgProducer.send(user);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>内部通过 <code>@PostConstruct</code> 在应用启动时，初始化 <code>org.apache.pulsar.client.api.Producer</code> 实例，并交由 Spring 容器统一管理。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>public void send(T msg) {</span></span>
<span class="line"><span>    String msgBody = JSON.toJSONString(msg);</span></span>
<span class="line"><span>    try {</span></span>
<span class="line"><span>        MessageId messageId = producer.send(msgBody.getBytes(StandardCharsets.UTF_8));</span></span>
<span class="line"><span>        log.info(&quot;pulsar msg send success, topic:{}, messageId:{}, msg:{}&quot;, getTopic(), messageId, msgBody);</span></span>
<span class="line"><span>    } catch (Throwable e) {</span></span>
<span class="line"><span>        log.error(&quot;pulsar msg send failed, topic:{}, msg:{}&quot;, getTopic(), msgBody);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="producer-发送延迟消息" tabindex="-1"><a class="header-anchor" href="#producer-发送延迟消息"><span>Producer 发送延迟消息</span></a></h3><p>适用于一些有<code>延迟处理</code>要求的业务场景，比如电商交易的<code>自动确认收货</code>，在卖家发出货品后，有15天的观察期，这期间如果买家没有发起逆向流程/申请退款，将会由系统自动触发<code>超时确认收货</code>。</p><p>不同业务场景，设定不同的延迟时间值，可以让消费端在延迟指定时间后才能拉取到消息并进行消费。借助于该框架特性，有效节省开发成本和难度。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>producer.newMessage().deliverAfter(delay, unit)</span></span>
<span class="line"><span>        .value(msgBody.getBytes(StandardCharsets.UTF_8))</span></span>
<span class="line"><span>        .send();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="consumer-消费消息" tabindex="-1"><a class="header-anchor" href="#consumer-消费消息"><span>Consumer 消费消息</span></a></h3><p>系统启动时，自动创建 consumer 消费实例，并埋入 <code>org.apache.pulsar.client.api.MessageListener</code> 接口实现，用于具体的消息消费处理逻辑。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@PostConstruct</span></span>
<span class="line"><span>void init() throws PulsarClientException {</span></span>
<span class="line"><span>    consumer = client.createConsumer(getTopic(), getSubscriptionName(), new DefaultJsonMsgListener());</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span> class DefaultJsonMsgListener implements MessageListener&lt;byte[]&gt; {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        @Override</span></span>
<span class="line"><span>        public void received(Consumer&lt;byte[]&gt; consumer, Message&lt;byte[]&gt; message) {</span></span>
<span class="line"><span>            if (null != message &amp;&amp; null != message.getData() &amp;&amp; message.getData().length != 0) {</span></span>
<span class="line"><span>                String msgBody = new String(message.getValue(), StandardCharsets.UTF_8);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>                log.warn(&quot;topic:{} receive message:{}&quot;, getTopic(), msgBody);</span></span>
<span class="line"><span>                try {</span></span>
<span class="line"><span>                    T msg = JSON.parseObject(msgBody, clazzT);</span></span>
<span class="line"><span>                    handleMsg(msg);</span></span>
<span class="line"><span>                } catch (Exception e) {</span></span>
<span class="line"><span>                    log.error(&quot;handle msg failed, topic:{}, message:{}&quot;, getTopic(), msgBody, e);</span></span>
<span class="line"><span>                    return;</span></span>
<span class="line"><span>                }</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>            try {</span></span>
<span class="line"><span>                // 提交消费位移</span></span>
<span class="line"><span>                consumer.acknowledge(message);</span></span>
<span class="line"><span>            } catch (PulsarClientException e) {</span></span>
<span class="line"><span>                log.error(&quot;topic:{} ack failed&quot;, getTopic(), e);</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="项目源码" tabindex="-1"><a class="header-anchor" href="#项目源码"><span>项目源码</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>https://github.com/aalansehaiyang/spring-boot-bulking  </span></span>
<span class="line"><span></span></span>
<span class="line"><span>模块：spring-boot-bulking-pulsar</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,51)]))}const o=a(p,[["render",r]]),u=JSON.parse('{"path":"/posts/interview/spring/springboot/Pulsar.html","title":"为什么放弃 Kafka，选择 Pulsar","lang":"zh-CN","frontmatter":{"title":"为什么放弃 Kafka，选择 Pulsar","description":"为什么放弃Kafka，选择Pulsar? 作者：老马 公众号：老马啸西风 博客：https://houbb.github.io/ 人生理念：知行合一 Spring Boot 作为主流微服务框架，拥有成熟的社区生态。市场应用广泛，为了方便大家，整理了一个基于spring boot的常用中间件快速集成入门系列手册，涉及RPC、缓存、消息队列、分库分表、注册...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/vpress/posts/interview/spring/springboot/Pulsar.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"为什么放弃 Kafka，选择 Pulsar"}],["meta",{"property":"og:description","content":"为什么放弃Kafka，选择Pulsar? 作者：老马 公众号：老马啸西风 博客：https://houbb.github.io/ 人生理念：知行合一 Spring Boot 作为主流微服务框架，拥有成熟的社区生态。市场应用广泛，为了方便大家，整理了一个基于spring boot的常用中间件快速集成入门系列手册，涉及RPC、缓存、消息队列、分库分表、注册..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-30T09:38:40.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-30T09:38:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"为什么放弃 Kafka，选择 Pulsar\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-30T09:38:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743327520000,"updatedTime":1743327520000,"contributors":[{"name":"houbb","username":"houbb","email":"houbinbin.echo@gmail.com","commits":1,"url":"https://github.com/houbb"}]},"readingTime":{"minutes":4.16,"words":1247},"filePathRelative":"posts/interview/spring/springboot/Pulsar.md","localizedDate":"2025年3月30日","excerpt":"\\n<blockquote>\\n<p>作者：老马<br>\\n<br>公众号：老马啸西风<br>\\n<br> 博客：<a href=\\"https://houbb.github.io/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://houbb.github.io/</a><br>\\n<br> 人生理念：知行合一</p>\\n</blockquote>\\n<p><code>Spring Boot 作为主流微服务框架，拥有成熟的社区生态。市场应用广泛，为了方便大家，整理了一个基于spring boot的常用中间件快速集成入门系列手册，涉及RPC、缓存、消息队列、分库分表、注册中心、分布式配置等常用开源组件，大概有几十篇文章，陆续会开放出来，感兴趣同学可以关注&amp;收藏</code></p>","autoDesc":true}');export{o as comp,u as data};
