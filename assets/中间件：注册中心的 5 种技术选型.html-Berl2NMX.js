import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,a,o}from"./app-NomDibRt.js";const p="/vpress/images/pay/arch/7-1.png",n="/vpress/images/pay/arch/7-2.png",i={};function h(s,t){return o(),r("div",null,t[0]||(t[0]=[a('<h1 id="中间件-注册中心的-5-种技术选型" tabindex="-1"><a class="header-anchor" href="#中间件-注册中心的-5-种技术选型"><span>中间件：注册中心的 5 种技术选型</span></a></h1><blockquote><p>作者：老马<br><br>公众号：老马啸西风<br><br> 博客：<a href="https://houbb.github.io/" target="_blank" rel="noopener noreferrer">https://houbb.github.io/</a><br><br> 人生理念：知行合一</p></blockquote><h2 id="什么是注册中心" tabindex="-1"><a class="header-anchor" href="#什么是注册中心"><span>什么是注册中心？</span></a></h2><p>分布式架构时代，业务垂直化拆分，衍生出非常多的系统。</p><p>举个例子，下图中「服务A」想调用「服务B」的接口，那如何找到「服务B」的地址IP的呢？<br> 一种方式是硬编码，将服务地址写死在A系统的代码里，或者抽取到配置中心。<br> 但是一旦扩容缩容或者服务器故障下线就麻烦了，又要重新去修改代码，极不灵活。</p><div align="left"><img src="'+p+'" width="650px"></div><p>另一种方案，就是今天要讲的 <strong>注册中心</strong></p><p>注册中心，简单来讲，就是为了解决分布式场景下，服务之间相互发现的问题。</p><div align="left"><img src="'+n+'" width="650px"></div><h3 id="_1、服务提供者" tabindex="-1"><a class="header-anchor" href="#_1、服务提供者"><span>1、服务提供者</span></a></h3><p>向注册中心注册自身对外提供的服务，并且定期向注册中心发送心跳状态，报告是否存活</p><h3 id="_2、服务消费者" tabindex="-1"><a class="header-anchor" href="#_2、服务消费者"><span>2、服务消费者</span></a></h3><p>系统启动时，向注册中心订阅服务，拉取自己需要的服务节点地址列表并缓存到本地，同时与「服务提供方」建立连接池，用于后面的发起服务调用</p><h3 id="_3、注册中心" tabindex="-1"><a class="header-anchor" href="#_3、注册中心"><span>3、注册中心</span></a></h3><p>保存「服务提供者」上报的服务地址等信息，同时还会心跳检测，如果发现某台「服务提供者」机器下线或上线会及时变更本地的地址列表，并将最新的地址列表同步给「服务消费者」</p>',15)]))}const l=e(i,[["render",h]]),m=JSON.parse('{"path":"/posts/interview/pay/arch/%E4%B8%AD%E9%97%B4%E4%BB%B6%EF%BC%9A%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E7%9A%84%205%20%E7%A7%8D%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B.html","title":"中间件：注册中心的 5 种技术选型","lang":"zh-CN","frontmatter":{"title":"中间件：注册中心的 5 种技术选型","pay":"https://articles.zsxq.com/id_xqkitq1gnwxu.html","description":"中间件：注册中心的 5 种技术选型 作者：老马 公众号：老马啸西风 博客：https://houbb.github.io/ 人生理念：知行合一 什么是注册中心？ 分布式架构时代，业务垂直化拆分，衍生出非常多的系统。 举个例子，下图中「服务A」想调用「服务B」的接口，那如何找到「服务B」的地址IP的呢？ 一种方式是硬编码，将服务地址写死在A系统的代码里，...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/vpress/posts/interview/pay/arch/%E4%B8%AD%E9%97%B4%E4%BB%B6%EF%BC%9A%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E7%9A%84%205%20%E7%A7%8D%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"中间件：注册中心的 5 种技术选型"}],["meta",{"property":"og:description","content":"中间件：注册中心的 5 种技术选型 作者：老马 公众号：老马啸西风 博客：https://houbb.github.io/ 人生理念：知行合一 什么是注册中心？ 分布式架构时代，业务垂直化拆分，衍生出非常多的系统。 举个例子，下图中「服务A」想调用「服务B」的接口，那如何找到「服务B」的地址IP的呢？ 一种方式是硬编码，将服务地址写死在A系统的代码里，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-30T09:38:40.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-30T09:38:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"中间件：注册中心的 5 种技术选型\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-30T09:38:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743327520000,"updatedTime":1743327520000,"contributors":[{"name":"houbb","username":"houbb","email":"houbinbin.echo@gmail.com","commits":1,"url":"https://github.com/houbb"}]},"readingTime":{"minutes":1.47,"words":442},"filePathRelative":"posts/interview/pay/arch/中间件：注册中心的 5 种技术选型.md","localizedDate":"2025年3月30日","excerpt":"\\n<blockquote>\\n<p>作者：老马<br>\\n<br>公众号：老马啸西风<br>\\n<br> 博客：<a href=\\"https://houbb.github.io/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://houbb.github.io/</a><br>\\n<br> 人生理念：知行合一</p>\\n</blockquote>\\n<h2>什么是注册中心？</h2>\\n<p>分布式架构时代，业务垂直化拆分，衍生出非常多的系统。</p>\\n<p>举个例子，下图中「服务A」想调用「服务B」的接口，那如何找到「服务B」的地址IP的呢？<br>\\n一种方式是硬编码，将服务地址写死在A系统的代码里，或者抽取到配置中心。<br>\\n但是一旦扩容缩容或者服务器故障下线就麻烦了，又要重新去修改代码，极不灵活。</p>","autoDesc":true}');export{l as comp,m as data};
