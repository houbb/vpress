import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,a as o,o as p}from"./app-NomDibRt.js";const a="/vpress/images/pay/arch/21-1.png",i="/vpress/images/pay/arch/21-2.png",n={};function s(h,t){return p(),r("div",null,t[0]||(t[0]=[o('<h1 id="代码篇-异步编程的-7-种实现方式" tabindex="-1"><a class="header-anchor" href="#代码篇-异步编程的-7-种实现方式"><span>代码篇：异步编程的 7 种实现方式</span></a></h1><blockquote><p>作者：老马<br><br>公众号：老马啸西风<br><br> 博客：<a href="https://houbb.github.io/" target="_blank" rel="noopener noreferrer">https://houbb.github.io/</a><br><br> 人生理念：知行合一</p></blockquote><p>早期的系统是同步的，容易理解，我们来看个例子</p><p><strong>同步编程</strong></p><div align="left"><img src="'+a+'" width="450px"></div><p>当用户创建一笔电商交易订单时，要经历的业务逻辑流程还是很长的，每一步都要耗费一定的时间，那么整体的RT就会比较长。</p><p>于是，聪明的人们开始思考能不能将一些非核心业务从主流程中剥离出来，于是有了异步编程 雏形。</p><blockquote><p>异步编程是让程序并发运行的一种手段。它允许多个事件同时发生，当程序调用需要长时间运行的方法时，它不会阻塞当前的执行流程，程序可以继续运行。</p></blockquote><div align="left"><img src="'+i+'" width="450px"></div><p>核心思路：采用多线程优化性能，将串行操作变成并行操作。异步模式设计的程序可以显著减少线程等待，从而在高吞吐量场景中，极大提升系统的整体性能，显著降低时延。</p><p>接下来，我们来讲下异步有哪些编程实现方式</p><h2 id="一、线程-thread" tabindex="-1"><a class="header-anchor" href="#一、线程-thread"><span>一、线程 Thread</span></a></h2><p>直接继承 Thread类 是创建异步线程最简单的方式。</p><p>首先，创建Thread子类，普通类或匿名内部类方式；然后创建子类实例；最后通过start()方法启动线程。</p>',14)]))}const l=e(n,[["render",s]]),m=JSON.parse('{"path":"/posts/interview/pay/arch/%E4%BB%A3%E7%A0%81%E7%AF%87%EF%BC%9A%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E7%9A%84%207%20%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F.html","title":"代码篇：异步编程的 7 种实现方式","lang":"zh-CN","frontmatter":{"title":"代码篇：异步编程的 7 种实现方式","pay":"https://articles.zsxq.com/id_ruh0v0f2wp4s.html","description":"代码篇：异步编程的 7 种实现方式 作者：老马 公众号：老马啸西风 博客：https://houbb.github.io/ 人生理念：知行合一 早期的系统是同步的，容易理解，我们来看个例子 同步编程 当用户创建一笔电商交易订单时，要经历的业务逻辑流程还是很长的，每一步都要耗费一定的时间，那么整体的RT就会比较长。 于是，聪明的人们开始思考能不能将一些非...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/vpress/posts/interview/pay/arch/%E4%BB%A3%E7%A0%81%E7%AF%87%EF%BC%9A%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E7%9A%84%207%20%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"代码篇：异步编程的 7 种实现方式"}],["meta",{"property":"og:description","content":"代码篇：异步编程的 7 种实现方式 作者：老马 公众号：老马啸西风 博客：https://houbb.github.io/ 人生理念：知行合一 早期的系统是同步的，容易理解，我们来看个例子 同步编程 当用户创建一笔电商交易订单时，要经历的业务逻辑流程还是很长的，每一步都要耗费一定的时间，那么整体的RT就会比较长。 于是，聪明的人们开始思考能不能将一些非..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-30T09:38:40.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-30T09:38:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"代码篇：异步编程的 7 种实现方式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-30T09:38:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743327520000,"updatedTime":1743327520000,"contributors":[{"name":"houbb","username":"houbb","email":"houbinbin.echo@gmail.com","commits":1,"url":"https://github.com/houbb"}]},"readingTime":{"minutes":1.37,"words":411},"filePathRelative":"posts/interview/pay/arch/代码篇：异步编程的 7 种实现方式.md","localizedDate":"2025年3月30日","excerpt":"\\n<blockquote>\\n<p>作者：老马<br>\\n<br>公众号：老马啸西风<br>\\n<br> 博客：<a href=\\"https://houbb.github.io/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://houbb.github.io/</a><br>\\n<br> 人生理念：知行合一</p>\\n</blockquote>\\n<p>早期的系统是同步的，容易理解，我们来看个例子</p>\\n<p><strong>同步编程</strong></p>\\n<div align=\\"left\\">\\n    <img src=\\"/images/pay/arch/21-1.png\\" width=\\"450px\\">\\n</div>","autoDesc":true}');export{l as comp,m as data};
