import{_ as p}from"./1-2-BTovT8zw.js";import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as o,o as t}from"./app-NomDibRt.js";const r="/vpress/images/middleware/redis/1-1.jpg",d="/vpress/images/middleware/redis/1-3.jpg",a="/vpress/images/middleware/redis/1-4.jpg",n="/vpress/images/middleware/redis/1-5.jpg",c="/vpress/images/middleware/redis/1-6.jpg",l="/vpress/images/middleware/redis/1-7.jpg",h="/vpress/images/middleware/redis/1-8.jpg",b={};function m(g,e){return t(),s("div",null,e[0]||(e[0]=[o('<h1 id="redis-宕机-数据丢了-老板要辞退我" tabindex="-1"><a class="header-anchor" href="#redis-宕机-数据丢了-老板要辞退我"><span>Redis 宕机，数据丢了，老板要辞退我</span></a></h1><blockquote><p>作者：老马<br><br>公众号：老马啸西风<br><br> 博客：<a href="https://houbb.github.io/" target="_blank" rel="noopener noreferrer">https://houbb.github.io/</a><br><br> 人生理念：知行合一</p></blockquote><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>大家好，我是老马~</p><p>最近跟一位读者聊天，小哥非常郁闷，公司的Redis宕机了，线上业务受到了影响，老板非常愤怒，小哥担心会不会被辞退！</p><p>我也很好奇，问小哥Redis主节点挂了，还有备机啊。怎么会影响到业务呢？</p><p>小哥说，他们的系统架构只部署一个Redis单实例。节点挂了，数据也丢了。</p><div align="left"><img src="'+r+'" width="300px"></div><p>好吧，既然提到了备份，那今天，我们就来聊下 Redis的主从同步</p><h2 id="什么是主从" tabindex="-1"><a class="header-anchor" href="#什么是主从"><span>什么是主从</span></a></h2><p>主从也称主从集群，部署了多个Redis实例，如下图所示：</p><div align="left"><img src="'+p+'" width="500px"></div><p>其中，每个实例又有自己的专属职责</p><ul><li>主库：负责接收读操作、写操作</li><li>从库：定期同步主库的数据，对外提供读操作</li></ul><h2 id="好奇的宝宝可能要问了-为什么从库不能写" tabindex="-1"><a class="header-anchor" href="#好奇的宝宝可能要问了-为什么从库不能写"><span>好奇的宝宝可能要问了，为什么从库不能写？</span></a></h2><p>考虑到数据合并的复杂性，假如一个key，多次更新，每次操作在不同的实例上执行，为了保证数据的全局一致性，势必要加全局锁，保证在集群范围上串行化操作且在最新的数据基础上更新，这个成本还是很大的。</p><p>为了降低系统复杂度，节约成本。主从同步架构方案一般都是在主库上写，在从库上读。分工明确，职责单一。</p><p>可能有同学会提到 Redis Cluster 模式，这个是另一种设计方案。采用水平分割方式，通过CRC16（key）算法，将数据拆分到若干个实例中，每个实例只对自己负责的槽位的数据读、写，从而分摊集群压力。这个属于另一种玩法，本期就不深入展开了。</p><h2 id="为了保证数据不丢失-redis提供两种数据同步方式" tabindex="-1"><a class="header-anchor" href="#为了保证数据不丢失-redis提供两种数据同步方式"><span>为了保证数据不丢失，Redis提供两种数据同步方式</span></a></h2><p>1、RDB，全量数据同步</p><p>2、AOF，增量数据同步，回放日志</p><p>这两者有什么区别？</p><p>什么时候采用 RDB ? 什么时候采用 AOF ?</p><p>接下来，我们逐步分析展开</p><h2 id="建立主从关系" tabindex="-1"><a class="header-anchor" href="#建立主从关系"><span>建立主从关系</span></a></h2><p>首先，启动两个redis 实例，IP地址分别是 <code>192.168.0.1</code> 和 <code>192.168.0.2</code> ，开始时，他们之间没有任何关联。</p><p>我们通过终端命令，登录 <code>192.168.0.2</code> 机器，执行命令</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>replicaof 192.168.0.1 6379</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>此时 <code>192.168.0.2</code> 实例就成了 <code>192.168.0.1</code> 的从库。</p><div align="left"><img src="'+d+'" width="400px"></div><p>当主从实例建立好关联后，接下来，就开始进入数据同步环节</p><h2 id="主从同步" tabindex="-1"><a class="header-anchor" href="#主从同步"><span>主从同步</span></a></h2><div align="left"><img src="'+a+'" width="560px"></div><p><strong>主从库数据同步分为三步：</strong></p><p><strong>1、第一步</strong></p><p>从库（192.1768.0.2）向主库（192.168.0.1）发送 psync 命令，带了两个参数（主库的runID和同步进度offset）。</p><ul><li>第一次建立连接时，从库并不知道主库的runID，所以会设置为 ？。offset = -1，表示第一次复制。</li></ul><blockquote><p>说明：每个 Redis 实例初始启动时，会自动生成一个随机ID，用来标识当前实例。</p></blockquote><p>主库接收到psync请求后，会响应 FULLRESYNC ，带有两个参数（主库的runID和同步进度offset）</p><blockquote><p>说明：FULLRESYNC 表示采用全量复制</p></blockquote><p><strong>2、第二步</strong></p><ul><li>主库fork子进程，执行 <code>bgsave</code> 命令，生成 RDB 文件</li><li>主库将 RDB 文件发给从库</li><li>从库接到响应后，会先清空当前数据库，然后加载 RDB 文件</li></ul><blockquote><p>说明：主库在生成RDB文件时，主线程是阻塞的，对外不提供服务。一旦RDB文件生成，在数据同步过程中，不受影响，主库可以对外服务。后续的写命令数据会存到 replication buffer</p></blockquote><p><strong>3、第三步</strong></p><p>主库将增量写命令发送给从库，从库放映式执行这些命令，从而实现了主从同步。</p><p>到这里，主从的核心逻辑基本讲完了。</p><p>但生产环境，通常是一主多从，每个从库初始同步时，都要主库生成RDB文件，显然开销很大。有什么解决方案？</p><h2 id="一主多从-主库减压" tabindex="-1"><a class="header-anchor" href="#一主多从-主库减压"><span>一主多从，主库减压</span></a></h2><p>当从节点存在多个时，主库的压力显著增加，具体体现在两个方面：</p><p>1、当从库同步主库时，要fork子进程，有多少个从节点，就要fork多少个子进程，每个子进程都要生成RDB。导致主库系统压力过大</p><p>2、生成的RDB要同步给从库，占用网络带宽</p><p>基于上面的困境，演化出新的模式，“主--从--从”模式，具体玩法如下图：</p><div align="left"><img src="'+n+'" width="560px"></div><p>现有虽然有四个从库，但直接跟主库关联同步数据的只有 <code>192.168.0.2</code> 和 <code>192.168.0.3</code> 两个实例，大大减轻了主库的压力。</p><p>任何事情都不是一成不变的，网络传输就存在很大的风险，网络闪断了怎么办？对主从同步有什么影响？</p><h2 id="网络闪断对主从同步的影响" tabindex="-1"><a class="header-anchor" href="#网络闪断对主从同步的影响"><span>网络闪断对主从同步的影响</span></a></h2><p>我们知道主从实例间同步数据主要有两种方式：<code>全量同步</code> 和 <code>增量同步</code> 。 全量同步就是同步RDB文件，那增量同步是如何实现的呢？</p><p>这里要引入一个缓冲区，<code>repl_backlog_buffer</code>，它是一个环形设计，增量命令都是先存入这个缓冲区的。主库有生产位移，称之为<code>master_repl_offset</code> 。从库有拉取位移，称之为<code>slave_repl_offset</code></p><div align="left"><img src="'+c+'" width="560px"></div><p>正常情况下，<code>master_repl_offset</code> 和 <code>slave_repl_offset</code> 大小是接近的，也就是说主从库两者间的数据近乎同步。</p><p>每次同步数据时，从库向主库发送 psync 命令，把自己的 <code>slave_repl_offset</code> 发给主库，主库基于此偏移位置，向从库发送增量数据。这个很容易理解。</p><p>是不是就万无一失了呢？</p><p>由于采用了环形结构，如果主库的生产速度比从库的拉取速度快很多时，就会出现套圈现象。</p><blockquote><p>为什么采用环形？主要为了让空间循环使用，像市场的行车记录仪、监控设备等，大多都是采用循环覆盖式存储。如果空间满了，将之前最老的数据覆盖掉。虽然可能丢失了部分数据，但是性价比高。</p></blockquote><p>回到上面的问题，如果被套圈了怎么办？</p><div align="left"><img src="'+l+'" width="560px"></div><p>如上图所示，从库 psync 命令，请求的offset 是 4，但是主节点已经生产到了 15 ，将之前的 1、2、3、4、5 全部覆盖掉了。</p><p>这下傻眼了，需要同步的数据被覆盖了，惹大麻烦了....</p><div align="left"><img src="'+h+'" width="300px"></div><h2 id="两个解决方案" tabindex="-1"><a class="header-anchor" href="#两个解决方案"><span>两个解决方案</span></a></h2><p>1、调大 <code>repl_backlog_buffer</code> 缓冲区大小，该值是由 <code>repl_backlog_size</code>参数控制</p><blockquote><p>缓冲空间大小 = 主库写入速度 * 操作大小 - 从库拉取速度 * 操作大小</p></blockquote><p>这是我们能主观控制的。比如担心大促带来的流量高峰，可以将这个值调大2倍、3倍、4倍，大家可以根据自己的业务情况自由设置。</p><p>2、还有一种方式是Redis 自身提供的解决方案。</p><p>此时会触发<code>全量复制</code>，跟第一次建立主从关系同步数据一样。通过全量方式，一次性弥补主从间的数据大缺口。</p><h2 id="主节点挂了怎么办" tabindex="-1"><a class="header-anchor" href="#主节点挂了怎么办"><span>主节点挂了怎么办</span></a></h2><p>如果只是传统意义上的主从模式，主节点挂了，通常要手工完成切换。</p><p>效率不言而喻了，尤其是线上生产系统，根本没法接受这种方案。</p><p>这时候，要引入哨兵机制了，哨兵机制可以实现主从库的自动切换，有效解决了故障转移。整个过程分为三个阶段：监控、选主、通知。</p><p>1、监控。哨兵进程会周期给所有的主库、从库发送 PING 命令，检测机器是否处于服务状态。如果没有在设置时间内收到回复，则判定为下线。</p><p><strong>当然，网络抖动，也会存在误判可能，如何避免？</strong></p><p>引入哨兵集群，多个哨兵实例一起判断，降低误判率。判断标准就是，假如 n 个哨兵实例，至少有 n/2+1 个判定一致，才可以定论。</p><p>2、选主。主要是看各个节点的打分情况，打分规则分为 <code>从库优先级</code>、<code>从库复制进度</code>、<code>从库ID号</code>。只要有一轮，某个从库得分最高，则选举它为主库。</p><ul><li>从库优先级，主要是考虑到不同的机器可能配置不一样，配置高的机器，优先级高一些，通过<code>slave-priority</code> 来配置</li><li>从库复制进度，主要是看<code>slave_repl_offset</code> 的值大小，值越大表示已经同步的数据越多，得分越高。</li><li>从库ID号，每个Redis 实例启动时，都会生成一个 ID，在优先级和复制进度相同的条件下，ID号最小的从库分数最高，会被选为新主库。</li></ul><p>3、通知。把选举后的新主库发送给所有节点，让所有的从库执行 <code>replicaof</code> 命令，和master建立主从关系、数据同步复制。另外，也会把最新的主库信息同步给客户端。</p>',85)]))}const v=i(b,[["render",m]]),R=JSON.parse('{"path":"/posts/interview/middleware/redis/Redis%20%E5%AE%95%E6%9C%BA%EF%BC%8C%E6%95%B0%E6%8D%AE%E4%B8%A2%E4%BA%86%EF%BC%8C%E8%80%81%E6%9D%BF%E8%A6%81%E8%BE%9E%E9%80%80%E6%88%91.html","title":"Redis 宕机，数据丢了，老板要辞退我","lang":"zh-CN","frontmatter":{"title":"Redis 宕机，数据丢了，老板要辞退我","description":"Redis 宕机，数据丢了，老板要辞退我 作者：老马 公众号：老马啸西风 博客：https://houbb.github.io/ 人生理念：知行合一 简介 大家好，我是老马~ 最近跟一位读者聊天，小哥非常郁闷，公司的Redis宕机了，线上业务受到了影响，老板非常愤怒，小哥担心会不会被辞退！ 我也很好奇，问小哥Redis主节点挂了，还有备机啊。怎么会影响...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/vpress/posts/interview/middleware/redis/Redis%20%E5%AE%95%E6%9C%BA%EF%BC%8C%E6%95%B0%E6%8D%AE%E4%B8%A2%E4%BA%86%EF%BC%8C%E8%80%81%E6%9D%BF%E8%A6%81%E8%BE%9E%E9%80%80%E6%88%91.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"Redis 宕机，数据丢了，老板要辞退我"}],["meta",{"property":"og:description","content":"Redis 宕机，数据丢了，老板要辞退我 作者：老马 公众号：老马啸西风 博客：https://houbb.github.io/ 人生理念：知行合一 简介 大家好，我是老马~ 最近跟一位读者聊天，小哥非常郁闷，公司的Redis宕机了，线上业务受到了影响，老板非常愤怒，小哥担心会不会被辞退！ 我也很好奇，问小哥Redis主节点挂了，还有备机啊。怎么会影响..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-30T09:38:40.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-30T09:38:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis 宕机，数据丢了，老板要辞退我\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-30T09:38:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743327520000,"updatedTime":1743327520000,"contributors":[{"name":"houbb","username":"houbb","email":"houbinbin.echo@gmail.com","commits":1,"url":"https://github.com/houbb"}]},"readingTime":{"minutes":7.94,"words":2382},"filePathRelative":"posts/interview/middleware/redis/Redis 宕机，数据丢了，老板要辞退我.md","localizedDate":"2025年3月30日","excerpt":"\\n<blockquote>\\n<p>作者：老马<br>\\n<br>公众号：老马啸西风<br>\\n<br> 博客：<a href=\\"https://houbb.github.io/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://houbb.github.io/</a><br>\\n<br> 人生理念：知行合一</p>\\n</blockquote>\\n<h2>简介</h2>\\n<p>大家好，我是老马~</p>\\n<p>最近跟一位读者聊天，小哥非常郁闷，公司的Redis宕机了，线上业务受到了影响，老板非常愤怒，小哥担心会不会被辞退！</p>\\n<p>我也很好奇，问小哥Redis主节点挂了，还有备机啊。怎么会影响到业务呢？</p>","autoDesc":true}');export{v as comp,R as data};
