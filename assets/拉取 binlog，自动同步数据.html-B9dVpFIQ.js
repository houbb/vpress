import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as i}from"./app-NomDibRt.js";const l="/vpress/images/middleware/mysql/21-1.png",p="/vpress/images/middleware/mysql/21-2.png",d="/vpress/images/middleware/mysql/21-3.png",r="/vpress/images/middleware/mysql/21-4.png",t="/vpress/images/middleware/mysql/21-5.png",c="/vpress/images/middleware/mysql/21-6.png",o={};function h(b,s){return i(),a("div",null,s[0]||(s[0]=[e('<h1 id="拉取-binlog-自动同步数据" tabindex="-1"><a class="header-anchor" href="#拉取-binlog-自动同步数据"><span>拉取 binlog，自动同步数据</span></a></h1><blockquote><p>作者：老马<br><br>公众号：老马啸西风<br><br> 博客：<a href="https://houbb.github.io/" target="_blank" rel="noopener noreferrer">https://houbb.github.io/</a><br><br> 人生理念：知行合一</p></blockquote><p><strong>关于数据同步，我们常见的策略就是 同步双写、异步消息</strong></p><p><strong>1、同步双写</strong></p><p>字面意思，同步+双写。比如老库模型重构，数据迁移到新库，迁移过程中，如果有数据变更，既要写到老库，也要写到新库，两边同步更新。</p><ul><li>优点：同步机制，保证了数据的实效性。</li><li>缺点：额外增加同步处理逻辑，会有性能损耗</li></ul><p><strong>2、异步消息</strong></p><p>如果依赖方过多，我们通常是将变更数据异构发送到MQ消息系统，感兴趣的业务可以订阅消息Topic，拉取消息，然后按自己的业务逻辑处理。</p><ul><li>优点：架构解耦，可以采用异步来做，降低主链路的性能损耗。如果是多个消费方，不会出现指数性能叠加</li><li>缺点：异步机制，无法满足实时性，有一定延迟。只能达到最终一致性。</li></ul><p>上面两种方案，都是采用硬编码，那么有没有通用的技术方案。不关心你是什么业务，写入什么数据，对平台来讲可以抽象成一张张 MySQL 表，直接同步表数据。只有使用方才真正去关心数据内容。</p><blockquote><p>可以参考 MySQL 的主从同步原理，拉取 binlog，只要将里面的数据解析出来即可。<br><br><br><br> 流行的中间件是阿里开源的 Canal，今天我们就来做个技术方案，大概内容如下：</p></blockquote><div align="left"><img src="'+l+'" width="500px"></div><h2 id="一、canal-介绍" tabindex="-1"><a class="header-anchor" href="#一、canal-介绍"><span>一、Canal 介绍</span></a></h2><p>Canal，译意为水道/管道/沟渠，主要用途是基于 MySQL 数据库增量日志解析，提供增量数据订阅和消费。</p><p>Canal 诞生之初是为了解决多个备库与主库间数据同步，对主库造成的压力。</p><p>慢慢的，这个管道被发扬光大，应用场景也越来越多</p><div align="left"><img src="'+p+`" width="500px"></div><p>工作原理很简单，把自己伪装成 MySQL 的 slave，模拟 MySQL slave 的交互协议向 MySQL master 发送 dump 请求。</p><p>MySQL master 收到canal发送过来的dump请求，开始推送binary log给canal，然后canal解析binlog 日志，再存储到不同的存储介质中，比如：MySQL、Kafka、Elastic Search、Pulsar 等</p><p><strong>业务场景：</strong></p><ul><li>数据库实时备份</li><li>ES 数据索引的构建和维护</li><li>分布式缓存（如：Redis）的同步维护</li><li>数据异构，订阅方可以按自己的业务需求订阅消费，如：Kafka、Pulsar 等</li></ul><h2 id="二、安装-mysql" tabindex="-1"><a class="header-anchor" href="#二、安装-mysql"><span>二、安装 MySQL</span></a></h2><h3 id="_1、拉取-mysql-镜像" tabindex="-1"><a class="header-anchor" href="#_1、拉取-mysql-镜像"><span>1、拉取 MySQL 镜像</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker pull mysql:5.7</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_2、查看镜像" tabindex="-1"><a class="header-anchor" href="#_2、查看镜像"><span>2、查看镜像</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker images</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_3、启动-mysql-进程" tabindex="-1"><a class="header-anchor" href="#_3、启动-mysql-进程"><span>3、启动 MySQL 进程</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker run \\</span></span>
<span class="line"><span>--name mysql \\</span></span>
<span class="line"><span>-p 3306:3306 \\</span></span>
<span class="line"><span>-e MYSQL_ROOT_PASSWORD=123456 \\</span></span>
<span class="line"><span>-d mysql:5.7</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、查看进程" tabindex="-1"><a class="header-anchor" href="#_4、查看进程"><span>4、查看进程</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[root@iZbp12gqydkgwid86ftoauZ mysql]# docker ps -a</span></span>
<span class="line"><span>CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS                               NAMES</span></span>
<span class="line"><span>e92827897538   mysql     &quot;docker-entrypoint.s…&quot;   4 seconds ago   Up 2 seconds   0.0.0.0:3306-&gt;3306/tcp, 33060/tcp   mysql</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、进入-mysql-容器" tabindex="-1"><a class="header-anchor" href="#_5、进入-mysql-容器"><span>5、进入 MySQL 容器</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker exec -it 167bfa3785f1 /bin/bash</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>注意：修改一些配置文件，可能会遇到一些问题，如：</p><p><code>docker容器中使用vi或vim提示bash: vi: command not found的处理方法</code></p><p>因为没有安装vi编辑器，可以执行下面命令</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>apt-get update</span></span>
<span class="line"><span>apt-get install vim</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6、常用-mysql-客户端命令" tabindex="-1"><a class="header-anchor" href="#_6、常用-mysql-客户端命令"><span>6、常用 MySQL 客户端命令</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 登陆 mysql</span></span>
<span class="line"><span>mysql -uroot -p111111</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 显示数据库列表</span></span>
<span class="line"><span>show databases;</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 选择数据库</span></span>
<span class="line"><span>use mysql;</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 显示所有表</span></span>
<span class="line"><span>show tables;</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 显示表结构</span></span>
<span class="line"><span>describe 表名;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>其他更多命令：</span></span>
<span class="line"><span>https://www.cnblogs.com/bluecobra/archive/2012/01/11/2318922.html</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、mysql-相关配置" tabindex="-1"><a class="header-anchor" href="#三、mysql-相关配置"><span>三、MySQL 相关配置</span></a></h2><p>创建一个 MySQL 用户，用户名：tom ，密码：123456</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>create user &#39;tom&#39;@&#39;%&#39; identified by &#39;123456&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>为用户：tom 授予所有库的读写权限</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>grant SELECT, REPLICATION SLAVE, REPLICATION CLIENT on *.* to &#39;tom&#39;@&#39;%&#39; identified by &#39;123456&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>修改 MySQL 配置文件 my.cnf，位置：/etc/my.cnf</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[mysqld]</span></span>
<span class="line"><span>log-bin=mysql-bin # 开启 binlog</span></span>
<span class="line"><span>binlog-format=ROW # 选择 行 模式</span></span>
<span class="line"><span>server_id=1 # 配置 MySQL replaction 需要定义，不要和 canal 的 slaveId 重复</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：需要重启MySQL容器实例，执行命令 docker restart mysql</p><p>查看binlog模式：</p><div align="left"><img src="`+d+'" width="500px"></div><p>查看binlog日志文件列表：</p><div align="left"><img src="'+r+'" width="500px"></div><p>查看当前正在写入的binlog文件：</p><div align="left"><img src="'+t+'" width="500px"></div><h2 id="四、安装-canal" tabindex="-1"><a class="header-anchor" href="#四、安装-canal"><span>四、安装 Canal</span></a></h2><p>1、从官网下载安装包</p><blockquote><p>下载地址：<br><br><a href="https://github.com/alibaba/canal/releases" target="_blank" rel="noopener noreferrer">https://github.com/alibaba/canal/releases</a></p></blockquote><div align="left"><img src="'+c+`" width="500px"></div><p>本文实验用的是最新版本 v1.1.5，主要是对不同的客户端的个性化支持，属于生态扩展。</p><p>其他更多特性，大家可以去官网查看</p><p>解压 tar.gz 压缩包</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>tar -zxvf canal.deployer-1.1.5.tar.gz</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>打开配置文件 <code>conf/example/instance.properties</code>，修改配置如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>## v1.0.26版本后会自动生成slaveId，所以可以不用配置</span></span>
<span class="line"><span># canal.instance.mysql.slaveId=0</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 数据库地址</span></span>
<span class="line"><span>canal.instance.master.address=127.0.0.1:3306</span></span>
<span class="line"><span># binlog日志名称</span></span>
<span class="line"><span>canal.instance.master.journal.name=mysql-bin.000001</span></span>
<span class="line"><span># mysql主库链接时起始的binlog偏移量</span></span>
<span class="line"><span>canal.instance.master.position=156</span></span>
<span class="line"><span># mysql主库链接时起始的binlog的时间戳</span></span>
<span class="line"><span>canal.instance.master.timestamp=</span></span>
<span class="line"><span>canal.instance.master.gtid=</span></span>
<span class="line"><span></span></span>
<span class="line"><span># username/password</span></span>
<span class="line"><span># 在MySQL服务器授权的账号密码</span></span>
<span class="line"><span>canal.instance.dbUsername=root</span></span>
<span class="line"><span>canal.instance.dbPassword=111111</span></span>
<span class="line"><span># 字符集</span></span>
<span class="line"><span>canal.instance.connectionCharset = UTF-8</span></span>
<span class="line"><span># enable druid Decrypt database password</span></span>
<span class="line"><span>canal.instance.enableDruid=false</span></span>
<span class="line"><span></span></span>
<span class="line"><span># table regex .*\\\\..*表示监听所有表 也可以写具体的表名，用，隔开</span></span>
<span class="line"><span>canal.instance.filter.regex=.*\\\\..*</span></span>
<span class="line"><span># mysql 数据解析表的黑名单，多个表用，隔开</span></span>
<span class="line"><span>canal.instance.filter.black.regex=</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动命令</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>./startup.sh</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>由于采用的阿里云的 ECS 服务器，发现没有安装 JAVA 环境。</p><p>Oracle 官网下载 JDK 8 的安装包</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>下载地址：</span></span>
<span class="line"><span></span></span>
<span class="line"><span>https://www.oracle.com/java/technologies/downloads/#java8</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，通过下面的命令将安装包上传到 ECS 服务器</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>scp jdk-8u311-linux-x64.tar.gz root@118.31.168.234:/root/java      //上传文件</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>安装 JDK 8 环境</p><blockquote><p>文档：<a href="https://developer.aliyun.com/article/701864" target="_blank" rel="noopener noreferrer">https://developer.aliyun.com/article/701864</a></p></blockquote><h2 id="五、启动-canal" tabindex="-1"><a class="header-anchor" href="#五、启动-canal"><span>五、启动 Canal</span></a></h2><p>进入 <code>canal.deployer-1.1.5/bin</code></p><p>执行启动脚本：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>./startup.sh</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>进入 <code>canal.deployer-1.1.5/logs/example</code></p><p>如果 <code>example.log</code> 日志文件中，出现下面的内容，表示启动成功</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>2022-01-03 08:23:10.165 [canal-instance-scan-0] INFO  c.a.otter.canal.instance.core.AbstractCanalInstance - stop CannalInstance for null-example </span></span>
<span class="line"><span>2022-01-03 08:23:10.177 [canal-instance-scan-0] INFO  c.a.otter.canal.instance.core.AbstractCanalInstance - stop successful....</span></span>
<span class="line"><span>2022-01-03 08:23:10.298 [canal-instance-scan-0] INFO  c.a.otter.canal.instance.spring.CanalInstanceWithSpring - start CannalInstance for 1-example </span></span>
<span class="line"><span>2022-01-03 08:23:10.298 [canal-instance-scan-0] WARN  c.a.o.canal.parse.inbound.mysql.dbsync.LogEventConvert - --&gt; init table filter : ^.*\\..*$</span></span>
<span class="line"><span>2022-01-03 08:23:10.298 [canal-instance-scan-0] WARN  c.a.o.canal.parse.inbound.mysql.dbsync.LogEventConvert - --&gt; init table black filter : ^mysql\\.slave_.*$</span></span>
<span class="line"><span>2022-01-03 08:23:10.299 [canal-instance-scan-0] INFO  c.a.otter.canal.instance.core.AbstractCanalInstance - start successful....</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="六、工程实验" tabindex="-1"><a class="header-anchor" href="#六、工程实验"><span>六、工程实验</span></a></h2><p>创建一个 SpringBoot 工程，<code>spring-boot-bulking-canal</code></p><p>引入相关pom依赖</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;com.alibaba.otter&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;canal.client&lt;/artifactId&gt;</span></span>
<span class="line"><span>    &lt;version&gt;1.1.4&lt;/version&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写java类，与 canal 服务端 建立连接，拉取数据库的变更数据</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// 创建链接</span></span>
<span class="line"><span>CanalConnector connector = CanalConnectors.newSingleConnector(new InetSocketAddress(&quot;127.0.0.1&quot;, 11111), &quot;example&quot;, &quot;&quot;, &quot;&quot;);</span></span>
<span class="line"><span>try {</span></span>
<span class="line"><span>    //打开连接</span></span>
<span class="line"><span>    connector.connect();</span></span>
<span class="line"><span>    //订阅全部表</span></span>
<span class="line"><span>    connector.subscribe(&quot;.*\\\\..*&quot;);</span></span>
<span class="line"><span>    //回滚到未进行ack的地方，下次fetch的时候，可以从最后一个没有ack的地方开始拿</span></span>
<span class="line"><span>    connector.rollback();</span></span>
<span class="line"><span>    while (true) {</span></span>
<span class="line"><span>        Message message = connector.getWithoutAck(BATCH_SIZE);</span></span>
<span class="line"><span>        long batchId = message.getId();</span></span>
<span class="line"><span>        printEntry(message.getEntries());</span></span>
<span class="line"><span>        // batch id 提交</span></span>
<span class="line"><span>        connector.ack(batchId);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>} catch (Exception e) {</span></span>
<span class="line"><span>    e.printStackTrace();</span></span>
<span class="line"><span>} finally {</span></span>
<span class="line"><span>    connector.disconnect();</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>ds1</code> 数据库下创建 MySQL 表</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>CREATE TABLE \`person\` (</span></span>
<span class="line"><span>  \`id\` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT &#39;自增主键&#39;,</span></span>
<span class="line"><span>  \`income\` bigint(20) NOT NULL COMMENT &#39;收入&#39;,</span></span>
<span class="line"><span>  \`expend\` bigint(20) NOT NULL COMMENT &#39;支出&#39;,</span></span>
<span class="line"><span>  PRIMARY KEY (\`id\`),</span></span>
<span class="line"><span>  KEY \`idx_income\` (\`income\`)</span></span>
<span class="line"><span>) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 COMMENT=&#39;个人收支表&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>插入一条记录：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>insert into person values(100,1000,1000);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Java类解析binlog，在控制台打印变更日志：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>binlog[mysql-bin.000002:1946] , table[ds1,person] , eventType : INSERT</span></span>
<span class="line"><span>id : 100    update=true</span></span>
<span class="line"><span>income : 1000    update=true</span></span>
<span class="line"><span>expend : 1000    update=true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对 id=100 记录做修改：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>update person set income=2000, expend=2000 where id=100;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>控制台打印变更日志：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>binlog[mysql-bin.000002:2252] , table[ds1,person] , eventType : UPDATE</span></span>
<span class="line"><span>-------&gt;; before</span></span>
<span class="line"><span>id : 100    update=false</span></span>
<span class="line"><span>income : 1000    update=false</span></span>
<span class="line"><span>expend : 1000    update=false</span></span>
<span class="line"><span>-------&gt;; after</span></span>
<span class="line"><span>id : 100    update=false</span></span>
<span class="line"><span>income : 2000    update=true</span></span>
<span class="line"><span>expend : 2000    update=true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>上面案例的源代码已经上传到 GitHub，关注公众号：老马啸西风，回复关键词：1818 即可获取</p></blockquote>`,95)]))}const u=n(o,[["render",h]]),g=JSON.parse('{"path":"/posts/interview/middleware/mysql/%E6%8B%89%E5%8F%96%20binlog%EF%BC%8C%E8%87%AA%E5%8A%A8%E5%90%8C%E6%AD%A5%E6%95%B0%E6%8D%AE.html","title":"拉取 binlog，自动同步数据","lang":"zh-CN","frontmatter":{"title":"拉取 binlog，自动同步数据","description":"拉取 binlog，自动同步数据 作者：老马 公众号：老马啸西风 博客：https://houbb.github.io/ 人生理念：知行合一 关于数据同步，我们常见的策略就是 同步双写、异步消息 1、同步双写 字面意思，同步+双写。比如老库模型重构，数据迁移到新库，迁移过程中，如果有数据变更，既要写到老库，也要写到新库，两边同步更新。 优点：同步机制，...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/vpress/posts/interview/middleware/mysql/%E6%8B%89%E5%8F%96%20binlog%EF%BC%8C%E8%87%AA%E5%8A%A8%E5%90%8C%E6%AD%A5%E6%95%B0%E6%8D%AE.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"拉取 binlog，自动同步数据"}],["meta",{"property":"og:description","content":"拉取 binlog，自动同步数据 作者：老马 公众号：老马啸西风 博客：https://houbb.github.io/ 人生理念：知行合一 关于数据同步，我们常见的策略就是 同步双写、异步消息 1、同步双写 字面意思，同步+双写。比如老库模型重构，数据迁移到新库，迁移过程中，如果有数据变更，既要写到老库，也要写到新库，两边同步更新。 优点：同步机制，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-30T09:38:40.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-30T09:38:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"拉取 binlog，自动同步数据\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-30T09:38:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743327520000,"updatedTime":1743327520000,"contributors":[{"name":"houbb","username":"houbb","email":"houbinbin.echo@gmail.com","commits":1,"url":"https://github.com/houbb"}]},"readingTime":{"minutes":6.27,"words":1880},"filePathRelative":"posts/interview/middleware/mysql/拉取 binlog，自动同步数据.md","localizedDate":"2025年3月30日","excerpt":"\\n<blockquote>\\n<p>作者：老马<br>\\n<br>公众号：老马啸西风<br>\\n<br> 博客：<a href=\\"https://houbb.github.io/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://houbb.github.io/</a><br>\\n<br> 人生理念：知行合一</p>\\n</blockquote>\\n<p><strong>关于数据同步，我们常见的策略就是 同步双写、异步消息</strong></p>\\n<p><strong>1、同步双写</strong></p>\\n<p>字面意思，同步+双写。比如老库模型重构，数据迁移到新库，迁移过程中，如果有数据变更，既要写到老库，也要写到新库，两边同步更新。</p>","autoDesc":true}');export{u as comp,g as data};
