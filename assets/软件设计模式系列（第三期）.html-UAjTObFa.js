import{_ as n}from"./14-7-DlqDuSqe.js";import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a as e,o as l}from"./app-NomDibRt.js";const p="/vpress/images/arch/designmodel/16-1.jpg",r="/vpress/images/arch/designmodel/16-2.jpg",d="/vpress/images/arch/designmodel/16-3.jpg",c="/vpress/images/arch/designmodel/16-4.jpg",t="/vpress/images/arch/designmodel/16-5.jpg",o="/vpress/images/arch/designmodel/16-6.jpg",v="/vpress/images/arch/designmodel/16-7.jpg",u={};function m(b,s){return l(),i("div",null,s[0]||(s[0]=[e('<h1 id="软件设计模式系列-第三期" tabindex="-1"><a class="header-anchor" href="#软件设计模式系列-第三期"><span>软件设计模式系列（第三期）</span></a></h1><blockquote><p>作者：老马<br><br>公众号：老马啸西风<br><br> 博客：<a href="https://houbb.github.io/" target="_blank" rel="noopener noreferrer">https://houbb.github.io/</a><br><br> 人生理念：知行合一</p></blockquote><p>面对复杂的业务场景，千变万化的客户需求，如何以一变应万变，以最小的开发成本快速落地实现，同时保证系统有着较低的复杂度，能够保证系统后续de持续迭代能力，让系统拥有较高的可扩展性。</p><p><code>这些是一个合格的架构师必须修炼的基础内功，但是如何修炼这门神功？？？</code></p><p>我将常用的软件设计模式，做了汇总，目录如下：</p><div align="left"><img src="'+n+'" width="400px"></div><p>(考虑到内容篇幅较大，为了便于大家阅读，将软件设计模式系列（共23个）拆分成四篇文章，每篇文章讲解六个设计模式，采用不同的颜色区分，便于快速消化记忆）</p><p><strong>前文回顾：</strong></p><ul><li><a href="https://mp.weixin.qq.com/s/cCPCWCpsJ0VceBQUIMuHPg" target="_blank" rel="noopener noreferrer">面对复杂业务架构，阿里架构师是如何做的？（第一期）</a></li><li><a href="https://mp.weixin.qq.com/s/P-W-FwqtXLkDjjKJYi9HjQ" target="_blank" rel="noopener noreferrer">代码写的烂，经常被同事怼，教你一招！(第二期)</a></li></ul><p>本文是第三期，主要讲解<code>模板模式</code>、<code>策略模式</code>、<code>状态模式</code>、<code>观察者模式</code>、<code>访问者模式</code>、<code>备忘录模式</code></p><h2 id="_1、模板模式" tabindex="-1"><a class="header-anchor" href="#_1、模板模式"><span>1、模板模式</span></a></h2><p><strong>定义：</strong></p><blockquote><p>定义一个操作中的算法的骨架，将一些步骤延迟到子类中。模板模式使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p></blockquote><p>优点： 1、封装不变部分，扩展可变部分。 2、提取公共代码，便于维护。 3、行为由父类控制，子类实现。缺点：每一个不同的实现都需要一个子类来实现，导致类的个数增加，维护成本高。</p><p><strong>核心思路：</strong></p><ul><li>AbstractTemplate：定义一个完整的框架，方法的调用顺序已经确定，但会定义一些抽象的方法留给子类去实现</li><li>AHandler：具体的业务子类，实现<code>AbstractTemplate</code>中定义的抽象方法，从而形成一个完整的流程逻辑</li></ul><div align="left"><img src="'+p+`" width="600px"></div><p><strong>代码示例：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>public TradeFlowActionResult execute(TradeFlowActionParam param, Map context) throws ServiceException {</span></span>
<span class="line"><span>    try {    // 业务逻辑校验</span></span>
<span class="line"><span>        this.validateBusinessLogic(param, context);</span></span>
<span class="line"><span>    } catch (ServiceException ex) {</span></span>
<span class="line"><span>        sendGoodsLog.info(&quot;SendGoodsAction-&gt;validateBusinessLogic got exception. param is &quot; + param, ex);</span></span>
<span class="line"><span>        throw ex;</span></span>
<span class="line"><span>    } catch (RuntimeException ex) {</span></span>
<span class="line"><span>        sendGoodsLog.info(&quot;SendGoodsAction-&gt;validateBusinessLogic got runtime exception. param is &quot; + param, ex);</span></span>
<span class="line"><span>        throw ex;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    try {</span></span>
<span class="line"><span>        // 卖家发货业务逻辑</span></span>
<span class="line"><span>        this.sendGoods(param, context);</span></span>
<span class="line"><span>    } catch (ServiceException ex) {</span></span>
<span class="line"><span>        sendGoodsLog.info(&quot;SendGoodsAction-&gt;sendGoods got exception. param is &quot; + param, ex);</span></span>
<span class="line"><span>        throw ex;</span></span>
<span class="line"><span>    } catch (RuntimeException ex) {</span></span>
<span class="line"><span>        sendGoodsLog.info(&quot;SendGoodsAction-&gt;sendGoods got runtime exception. param is &quot; + param, ex);</span></span>
<span class="line"><span>        throw ex;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    try {</span></span>
<span class="line"><span>        // 补充业务（结果不影响核心业务）</span></span>
<span class="line"><span>        this.addition(param, context);</span></span>
<span class="line"><span>    } catch (ServiceException ex) {</span></span>
<span class="line"><span>        sendGoodsLog.info(&quot;SendGoodsAction-&gt;addition got exception. param is &quot; + param, ex);</span></span>
<span class="line"><span>        throw ex;</span></span>
<span class="line"><span>    } catch (RuntimeException ex) {</span></span>
<span class="line"><span>        sendGoodsLog.info(&quot;SendGoodsAction-&gt;addition got runtime exception. param is &quot; + param, ex);</span></span>
<span class="line"><span>        throw ex;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    // 处理结果</span></span>
<span class="line"><span>    return null;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面提到的三个抽象方法（业务逻辑校验、卖家发货业务逻辑、补充业务）都是在子类中实现的。<br> 即控制了主流程结构，又不失灵活性，可以让使用者在其基础上定制开发。如果有新的业务玩法进来，原来的流程满足不了需求，我们可以基于模板类编写新的子类。</p><p><strong>适用场景：</strong></p><ul><li>希望控制算法的主流程，不能随意变更框架，但又想保留子类业务的个性扩展。</li><li>去除重复代码。 保留父类通用的代码逻辑，让子类不再需要重复处理公用逻辑，只关注特定逻辑，起到去除子类中重复代码的目的。</li><li>案例很多，比如 Jenkins 的拉取代码、编译、打包、发布、部署的流程作为一个通用的流程，不同系统（java、python、nodejs等）可以根据自身的需求开发，定制自己的持续发布流程。</li></ul><h2 id="_2、策略模式" tabindex="-1"><a class="header-anchor" href="#_2、策略模式"><span>2、策略模式</span></a></h2><p><strong>定义：</strong></p><blockquote><p>定义一系列算法，并将每种算法分别放入独立的类中，以使算法的对象能够相互替换。</p></blockquote><p>由客户端自己决定在什么样的情况下使用哪些具体的策略。</p><p><strong>核心思路：</strong></p><ul><li>上下文信息类（Context）：使用不同的策略环境，根据自身的条件选择不同的策略实现类来完成所需要的操作。他持有一个策略实例的引用。</li><li>抽象策略类（Strategy）：抽象策略，定义每个策略都要实现的方法</li><li>具体策略类（A Realize）：负责实现抽象策略中定义的策略方法。</li></ul><div align="left"><img src="`+r+`" width="600px"></div><p><strong>代码示例：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/**</span></span>
<span class="line"><span> * @author 微信公众号：老马啸西风</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>public interface PromotionStrategy {</span></span>
<span class="line"><span>    // 活动类型</span></span>
<span class="line"><span>    String promotionType();</span></span>
<span class="line"><span>    // 活动优惠</span></span>
<span class="line"><span>    int recommand(String productId);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>public class FullSendPromotion implements PromotionStrategy {</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public String promotionType() {</span></span>
<span class="line"><span>        return &quot;FullSend&quot;;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public int recommand(String productId) {</span></span>
<span class="line"><span>        System.out.println(&quot;参加满送活动&quot;);</span></span>
<span class="line"><span>        return 0;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>public class FullReducePromotion implements PromotionStrategy {</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public String promotionType() {</span></span>
<span class="line"><span>        return &quot;FullReduce&quot;;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public int recommand(String productId) {</span></span>
<span class="line"><span>        System.out.println(&quot;参加满减活动&quot;);</span></span>
<span class="line"><span>        return 0;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@author 微信公众号：老马啸西风</span></span>
<span class="line"><span>public class Context {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    private static List&lt;PromotionStrategy&gt; promotionStrategyList = new ArrayList&lt;&gt;();</span></span>
<span class="line"><span>    static {</span></span>
<span class="line"><span>        promotionStrategyList.add(new FullReducePromotion());</span></span>
<span class="line"><span>        promotionStrategyList.add(new FullSendPromotion());</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    public void recommand(String promotionType, String productId) {</span></span>
<span class="line"><span>        PromotionStrategy promotionStrategy = null;</span></span>
<span class="line"><span>        // 找到对应的策略类</span></span>
<span class="line"><span>        for (PromotionStrategy temp : promotionStrategyList) {</span></span>
<span class="line"><span>            if (temp.promotionType().equals(promotionType)) {</span></span>
<span class="line"><span>                promotionStrategy = temp;</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        // 策略子类调用</span></span>
<span class="line"><span>        promotionStrategy.recommand(productId);</span></span>
<span class="line"><span>    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，定义活动策略的接口类<code>PromotionStrategy</code>，定义接口方法，每一种具体的策略算法都要实现该接口，<code>FullSendPromotion</code>和<code>FullReducePromotion</code>。</p><p><code>Context</code>负责存储和使用策略，汇集了所有的策略子类。并根据传入的参数，匹配到具体的策略子类，然后调用<code>recommand</code>方法，处理具体的业务。</p><p><strong>使用策略的好处：</strong></p><ul><li>提升代码的可维护性。不同策略类隔离，互不影响。每一次新增策略时都通过新增类来进行隔离，避免了if-else超大的复杂类</li><li>动态快速地替换更多的算法。由于调度策略与算法实现分离，且接口规范固定，我们可以灵活的调整选择不同的策略子类。</li></ul><p><strong>适用场景：</strong></p><ul><li>压缩文件，提供了 gzip、zip 、rar 等格式，由客户端自己选择哪一种压缩策略。不同策略可以相互替换。</li><li>营销活动，根据策略路由选择不同的活动玩法，不同的营销活动隔离，满足开闭原则。</li><li>选择权交给了客户端，适合那些经常调整策略的to C 业务，灵活性高。</li></ul><h2 id="_3、状态模式" tabindex="-1"><a class="header-anchor" href="#_3、状态模式"><span>3、状态模式</span></a></h2><p><strong>定义：</strong></p><blockquote><p>一种行为设计模式，让你能在一个对象的内部状态变化时改变其行为，使其看上去就像改变了自身所属的类一样。</p></blockquote><p>通过定义一系列状态的变化来控制行为的变化。以电商为例，用户的订单会经历以下这些状态：已下单、已付款、已发货、派送中、待取件、已签收、交易成功、交易关闭等状态。</p><p><strong>核心思路：</strong></p><ul><li>上下文信息类(OrderContext)：存储<code>当前状态</code>的类，对外提供更新状态的方法。</li><li>抽象状态类（OrderState）：可以是一个接口或抽象类，用于声明状态更新时执行哪些操作</li><li>具体状态类（MakeOrderState、PayOrderState、ReceiveGoodOrderState）：实现抽象状态类定义的方法，根据具体的场景来指定对应状态改变后的代码实现逻辑。</li></ul><div align="left"><img src="`+d+`" width="600px"></div><p><strong>代码示例：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/**</span></span>
<span class="line"><span> * @author 微信公众号：老马啸西风</span></span>
<span class="line"><span> * 订单状态，接口定义（扩展实现若干不同状态的子类）</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>public interface OrderState {</span></span>
<span class="line"><span>    void handle(OrderContext context);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 下单</span></span>
<span class="line"><span>public class MakeOrderState implements OrderState {</span></span>
<span class="line"><span>    public static MakeOrderState instance = new MakeOrderState();</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public void handle(OrderContext context) {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        System.out.println(&quot;1、创建订单&quot;);</span></span>
<span class="line"><span>        context.setCurrentOrderState(PayOrderState.instance);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 付款、确认收货，实现类相似，这里省略。。。。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 订单上下文</span></span>
<span class="line"><span>public class OrderContext {</span></span>
<span class="line"><span>    private OrderState currentOrderState;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public OrderContext(OrderState currentOrderState) {</span></span>
<span class="line"><span>        if (currentOrderState == null) {</span></span>
<span class="line"><span>            this.currentOrderState = new MakeOrderState();</span></span>
<span class="line"><span>        } else {</span></span>
<span class="line"><span>            this.currentOrderState = currentOrderState;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public void setCurrentOrderState(OrderState currentOrderState) {</span></span>
<span class="line"><span>        this.currentOrderState = currentOrderState;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public void execute() {</span></span>
<span class="line"><span>        currentOrderState.handle(this);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div align="left"><img src="`+c+`" width="600px"></div><p>运行结果：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>1、创建订单</span></span>
<span class="line"><span>2、支付宝付款</span></span>
<span class="line"><span>3、确认收到货物</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>状态模式设计的核心点在于找到合适的抽象状态以及状态之间的转移关系，通过改变状态来达到改变行为的目的。</p><p><strong>适用场景：</strong></p><ul><li>业务需要根据状态的变化，进行不同的操作。比如：电商下单的全流程</li><li>不希望有大量的<code>if-else</code>代码堆在一起，希望不同的状态处理逻辑隔离，遵守开闭原则</li></ul><h2 id="_4、观察者模式" tabindex="-1"><a class="header-anchor" href="#_4、观察者模式"><span>4、观察者模式</span></a></h2><p><strong>定义：</strong></p><blockquote><p>也称 发布-订阅模式，是一种通知机制，当一个对象改变状态时，它的所有依赖项都会自动得到通知和更新。让发送通知的一方（被观察者）和接收通知的一方（观察者，支持多个）能彼此分离，互不影响，该模式在软件开发中非常流行。</p></blockquote><p>像我们常见的<code>Kafka</code>、<code>RocketMQ</code>等消息中间件都是采用这种架构模式，还有<code>Spring</code>的 <code>ApplicationEvent</code> 异步事件驱动，有很好的低耦合特性。</p><p><strong>类似其他叫法：</strong></p><ul><li>发布者 --- 订阅者</li><li>生产者 --- 消费者</li><li>事件发布 --- 事件监听</li></ul><p><strong>核心思路：</strong></p><ul><li>发布者（Publisher）：定义一系列接口，用来管理和触发订阅者</li><li>具体发布者（PublisherImpl）：具体实现类，实现<code>Publisher</code>接口定义的方法</li><li>订阅者（Observer）：观察者接口，当发布者发布消息或事件时，会通知到订阅者进行处理。</li><li>具体订阅者（WeixinObserver、EmailObserver）：<code>Observer</code>的子类，用来处理具体的业务逻辑</li></ul><div align="left"><img src="`+t+`" width="600px"></div><p><strong>代码示例：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/**</span></span>
<span class="line"><span> * @author 微信公众号：老马啸西风</span></span>
<span class="line"><span> * &lt;p&gt;</span></span>
<span class="line"><span> * 被观察者</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>public interface Publisher {</span></span>
<span class="line"><span>    void add(Observer observer);</span></span>
<span class="line"><span>    void remove(Observer observer);</span></span>
<span class="line"><span>    void notify(Object object);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>public class PublisherImpl implements Publisher {</span></span>
<span class="line"><span>    private List&lt;Observer&gt; observerList = new ArrayList&lt;&gt;();</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public void add(Observer observer) {</span></span>
<span class="line"><span>        observerList.add(observer);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public void remove(Observer observer) {</span></span>
<span class="line"><span>        observerList.remove(observer);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public void notify(Object object) {</span></span>
<span class="line"><span>        System.out.println(&quot;创建订单，并发送通知事件&quot;);</span></span>
<span class="line"><span>        observerList.stream().forEach(t -&gt; t.handle());</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 观察者接口</span></span>
<span class="line"><span>public interface Observer {</span></span>
<span class="line"><span>    public void handle();</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 观察者子类</span></span>
<span class="line"><span>public class EmailObserver implements Observer {</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public void handle() {</span></span>
<span class="line"><span>        System.out.println(&quot;发送邮件通知！&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>观察者模式的核心精髓：被观察者定义了一个通知列表，收集了所有的观察者对象，当<code>被观察者</code>需要发出通知时，就会通知这个列表的所有<code>观察者</code>。</p><p><strong>适用场景：</strong></p><ul><li>当一个对象状态的改变需要改变其他对象时。比如：订单支付成功后，需要通知扣减账户余额</li><li>一个对象发生改变时只想要发送通知，而不需要知道接收者是谁。比如：微博feed流，粉丝能拉到最新微博</li><li>代码的扩展性强，如果需要新增一个<code>观察者</code>业务处理，只需新增一个<code>子类观察者</code>，并注入到<code>被观察者</code>的通知列表即可，代码的耦合性非常低。</li></ul><h2 id="_5、访问者模式" tabindex="-1"><a class="header-anchor" href="#_5、访问者模式"><span>5、访问者模式</span></a></h2><p><strong>定义：</strong></p><blockquote><p>访问者模式是一种将<code>操作</code>与<code>对象结构</code>分离的软件设计模式，允许在运行时将一个或多个操作应用于一组对象。</p></blockquote><p><strong>核心思路：</strong></p><ul><li>行为接口（RouterVisitor）：定义对每个 Element 访问的行为，方法参数就是被访问的元素，它的方法个数理论上与元素的个数是一样的。</li><li>行为接口实现类（LinuxRouterVisitor、WindowRouterVisitor）：它需要给出对每一个元素类访问时所产生的具体行为。</li><li>元素接口（RouterElement）：定义一个可以获取访问操作的接口，使客户端对象能够“访问”的入口点。</li><li>元素接口实现类（JhjRouterElement、LyqRouterElement）：将访问者<code>RouterVisitor</code>传递给此对象作为参数。</li></ul><div align="left"><img src="`+o+`" width="600px"></div><p><strong>代码示例：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/**</span></span>
<span class="line"><span> * @author 微信公众号：老马啸西风</span></span>
<span class="line"><span> * 定义行为动作</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>public interface RouterVisitor {</span></span>
<span class="line"><span>    // 交换机，发送数据</span></span>
<span class="line"><span>    void sendData(JhjRouterElement jhjRouterElement);</span></span>
<span class="line"><span>    // 路由器，发送数据</span></span>
<span class="line"><span>    void sendData(LyqRouterElement lyqRouterElement);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>public class LinuxRouterVisitor implements RouterVisitor {</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public void sendData(JhjRouterElement jhjRouterElement) {</span></span>
<span class="line"><span>        System.out.println(&quot;Linux 环境下，交换机发送数据&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public void sendData(LyqRouterElement lyqRouterElement) {</span></span>
<span class="line"><span>        System.out.println(&quot;Linux 环境下，路由器发送数据&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>public class WindowRouterVisitor implements RouterVisitor {</span></span>
<span class="line"><span>   // 省略。。。</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * @author 微信公众号：老马啸西风</span></span>
<span class="line"><span> * &lt;p&gt;</span></span>
<span class="line"><span> * 路由元素</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>public interface RouterElement {</span></span>
<span class="line"><span>    // 发送数据</span></span>
<span class="line"><span>    void sendData(RouterVisitor routerVisitor);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>public class JhjRouterElement implements RouterElement {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public void sendData(RouterVisitor routerVisitor) {</span></span>
<span class="line"><span>        System.out.println(&quot;交换机开始工作。。。&quot;);</span></span>
<span class="line"><span>        routerVisitor.sendData(this);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>public class LyqRouterElement implements RouterElement {</span></span>
<span class="line"><span> // 省略。。。</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>适用场景：</strong></p><ul><li>动态绑定不同的对象和对象操作</li><li>通过行为与对象结构的分离，实现对象的职责分离，提高代码复用性</li></ul><h2 id="_6、备忘录模式" tabindex="-1"><a class="header-anchor" href="#_6、备忘录模式"><span>6、备忘录模式</span></a></h2><p><strong>定义：</strong></p><blockquote><p>也叫快照模式，用来存储另外一个对象内部状态的快照，便于以后可以恢复。</p></blockquote><p><strong>核心思路：</strong></p><ul><li>原始对象（Originator）：除了创建自身所需要的属性和业务逻辑外，还通过提供方法 <code>bak()</code> 和 <code>restore(memento)</code> 来保存和恢复对象副本。</li><li>备忘录（Memento）：用于保存原始对象的所有属性状态，以便在未来进行恢复操作。</li></ul><div align="left"><img src="`+v+`" width="600px"></div><p><strong>代码示例：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/**</span></span>
<span class="line"><span> * @author 微信公众号：老马啸西风</span></span>
<span class="line"><span> * 原始对象</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>@Data</span></span>
<span class="line"><span>public class Originator {</span></span>
<span class="line"><span>    private Long id;</span></span>
<span class="line"><span>    private String productName;</span></span>
<span class="line"><span>    private String picture;</span></span>
<span class="line"><span>    // 创建快照</span></span>
<span class="line"><span>    public Memento bak() {</span></span>
<span class="line"><span>        return new Memento(id, productName, picture);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    //恢复</span></span>
<span class="line"><span>    public void restore(Memento m) {</span></span>
<span class="line"><span>        this.id = m.getId();</span></span>
<span class="line"><span>        this.productName = m.getProductName();</span></span>
<span class="line"><span>        this.picture = m.getPicture();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 快照</span></span>
<span class="line"><span>@Data</span></span>
<span class="line"><span>@AllArgsConstructor</span></span>
<span class="line"><span>public class Memento {</span></span>
<span class="line"><span>    private Long id;</span></span>
<span class="line"><span>    private String productName;</span></span>
<span class="line"><span>    private String picture;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>适用场景：</strong></p><ul><li>在线编辑器，不小心关闭浏览器，重新打开页面，可以从草稿箱恢复之前内容</li><li>不希望外界直接访问对象的内部状态，比如：物流包裹</li><li>另外像操作系统自动备份，数据库的<code>SAVEPOINT</code></li></ul><h2 id="写在最后" tabindex="-1"><a class="header-anchor" href="#写在最后"><span>写在最后</span></a></h2><p>设计模式很多人都学习过，但项目实战时总是晕晕乎乎，原因在于没有了解其核心是什么，底层逻辑是什么，《设计模式：可复用面向对象的基础》有讲过，</p><blockquote><p>在设计中思考什么应该变化，并封装会发生变化的概念。</p></blockquote><p><strong>软件架构的精髓：找到变化，封装变化。</strong></p><p>业务千变万化，没有固定的编码答案，千万不要硬套设计模式。无论选择哪一种设计模式，尽量要能满足<code>SOLID</code>原则，自我review是否满足业务的持续扩展性。有句话说的好，“不论白猫黑猫，能抓老鼠就是好猫。”</p>`,91)]))}const x=a(u,[["render",m]]),S=JSON.parse('{"path":"/posts/interview/arch/designmodel/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%EF%BC%88%E7%AC%AC%E4%B8%89%E6%9C%9F%EF%BC%89.html","title":"软件设计模式系列（第三期）","lang":"zh-CN","frontmatter":{"title":"软件设计模式系列（第三期）","description":"软件设计模式系列（第三期） 作者：老马 公众号：老马啸西风 博客：https://houbb.github.io/ 人生理念：知行合一 面对复杂的业务场景，千变万化的客户需求，如何以一变应万变，以最小的开发成本快速落地实现，同时保证系统有着较低的复杂度，能够保证系统后续de持续迭代能力，让系统拥有较高的可扩展性。 这些是一个合格的架构师必须修炼的基础内...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/vpress/posts/interview/arch/designmodel/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%EF%BC%88%E7%AC%AC%E4%B8%89%E6%9C%9F%EF%BC%89.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"软件设计模式系列（第三期）"}],["meta",{"property":"og:description","content":"软件设计模式系列（第三期） 作者：老马 公众号：老马啸西风 博客：https://houbb.github.io/ 人生理念：知行合一 面对复杂的业务场景，千变万化的客户需求，如何以一变应万变，以最小的开发成本快速落地实现，同时保证系统有着较低的复杂度，能够保证系统后续de持续迭代能力，让系统拥有较高的可扩展性。 这些是一个合格的架构师必须修炼的基础内..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-30T09:38:40.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-30T09:38:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"软件设计模式系列（第三期）\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-30T09:38:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743327520000,"updatedTime":1743327520000,"contributors":[{"name":"houbb","username":"houbb","email":"houbinbin.echo@gmail.com","commits":1,"url":"https://github.com/houbb"}]},"readingTime":{"minutes":11.96,"words":3589},"filePathRelative":"posts/interview/arch/designmodel/软件设计模式系列（第三期）.md","localizedDate":"2025年3月30日","excerpt":"\\n<blockquote>\\n<p>作者：老马<br>\\n<br>公众号：老马啸西风<br>\\n<br> 博客：<a href=\\"https://houbb.github.io/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://houbb.github.io/</a><br>\\n<br> 人生理念：知行合一</p>\\n</blockquote>\\n<p>面对复杂的业务场景，千变万化的客户需求，如何以一变应万变，以最小的开发成本快速落地实现，同时保证系统有着较低的复杂度，能够保证系统后续de持续迭代能力，让系统拥有较高的可扩展性。</p>\\n<p><code>这些是一个合格的架构师必须修炼的基础内功，但是如何修炼这门神功？？？</code></p>","autoDesc":true}');export{x as comp,S as data};
