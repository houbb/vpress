import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as i}from"./app-NomDibRt.js";const p="/vpress/images/spring/springboot/5-2.jpg",r="/vpress/images/spring/springboot/5-1.jpg",l={};function d(t,s){return i(),a("div",null,s[0]||(s[0]=[e(`<h1 id="shardingsphere-解决海量数据分库分表" tabindex="-1"><a class="header-anchor" href="#shardingsphere-解决海量数据分库分表"><span>ShardingSphere 解决海量数据分库分表</span></a></h1><blockquote><p>作者：老马<br><br>公众号：老马啸西风<br><br> 博客：<a href="https://houbb.github.io/" target="_blank" rel="noopener noreferrer">https://houbb.github.io/</a><br><br> 人生理念：知行合一</p></blockquote><p><code>Spring Boot 作为主流微服务框架，拥有成熟的社区生态。市场应用广泛，为了方便大家，整理了一个基于spring boot的常用中间件快速集成入门系列手册，涉及RPC、缓存、消息队列、分库分表、注册中心、分布式配置等常用开源组件，大概有几十篇文章，陆续会开放出来，感兴趣同学可以关注&amp;收藏</code></p><p>互联网高速发展，同时也带来的海量数据存储问题。传统关系型数据库的单库单表已经很难支撑，如何高效存储和访问这些数据，成为业内急需解决的问题。解决思路有两个方向：</p><ul><li>NoSQL数据库，非关系型数据库，天然集成了类似分布式分片的功能，支持海量数据存储，但是不具备事务管理</li><li>分库分表，对多个<strong>单库单表</strong>资源整合，<strong>并配备资源调度模块</strong>，从而形成一个具有海量数据储存的逻辑表。</li></ul><p>今天我们主要介绍，如何基于Springboot快速集成分库分表框架，尽量做到开箱即用</p><p>当然除了<code>ShardingSphere</code>之外，还有其他分库分表框架，如：<code>Cobar</code>，<code>MyCat</code>等</p><h2 id="_1、shardingsphere介绍" tabindex="-1"><a class="header-anchor" href="#_1、shardingsphere介绍"><span>1、ShardingSphere介绍</span></a></h2><p>ShardingSphere 是一套开源的分布式数据库中间件解决方案组成的生态圈，它由 3 款相互独立，却又能够混合部署配合使用的产品组成。它们均提供标准化的数据分片、分布式事务和数据库治理功能</p><p><strong>ShardingSphere 由三个子项目组成，形成一个完整的数据库解决方案。</strong></p><p>1、ShardingSphere-JDBC：定位为轻量级 Java 框架，在 Java 的 JDBC 层提供额外服务。它使用客户端直连数据库，以 jar 包形式提供服务，无需额外部署和依赖，可理解为增强版的 JDBC 驱动，完全兼容 JDBC 和各种 ORM 框架。</p><p>适用于任何基于Java的ORM框架，如：JPA, Hibernate, Mybatis, Spring JDBC Template或直接使用JDBC。基于任何第三方的数据库连接池，如：DBCP, C3P0, BoneCP, Druid, HikariCP等。支持任意实现JDBC规范的数据库。目前支持MySQL，Oracle，SQLServer和PostgreSQL。</p><p>2、ShardingSphere-Proxy：定位为透明化的数据库代理端，提供封装了数据库二进制协议的服务端版本，用于完成对异构语言的支持。目前提供 MySQL/PostgreSQL 版本，它可以使用任何兼容 MySQL/PostgreSQL 协议的访问客户端操作数据，对 DBA 更加友好。</p><p>3、ShardingSphere-Sidecar（规划中）：定位为 Kubernetes 的云原生数据库代理，以 Sidecar 的形式代理所有对数据库的访问。通过无中心、零侵入的方案提供与数据库交互的的啮合层，即 Database Mesh，又可称数据网格。</p><p><strong>优势：</strong></p><ul><li><p>解决方案完备性，它集客户端分片、代理服务器，以及分布式数据库的核心功能于一身。</p></li><li><p>开发友好性，提供了友好的集成方式，业务开发人员只需要引入一个 JAR 包就能在业务代码中嵌入数据分片、读写分离、分布式事务、数据库治理等一系列功能。</p></li><li><p>可插拔的系统扩展性：它的很多核心功能均通过插件的形式提供，供开发者排列组合来定制属于自己的独特系统。</p></li></ul><h2 id="_2、项目示例" tabindex="-1"><a class="header-anchor" href="#_2、项目示例"><span>2、项目示例</span></a></h2><p>首先，新建一个工程<code>spring-boot-bulking-sharding-sphere</code>，在<code>pom.xml</code> 文件中添加分库分表的 starter 依赖包</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;org.apache.shardingsphere&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;sharding-jdbc-spring-boot-starter&lt;/artifactId&gt;</span></span>
<span class="line"><span>    &lt;version&gt;4.0.0-RC1&lt;/version&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>数据环境准备</strong></p><p>分别创建两个数据库<code>ds0</code>、<code>ds1 </code>，在ds0数据库中创建 <code>user_0</code>、<code>user_2</code>两张用户表</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>CREATE TABLE \`user_0\` (</span></span>
<span class="line"><span>  \`id\` bigint(20) NOT NULL AUTO_INCREMENT,</span></span>
<span class="line"><span>  \`user_name\` varchar(128) NOT NULL DEFAULT &#39;&#39; COMMENT &#39;用户名&#39;,</span></span>
<span class="line"><span>  \`age\` int(11) NOT NULL  COMMENT &#39;年龄&#39;,</span></span>
<span class="line"><span>  \`address\` varchar(128) COMMENT &#39;地址&#39;,</span></span>
<span class="line"><span>   PRIMARY KEY (\`id\`)</span></span>
<span class="line"><span>) ENGINE=InnoDB  DEFAULT CHARSET=utf8mb4 COMMENT=&#39;用户表&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>CREATE TABLE \`user_2\` (</span></span>
<span class="line"><span>  \`id\` bigint(20) NOT NULL AUTO_INCREMENT,</span></span>
<span class="line"><span>  \`user_name\` varchar(128) NOT NULL DEFAULT &#39;&#39; COMMENT &#39;用户名&#39;,</span></span>
<span class="line"><span>  \`age\` int(11) NOT NULL  COMMENT &#39;年龄&#39;,</span></span>
<span class="line"><span>  \`address\` varchar(128) COMMENT &#39;地址&#39;,</span></span>
<span class="line"><span>   PRIMARY KEY (\`id\`)</span></span>
<span class="line"><span>) ENGINE=InnoDB  DEFAULT CHARSET=utf8mb4 COMMENT=&#39;用户表&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在ds1数据库中创建 <code>user_1</code>、<code>user_3</code>两张用户表</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>CREATE TABLE \`user_1\` (</span></span>
<span class="line"><span>  \`id\` bigint(20) NOT NULL AUTO_INCREMENT,</span></span>
<span class="line"><span>  \`user_name\` varchar(128) NOT NULL DEFAULT &#39;&#39; COMMENT &#39;用户名&#39;,</span></span>
<span class="line"><span>  \`age\` int(11) NOT NULL  COMMENT &#39;年龄&#39;,</span></span>
<span class="line"><span>  \`address\` varchar(128) COMMENT &#39;地址&#39;,</span></span>
<span class="line"><span>   PRIMARY KEY (\`id\`)</span></span>
<span class="line"><span>) ENGINE=InnoDB  DEFAULT CHARSET=utf8mb4 COMMENT=&#39;用户表&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>CREATE TABLE \`user_3\` (</span></span>
<span class="line"><span>  \`id\` bigint(20) NOT NULL AUTO_INCREMENT,</span></span>
<span class="line"><span>  \`user_name\` varchar(128) NOT NULL DEFAULT &#39;&#39; COMMENT &#39;用户名&#39;,</span></span>
<span class="line"><span>  \`age\` int(11) NOT NULL  COMMENT &#39;年龄&#39;,</span></span>
<span class="line"><span>  \`address\` varchar(128) COMMENT &#39;地址&#39;,</span></span>
<span class="line"><span>   PRIMARY KEY (\`id\`)</span></span>
<span class="line"><span>) ENGINE=InnoDB  DEFAULT CHARSET=utf8mb4 COMMENT=&#39;用户表&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们采用Mybatis作为ORM框架，遵循Mybatis的开发流程，首先需要定义业务实体类<code>User</code>，<code>Mapper</code>接口类文件，以及对应的sql语句的xml文件。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@Mapper</span></span>
<span class="line"><span>public interface UserMapper {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    Long addUser(User user);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    List&lt;User&gt; queryAllUser();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    User queryUserById(Long id);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    Page&lt;User&gt; querUserByPage();</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Spring boot 框架最为闪亮的设计就是<code>约定胜于配置</code>，废弃了之前繁琐的xml形式定义Bean实例，将一系列框架的配置项迁移到 <code>application.properties</code> 中，借助 <code>EnableAutoConfiguration</code>自动完成装载，并实例化相应的Bean实例到 spring 容器中，IOC统一管理。</p><p>针对两个数据库初始化两个<code>DataSource</code>对象，这两个 DataSource 对象将组成一个 Map 并传递给<code>ShardingDataSourceFactory</code> 工厂类，application.properties 配置文件：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>server.port=8090</span></span>
<span class="line"><span>application.name=spring-boot-bulking-sharding-sphere</span></span>
<span class="line"><span>mybatis.config-location=classpath:config/mybatis-config.xml</span></span>
<span class="line"><span>spring.shardingsphere.datasource.names=ds0,ds1</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 数据源</span></span>
<span class="line"><span>spring.shardingsphere.datasource.ds0.type=com.alibaba.druid.pool.DruidDataSource</span></span>
<span class="line"><span>spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.jdbc.Driver</span></span>
<span class="line"><span>spring.shardingsphere.datasource.ds0.url=jdbc:mysql://localhost:3306/ds0?characterEncoding=utf-8</span></span>
<span class="line"><span>spring.shardingsphere.datasource.ds0.username=root</span></span>
<span class="line"><span>spring.shardingsphere.datasource.ds0.password=111111</span></span>
<span class="line"><span>spring.shardingsphere.datasource.ds1.type=com.alibaba.druid.pool.DruidDataSource</span></span>
<span class="line"><span>spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.jdbc.Driver</span></span>
<span class="line"><span>spring.shardingsphere.datasource.ds1.url=jdbc:mysql://localhost:3306/ds1?characterEncoding=utf-8</span></span>
<span class="line"><span>spring.shardingsphere.datasource.ds1.username=root</span></span>
<span class="line"><span>spring.shardingsphere.datasource.ds1.password=111111</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>搞定数据源后，接下来我们需要设置分库、分表策略。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 不分表（application.properties没有为表单独配置），默认数据源策略</span></span>
<span class="line"><span>spring.shardingsphere.sharding.default-data-source-name=ds1</span></span>
<span class="line"><span></span></span>
<span class="line"><span># user表的分表配置</span></span>
<span class="line"><span>spring.shardingsphere.sharding.tables.user.actual-data-nodes=ds0.user_$-&gt;{[0,2]},ds1.user_$-&gt;{[1,3]}</span></span>
<span class="line"><span># user库策略（也可以采用默认的）</span></span>
<span class="line"><span>spring.shardingsphere.sharding.tables.user.database-strategy.inline.sharding-column=id</span></span>
<span class="line"><span>spring.shardingsphere.sharding.tables.user.database-strategy.inline.algorithm-expression=ds$-&gt;{id % 2}</span></span>
<span class="line"><span># user表策略</span></span>
<span class="line"><span>spring.shardingsphere.sharding.tables.user.table-strategy.inline.sharding-column=id</span></span>
<span class="line"><span>spring.shardingsphere.sharding.tables.user.table-strategy.inline.algorithm-expression=user_$-&gt;{id % 4}</span></span>
<span class="line"><span>#spring.shardingsphere.sharding.tables.user.key-generator.column=id</span></span>
<span class="line"><span>#spring.shardingsphere.sharding.tables.user.key-generator.type=SNOWFLAKE</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 ShardingSphere 中存在一组 ShardingStrategyConfiguration，这里使用的是基于行表达式的 InlineShardingStrategyConfiguration。</p><div align="left"><img src="`+p+`" width="800px"></div><p><code>InlineShardingStrategyConfiguration </code>包含两个参数，一个是指定分片列名称的 shardingColumn，另一个是指定分片算法行表达式的 algorithmExpression。上面的示例，将基于 <code>id</code> 列对 2 的取模值来确定数据应该存储在哪一个数据库中</p><p>我们对user表做了分库分表，拆分成4个表，并分别归属到两个库中。分表键是<code>id</code>字段。</p><p>通过单元测试，插入 10条用户记录，验收下数据的插入情况~</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@Test</span></span>
<span class="line"><span>public void addUser() {</span></span>
<span class="line"><span>    for (long i = 1; i &lt; 11; i++) {</span></span>
<span class="line"><span>        User user = User.builder().id(i).userName(&quot;TomGE&quot;).age(29).address(&quot;杭州&quot;).build();</span></span>
<span class="line"><span>        userMapper.addUser(user);</span></span>
<span class="line"><span>        System.out.println(&quot;插入用户成功，uid=&quot; + user.getId());</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中id=4，id=8 两条记录，插入到ds0库的user_0表中。</p><div align="left"><img src="`+r+`" width="800px"></div><h2 id="_3、项目源码" tabindex="-1"><a class="header-anchor" href="#_3、项目源码"><span>3、项目源码</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>https://github.com/aalansehaiyang/spring-boot-bulking  </span></span>
<span class="line"><span></span></span>
<span class="line"><span>模块：spring-boot-bulking-sharding-sphere</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,41)]))}const h=n(l,[["render",d]]),g=JSON.parse('{"path":"/posts/interview/spring/springboot/ShardingSphere.html","title":"ShardingSphere 解决海量数据分库分表","lang":"zh-CN","frontmatter":{"title":"ShardingSphere 解决海量数据分库分表","description":"ShardingSphere 解决海量数据分库分表 作者：老马 公众号：老马啸西风 博客：https://houbb.github.io/ 人生理念：知行合一 Spring Boot 作为主流微服务框架，拥有成熟的社区生态。市场应用广泛，为了方便大家，整理了一个基于spring boot的常用中间件快速集成入门系列手册，涉及RPC、缓存、消息队列、分库...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/vpress/posts/interview/spring/springboot/ShardingSphere.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"ShardingSphere 解决海量数据分库分表"}],["meta",{"property":"og:description","content":"ShardingSphere 解决海量数据分库分表 作者：老马 公众号：老马啸西风 博客：https://houbb.github.io/ 人生理念：知行合一 Spring Boot 作为主流微服务框架，拥有成熟的社区生态。市场应用广泛，为了方便大家，整理了一个基于spring boot的常用中间件快速集成入门系列手册，涉及RPC、缓存、消息队列、分库..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-30T09:38:40.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-30T09:38:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ShardingSphere 解决海量数据分库分表\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-30T09:38:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1743327520000,"updatedTime":1743327520000,"contributors":[{"name":"houbb","username":"houbb","email":"houbinbin.echo@gmail.com","commits":1,"url":"https://github.com/houbb"}]},"readingTime":{"minutes":5.92,"words":1777},"filePathRelative":"posts/interview/spring/springboot/ShardingSphere.md","localizedDate":"2025年3月30日","excerpt":"\\n<blockquote>\\n<p>作者：老马<br>\\n<br>公众号：老马啸西风<br>\\n<br> 博客：<a href=\\"https://houbb.github.io/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://houbb.github.io/</a><br>\\n<br> 人生理念：知行合一</p>\\n</blockquote>\\n<p><code>Spring Boot 作为主流微服务框架，拥有成熟的社区生态。市场应用广泛，为了方便大家，整理了一个基于spring boot的常用中间件快速集成入门系列手册，涉及RPC、缓存、消息队列、分库分表、注册中心、分布式配置等常用开源组件，大概有几十篇文章，陆续会开放出来，感兴趣同学可以关注&amp;收藏</code></p>","autoDesc":true}');export{h as comp,g as data};
